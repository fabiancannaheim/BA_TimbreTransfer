node {
  name: "waveform"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transpose"
  op: "Transpose"
  input: "waveform"
  input: "transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame_length"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "stft/frame_step"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "stft/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "stft/frame/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "stft/frame/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "stft/frame/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/range"
  op: "Range"
  input: "stft/frame/range/start"
  input: "stft/frame/Rank"
  input: "stft/frame/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/add"
  op: "Add"
  input: "stft/frame/axis"
  input: "stft/frame/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/strided_slice/stack"
  op: "Pack"
  input: "stft/frame/axis"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/strided_slice/stack_1"
  op: "Pack"
  input: "stft/frame/add"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/strided_slice"
  op: "StridedSlice"
  input: "stft/frame/range"
  input: "stft/frame/strided_slice/stack"
  input: "stft/frame/strided_slice/stack_1"
  input: "stft/frame/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "stft/frame/Shape"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "stft/frame/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/sub"
  op: "Sub"
  input: "stft/frame/Rank"
  input: "stft/frame/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/sub_1"
  op: "Sub"
  input: "stft/frame/sub"
  input: "stft/frame/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/packed/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/packed"
  op: "Pack"
  input: "stft/frame/strided_slice"
  input: "stft/frame/packed/1"
  input: "stft/frame/sub_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/split/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/split"
  op: "SplitV"
  input: "stft/frame/Shape"
  input: "stft/frame/packed"
  input: "stft/frame/split/split_dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "num_split"
    value {
      i: 3
    }
  }
}
node {
  name: "stft/frame/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "stft/frame/Reshape"
  op: "Reshape"
  input: "stft/frame/split:1"
  input: "stft/frame/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/Size_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "stft/frame/Neg"
  op: "Neg"
  input: "stft/frame/Reshape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/floordiv"
  op: "FloorDiv"
  input: "stft/frame/Neg"
  input: "stft/frame_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/Neg_1"
  op: "Neg"
  input: "stft/frame/floordiv"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/sub_2"
  op: "Sub"
  input: "stft/frame/Neg_1"
  input: "stft/frame/sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/mul"
  op: "Mul"
  input: "stft/frame_step"
  input: "stft/frame/sub_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/add_1"
  op: "Add"
  input: "stft/frame_length"
  input: "stft/frame/mul"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/sub_3"
  op: "Sub"
  input: "stft/frame/add_1"
  input: "stft/frame/Reshape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/Maximum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/Maximum"
  op: "Maximum"
  input: "stft/frame/Maximum/x"
  input: "stft/frame/sub_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/zeros/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "stft/frame/zeros/mul"
  op: "Mul"
  input: "stft/frame/Size"
  input: "stft/frame/zeros/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/zeros/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "stft/frame/zeros/Less"
  op: "Less"
  input: "stft/frame/zeros/mul"
  input: "stft/frame/zeros/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/zeros/packed/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "stft/frame/zeros/packed"
  op: "Pack"
  input: "stft/frame/Size"
  input: "stft/frame/zeros/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/zeros"
  op: "Fill"
  input: "stft/frame/zeros/packed"
  input: "stft/frame/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/zeros_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "stft/frame/zeros_1/mul"
  op: "Mul"
  input: "stft/frame/Size_1"
  input: "stft/frame/zeros_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/zeros_1/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "stft/frame/zeros_1/Less"
  op: "Less"
  input: "stft/frame/zeros_1/mul"
  input: "stft/frame/zeros_1/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/zeros_1/packed/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "stft/frame/zeros_1/packed"
  op: "Pack"
  input: "stft/frame/Size_1"
  input: "stft/frame/zeros_1/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/zeros_1"
  op: "Fill"
  input: "stft/frame/zeros_1/packed"
  input: "stft/frame/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/concat/values_1/0/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/concat/values_1/0"
  op: "Pack"
  input: "stft/frame/concat/values_1/0/0"
  input: "stft/frame/Maximum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/concat/values_1"
  op: "Pack"
  input: "stft/frame/concat/values_1/0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/concat"
  op: "ConcatV2"
  input: "stft/frame/zeros"
  input: "stft/frame/concat/values_1"
  input: "stft/frame/zeros_1"
  input: "stft/frame/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/PadV2"
  op: "PadV2"
  input: "transpose"
  input: "stft/frame/concat"
  input: "stft/frame/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/Shape_1"
  op: "Shape"
  input: "stft/frame/PadV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "stft/frame/add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/add_2"
  op: "Add"
  input: "stft/frame/strided_slice"
  input: "stft/frame/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/strided_slice_1/stack"
  op: "Pack"
  input: "stft/frame/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/strided_slice_1/stack_1"
  op: "Pack"
  input: "stft/frame/add_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/strided_slice_1"
  op: "StridedSlice"
  input: "stft/frame/Shape_1"
  input: "stft/frame/strided_slice_1/stack"
  input: "stft/frame/strided_slice_1/stack_1"
  input: "stft/frame/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "stft/frame/gcd/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "stft/frame/floordiv_1"
  op: "FloorDiv"
  input: "stft/frame_length"
  input: "stft/frame/gcd/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/floordiv_2"
  op: "FloorDiv"
  input: "stft/frame_step"
  input: "stft/frame/gcd/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/floordiv_3"
  op: "FloorDiv"
  input: "stft/frame/strided_slice_1"
  input: "stft/frame/gcd/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/mul_1"
  op: "Mul"
  input: "stft/frame/floordiv_3"
  input: "stft/frame/gcd/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/concat_1/values_1"
  op: "Pack"
  input: "stft/frame/mul_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/concat_1"
  op: "ConcatV2"
  input: "stft/frame/split"
  input: "stft/frame/concat_1/values_1"
  input: "stft/frame/split:2"
  input: "stft/frame/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/concat_2/values_1"
  op: "Pack"
  input: "stft/frame/floordiv_3"
  input: "stft/frame/gcd/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/concat_2"
  op: "ConcatV2"
  input: "stft/frame/split"
  input: "stft/frame/concat_2/values_1"
  input: "stft/frame/split:2"
  input: "stft/frame/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/zeros_like"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/ones_like/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "stft/frame/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/ones_like"
  op: "Fill"
  input: "stft/frame/ones_like/Shape"
  input: "stft/frame/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/StridedSlice"
  op: "StridedSlice"
  input: "stft/frame/PadV2"
  input: "stft/frame/zeros_like"
  input: "stft/frame/concat_1"
  input: "stft/frame/ones_like"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/Reshape_1"
  op: "Reshape"
  input: "stft/frame/StridedSlice"
  input: "stft/frame/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/range_1"
  op: "Range"
  input: "stft/frame/range_1/start"
  input: "stft/frame/Neg_1"
  input: "stft/frame/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/mul_2"
  op: "Mul"
  input: "stft/frame/range_1"
  input: "stft/frame/floordiv_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/Reshape_2/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/Reshape_2/shape"
  op: "Pack"
  input: "stft/frame/Neg_1"
  input: "stft/frame/Reshape_2/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/Reshape_2"
  op: "Reshape"
  input: "stft/frame/mul_2"
  input: "stft/frame/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/range_2"
  op: "Range"
  input: "stft/frame/range_2/start"
  input: "stft/frame/floordiv_1"
  input: "stft/frame/range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/Reshape_3/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/frame/Reshape_3/shape"
  op: "Pack"
  input: "stft/frame/Reshape_3/shape/0"
  input: "stft/frame/floordiv_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/Reshape_3"
  op: "Reshape"
  input: "stft/frame/range_2"
  input: "stft/frame/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/add_3"
  op: "Add"
  input: "stft/frame/Reshape_2"
  input: "stft/frame/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/GatherV2"
  op: "GatherV2"
  input: "stft/frame/Reshape_1"
  input: "stft/frame/add_3"
  input: "stft/frame/strided_slice"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/concat_3/values_1"
  op: "Pack"
  input: "stft/frame/Neg_1"
  input: "stft/frame_length"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/frame/concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/frame/concat_3"
  op: "ConcatV2"
  input: "stft/frame/split"
  input: "stft/frame/concat_3/values_1"
  input: "stft/frame/split:2"
  input: "stft/frame/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/frame/Reshape_4"
  op: "Reshape"
  input: "stft/frame/GatherV2"
  input: "stft/frame/concat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/hann_window/periodic"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "stft/hann_window/Cast"
  op: "Cast"
  input: "stft/hann_window/periodic"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "stft/hann_window/FloorMod/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "stft/hann_window/FloorMod"
  op: "FloorMod"
  input: "stft/frame_length"
  input: "stft/hann_window/FloorMod/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/hann_window/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/hann_window/sub"
  op: "Sub"
  input: "stft/hann_window/sub/x"
  input: "stft/hann_window/FloorMod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/hann_window/mul"
  op: "Mul"
  input: "stft/hann_window/Cast"
  input: "stft/hann_window/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/hann_window/add"
  op: "Add"
  input: "stft/frame_length"
  input: "stft/hann_window/mul"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/hann_window/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/hann_window/sub_1"
  op: "Sub"
  input: "stft/hann_window/add"
  input: "stft/hann_window/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/hann_window/Cast_1"
  op: "Cast"
  input: "stft/hann_window/sub_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "stft/hann_window/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "stft/hann_window/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "stft/hann_window/range"
  op: "Range"
  input: "stft/hann_window/range/start"
  input: "stft/frame_length"
  input: "stft/hann_window/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stft/hann_window/Cast_2"
  op: "Cast"
  input: "stft/hann_window/range"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "stft/hann_window/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.2831854820251465
      }
    }
  }
}
node {
  name: "stft/hann_window/mul_1"
  op: "Mul"
  input: "stft/hann_window/Const"
  input: "stft/hann_window/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stft/hann_window/truediv"
  op: "RealDiv"
  input: "stft/hann_window/mul_1"
  input: "stft/hann_window/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stft/hann_window/Cos"
  op: "Cos"
  input: "stft/hann_window/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stft/hann_window/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "stft/hann_window/mul_2"
  op: "Mul"
  input: "stft/hann_window/mul_2/x"
  input: "stft/hann_window/Cos"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stft/hann_window/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "stft/hann_window/sub_2"
  op: "Sub"
  input: "stft/hann_window/sub_2/x"
  input: "stft/hann_window/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stft/mul"
  op: "Mul"
  input: "stft/frame/Reshape_4"
  input: "stft/hann_window/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stft/rfft/packed"
  op: "Pack"
  input: "stft/Const"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "stft/rfft"
  op: "RFFT"
  input: "stft/mul"
  input: "stft/rfft/packed"
  attr {
    key: "Tcomplex"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Treal"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_1"
  op: "Transpose"
  input: "stft/rfft"
  input: "transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "FloorMod/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "FloorMod"
  op: "FloorMod"
  input: "strided_slice"
  input: "FloorMod/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "sub/x"
  input: "FloorMod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FloorMod_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "FloorMod_1"
  op: "FloorMod"
  input: "sub"
  input: "FloorMod_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Pad/paddings/0/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Pad/paddings/0"
  op: "Pack"
  input: "Pad/paddings/0/0"
  input: "FloorMod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Pad/paddings/1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Pad/paddings/2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Pad/paddings"
  op: "Pack"
  input: "Pad/paddings/0"
  input: "Pad/paddings/1_1"
  input: "Pad/paddings/2_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Pad"
  op: "Pad"
  input: "transpose_1"
  input: "Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_1"
  op: "Shape"
  input: "Pad"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "Shape_1"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "strided_slice_1"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sub_1"
  op: "Sub"
  input: "add"
  input: "sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "floordiv"
  op: "FloorDiv"
  input: "sub_1"
  input: "floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_2"
  op: "Shape"
  input: "Pad"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "Shape_2"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "concat/values_0/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "concat/values_0"
  op: "Pack"
  input: "floordiv"
  input: "concat/values_0/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "concat/values_0"
  input: "strided_slice_2"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "Pad"
  input: "concat"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Abs"
  op: "ComplexAbs"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_3"
  op: "StridedSlice"
  input: "Abs"
  input: "strided_slice_3/stack"
  input: "strided_slice_3/stack_1"
  input: "strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 15
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 11
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\002\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3464101552963257
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3464101552963257
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d/kernel/Initializer/random_uniform/max"
  input: "conv2d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d/kernel/Initializer/random_uniform/mul"
  input: "conv2d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 2
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d/kernel"
    }
  }
}
node {
  name: "conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d/kernel"
}
node {
  name: "conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d/kernel"
  input: "conv2d/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d/bias"
    }
  }
}
node {
  name: "conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d/bias"
}
node {
  name: "conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d/bias"
  input: "conv2d/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/Conv2D"
  op: "Conv2D"
  input: "strided_slice_3"
  input: "conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/BiasAdd"
  op: "BiasAdd"
  input: "conv2d/Conv2D"
  input: "conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization/gamma"
    }
  }
}
node {
  name: "batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization/gamma"
}
node {
  name: "batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization/gamma"
  input: "batch_normalization/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization/beta"
    }
  }
}
node {
  name: "batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization/beta"
}
node {
  name: "batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization/moving_mean"
    }
  }
}
node {
  name: "batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization/moving_mean"
}
node {
  name: "batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization/moving_variance"
    }
  }
}
node {
  name: "batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization/moving_variance"
}
node {
  name: "batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "keras_learning_phase/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "keras_learning_phase"
  op: "PlaceholderWithDefault"
  input: "keras_learning_phase/input"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "batch_normalization/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization/cond/switch_t"
  op: "Identity"
  input: "batch_normalization/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization/cond/switch_f"
  op: "Identity"
  input: "batch_normalization/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization/gamma"
  input: "batch_normalization/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization/beta"
  input: "batch_normalization/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
}
node {
  name: "batch_normalization/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/Const"
  op: "Const"
  input: "^batch_normalization/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/cond/Const_1"
  op: "Const"
  input: "^batch_normalization/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "conv2d/BiasAdd"
  input: "batch_normalization/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization/cond/ReadVariableOp"
  input: "batch_normalization/cond/ReadVariableOp_1"
  input: "batch_normalization/cond/Const"
  input: "batch_normalization/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization/gamma"
  input: "batch_normalization/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization/beta"
  input: "batch_normalization/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
}
node {
  name: "batch_normalization/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "conv2d/BiasAdd"
  input: "batch_normalization/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization/cond/ReadVariableOp_2"
  input: "batch_normalization/cond/ReadVariableOp_3"
  input: "batch_normalization/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization/cond/Merge"
  op: "Merge"
  input: "batch_normalization/cond/FusedBatchNorm_1"
  input: "batch_normalization/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization/cond/FusedBatchNorm_1:1"
  input: "batch_normalization/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization/cond/FusedBatchNorm_1:2"
  input: "batch_normalization/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization/cond_1/Const"
  op: "Const"
  input: "^batch_normalization/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization/cond_1/Const_1"
  input: "batch_normalization/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg/sub/x"
  input: "batch_normalization/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization/AssignMovingAvg/sub_1"
  input: "batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_mean"
  input: "^batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg_1/sub/x"
  input: "batch_normalization/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization/AssignMovingAvg_1/sub_1"
  input: "batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_variance"
  input: "^batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "leaky_re_lu/LeakyRelu"
  op: "LeakyRelu"
  input: "batch_normalization/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.12247448414564133
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.12247448414564133
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_1/kernel/Initializer/random_uniform/max"
  input: "conv2d_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_1/kernel/Initializer/random_uniform/mul"
  input: "conv2d_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_1/kernel"
    }
  }
}
node {
  name: "conv2d_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_1/kernel"
}
node {
  name: "conv2d_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_1/kernel"
  input: "conv2d_1/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_1/bias"
    }
  }
}
node {
  name: "conv2d_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_1/bias"
}
node {
  name: "conv2d_1/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_1/bias"
  input: "conv2d_1/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/Conv2D"
  op: "Conv2D"
  input: "leaky_re_lu/LeakyRelu"
  input: "conv2d_1/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_1/Conv2D"
  input: "conv2d_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/gamma"
    }
  }
}
node {
  name: "batch_normalization_1/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/gamma"
}
node {
  name: "batch_normalization_1/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/beta"
    }
  }
}
node {
  name: "batch_normalization_1/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/beta"
}
node {
  name: "batch_normalization_1/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/moving_mean"
}
node {
  name: "batch_normalization_1/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/moving_variance"
}
node {
  name: "batch_normalization_1/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_1/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_1/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_1/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_1/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_1/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Const"
  op: "Const"
  input: "^batch_normalization_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "conv2d_1/BiasAdd"
  input: "batch_normalization_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_1/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_1/cond/ReadVariableOp"
  input: "batch_normalization_1/cond/ReadVariableOp_1"
  input: "batch_normalization_1/cond/Const"
  input: "batch_normalization_1/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_1/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_1/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_1/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "conv2d_1/BiasAdd"
  input: "batch_normalization_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_1/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_1/cond/ReadVariableOp_2"
  input: "batch_normalization_1/cond/ReadVariableOp_3"
  input: "batch_normalization_1/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_1/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/cond/Merge"
  op: "Merge"
  input: "batch_normalization_1/cond/FusedBatchNorm_1"
  input: "batch_normalization_1/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_1/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_1/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_1/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_1/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_1/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_1/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_1/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_1/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_1/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_1/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_1/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_1/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_1/cond_1/Const_1"
  input: "batch_normalization_1/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg/sub/x"
  input: "batch_normalization_1/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_1/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_1/AssignMovingAvg/sub_1"
  input: "batch_normalization_1/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "^batch_normalization_1/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_1/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_1/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_1/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_1/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "^batch_normalization_1/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "leaky_re_lu_1/LeakyRelu"
  op: "LeakyRelu"
  input: "batch_normalization_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_2/kernel/Initializer/random_uniform/max"
  input: "conv2d_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_2/kernel/Initializer/random_uniform/mul"
  input: "conv2d_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_2/kernel"
    }
  }
}
node {
  name: "conv2d_2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_2/kernel"
}
node {
  name: "conv2d_2/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_2/kernel"
  input: "conv2d_2/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_2/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_2/bias"
    }
  }
}
node {
  name: "conv2d_2/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_2/bias"
}
node {
  name: "conv2d_2/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_2/bias"
  input: "conv2d_2/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_2/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/Conv2D"
  op: "Conv2D"
  input: "leaky_re_lu_1/LeakyRelu"
  input: "conv2d_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_2/Conv2D"
  input: "conv2d_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/gamma"
    }
  }
}
node {
  name: "batch_normalization_2/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/gamma"
}
node {
  name: "batch_normalization_2/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/gamma"
  input: "batch_normalization_2/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/beta"
    }
  }
}
node {
  name: "batch_normalization_2/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/beta"
}
node {
  name: "batch_normalization_2/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/moving_mean"
}
node {
  name: "batch_normalization_2/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/moving_variance"
}
node {
  name: "batch_normalization_2/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_2/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_2/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_2/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_2/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_2/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_2/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_2/gamma"
  input: "batch_normalization_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_2/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Const"
  op: "Const"
  input: "^batch_normalization_2/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_2/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "conv2d_2/BiasAdd"
  input: "batch_normalization_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_2/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_2/cond/ReadVariableOp"
  input: "batch_normalization_2/cond/ReadVariableOp_1"
  input: "batch_normalization_2/cond/Const"
  input: "batch_normalization_2/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_2/gamma"
  input: "batch_normalization_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_2/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_2/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_2/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "conv2d_2/BiasAdd"
  input: "batch_normalization_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_2/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_2/cond/ReadVariableOp_2"
  input: "batch_normalization_2/cond/ReadVariableOp_3"
  input: "batch_normalization_2/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_2/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/cond/Merge"
  op: "Merge"
  input: "batch_normalization_2/cond/FusedBatchNorm_1"
  input: "batch_normalization_2/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_2/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_2/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_2/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_2/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_2/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_2/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_2/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_2/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_2/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_2/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_2/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_2/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_2/cond_1/Const_1"
  input: "batch_normalization_2/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg/sub/x"
  input: "batch_normalization_2/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_2/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_2/AssignMovingAvg/sub_1"
  input: "batch_normalization_2/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "^batch_normalization_2/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_2/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_2/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_2/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_2/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "^batch_normalization_2/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "leaky_re_lu_2/LeakyRelu"
  op: "LeakyRelu"
  input: "batch_normalization_2/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06123724207282066
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06123724207282066
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_3/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_3/kernel/Initializer/random_uniform/max"
  input: "conv2d_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_3/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_3/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_3/kernel/Initializer/random_uniform/mul"
  input: "conv2d_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_3/kernel"
    }
  }
}
node {
  name: "conv2d_3/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_3/kernel"
}
node {
  name: "conv2d_3/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_3/kernel"
  input: "conv2d_3/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_3/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_3/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_3/bias"
    }
  }
}
node {
  name: "conv2d_3/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_3/bias"
}
node {
  name: "conv2d_3/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_3/bias"
  input: "conv2d_3/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_3/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/Conv2D"
  op: "Conv2D"
  input: "leaky_re_lu_2/LeakyRelu"
  input: "conv2d_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_3/Conv2D"
  input: "conv2d_3/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/gamma"
    }
  }
}
node {
  name: "batch_normalization_3/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/gamma"
}
node {
  name: "batch_normalization_3/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/gamma"
  input: "batch_normalization_3/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/beta"
    }
  }
}
node {
  name: "batch_normalization_3/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/beta"
}
node {
  name: "batch_normalization_3/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/moving_mean"
}
node {
  name: "batch_normalization_3/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/moving_variance"
}
node {
  name: "batch_normalization_3/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_3/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_3/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_3/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_3/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_3/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_3/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_3/gamma"
  input: "batch_normalization_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_3/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Const"
  op: "Const"
  input: "^batch_normalization_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "conv2d_3/BiasAdd"
  input: "batch_normalization_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_3/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_3/cond/ReadVariableOp"
  input: "batch_normalization_3/cond/ReadVariableOp_1"
  input: "batch_normalization_3/cond/Const"
  input: "batch_normalization_3/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_3/gamma"
  input: "batch_normalization_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_3/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_3/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_3/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "conv2d_3/BiasAdd"
  input: "batch_normalization_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_3/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_3/cond/ReadVariableOp_2"
  input: "batch_normalization_3/cond/ReadVariableOp_3"
  input: "batch_normalization_3/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_3/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/cond/Merge"
  op: "Merge"
  input: "batch_normalization_3/cond/FusedBatchNorm_1"
  input: "batch_normalization_3/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_3/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_3/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_3/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_3/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_3/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_3/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_3/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_3/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_3/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_3/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_3/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_3/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_3/cond_1/Const_1"
  input: "batch_normalization_3/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg/sub/x"
  input: "batch_normalization_3/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_3/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_3/AssignMovingAvg/sub_1"
  input: "batch_normalization_3/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "^batch_normalization_3/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_3/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_3/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_3/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_3/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "^batch_normalization_3/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "leaky_re_lu_3/LeakyRelu"
  op: "LeakyRelu"
  input: "batch_normalization_3/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04330126941204071
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04330126941204071
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_4/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_4/kernel/Initializer/random_uniform/max"
  input: "conv2d_4/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_4/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_4/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_4/kernel/Initializer/random_uniform/mul"
  input: "conv2d_4/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_4/kernel"
    }
  }
}
node {
  name: "conv2d_4/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_4/kernel"
}
node {
  name: "conv2d_4/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_4/kernel"
  input: "conv2d_4/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_4/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_4/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_4/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_4/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_4/bias"
    }
  }
}
node {
  name: "conv2d_4/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_4/bias"
}
node {
  name: "conv2d_4/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_4/bias"
  input: "conv2d_4/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_4/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_4/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_4/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_4/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_4/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_4/Conv2D"
  op: "Conv2D"
  input: "leaky_re_lu_3/LeakyRelu"
  input: "conv2d_4/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_4/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_4/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_4/Conv2D"
  input: "conv2d_4/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_4/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_4/gamma"
    }
  }
}
node {
  name: "batch_normalization_4/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_4/gamma"
}
node {
  name: "batch_normalization_4/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_4/gamma"
  input: "batch_normalization_4/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_4/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_4/beta"
    }
  }
}
node {
  name: "batch_normalization_4/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_4/beta"
}
node {
  name: "batch_normalization_4/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_4/beta"
  input: "batch_normalization_4/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_4/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_4/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_4/moving_mean"
}
node {
  name: "batch_normalization_4/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_4/moving_mean"
  input: "batch_normalization_4/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_4/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_4/moving_variance"
}
node {
  name: "batch_normalization_4/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_4/moving_variance"
  input: "batch_normalization_4/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_4/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_4/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_4/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_4/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_4/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_4/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_4/gamma"
  input: "batch_normalization_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_4/beta"
  input: "batch_normalization_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_4/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Const"
  op: "Const"
  input: "^batch_normalization_4/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_4/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "conv2d_4/BiasAdd"
  input: "batch_normalization_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_4/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_4/cond/ReadVariableOp"
  input: "batch_normalization_4/cond/ReadVariableOp_1"
  input: "batch_normalization_4/cond/Const"
  input: "batch_normalization_4/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_4/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_4/gamma"
  input: "batch_normalization_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_4/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_4/beta"
  input: "batch_normalization_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_4/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_4/moving_mean"
  input: "batch_normalization_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_4/moving_variance"
  input: "batch_normalization_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_4/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "conv2d_4/BiasAdd"
  input: "batch_normalization_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_4/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_4/cond/ReadVariableOp_2"
  input: "batch_normalization_4/cond/ReadVariableOp_3"
  input: "batch_normalization_4/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_4/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_4/cond/Merge"
  op: "Merge"
  input: "batch_normalization_4/cond/FusedBatchNorm_1"
  input: "batch_normalization_4/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_4/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_4/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_4/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_4/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_4/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_4/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_4/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_4/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_4/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_4/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_4/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_4/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_4/cond_1/Const_1"
  input: "batch_normalization_4/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg/sub/x"
  input: "batch_normalization_4/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_4/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_4/AssignMovingAvg/sub_1"
  input: "batch_normalization_4/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_4/moving_mean"
  input: "batch_normalization_4/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_mean"
  input: "^batch_normalization_4/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_4/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_4/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_4/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_4/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_4/moving_variance"
  input: "batch_normalization_4/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_variance"
  input: "^batch_normalization_4/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "leaky_re_lu_4/LeakyRelu"
  op: "LeakyRelu"
  input: "batch_normalization_4/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03061862103641033
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03061862103641033
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_5/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_5/kernel/Initializer/random_uniform/max"
  input: "conv2d_5/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_5/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_5/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_5/kernel/Initializer/random_uniform/mul"
  input: "conv2d_5/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_5/kernel"
    }
  }
}
node {
  name: "conv2d_5/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_5/kernel"
}
node {
  name: "conv2d_5/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_5/kernel"
  input: "conv2d_5/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_5/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_5/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_5/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_5/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_5/bias"
    }
  }
}
node {
  name: "conv2d_5/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_5/bias"
}
node {
  name: "conv2d_5/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_5/bias"
  input: "conv2d_5/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_5/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_5/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_5/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_5/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_5/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_5/Conv2D"
  op: "Conv2D"
  input: "leaky_re_lu_4/LeakyRelu"
  input: "conv2d_5/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_5/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_5/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_5/Conv2D"
  input: "conv2d_5/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_5/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_5/gamma"
    }
  }
}
node {
  name: "batch_normalization_5/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_5/gamma"
}
node {
  name: "batch_normalization_5/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_5/gamma"
  input: "batch_normalization_5/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_5/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_5/beta"
    }
  }
}
node {
  name: "batch_normalization_5/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_5/beta"
}
node {
  name: "batch_normalization_5/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_5/beta"
  input: "batch_normalization_5/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_5/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_5/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_5/moving_mean"
}
node {
  name: "batch_normalization_5/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_5/moving_mean"
  input: "batch_normalization_5/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_5/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_5/moving_variance"
}
node {
  name: "batch_normalization_5/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_5/moving_variance"
  input: "batch_normalization_5/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_5/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_5/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_5/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_5/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_5/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_5/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_5/gamma"
  input: "batch_normalization_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_5/beta"
  input: "batch_normalization_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_5/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Const"
  op: "Const"
  input: "^batch_normalization_5/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_5/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "conv2d_5/BiasAdd"
  input: "batch_normalization_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_5/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_5/cond/ReadVariableOp"
  input: "batch_normalization_5/cond/ReadVariableOp_1"
  input: "batch_normalization_5/cond/Const"
  input: "batch_normalization_5/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_5/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_5/gamma"
  input: "batch_normalization_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_5/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_5/beta"
  input: "batch_normalization_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_5/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_5/moving_mean"
  input: "batch_normalization_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_5/moving_variance"
  input: "batch_normalization_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_5/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "conv2d_5/BiasAdd"
  input: "batch_normalization_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_5/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_5/cond/ReadVariableOp_2"
  input: "batch_normalization_5/cond/ReadVariableOp_3"
  input: "batch_normalization_5/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_5/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_5/cond/Merge"
  op: "Merge"
  input: "batch_normalization_5/cond/FusedBatchNorm_1"
  input: "batch_normalization_5/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_5/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_5/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_5/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_5/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_5/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_5/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_5/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_5/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_5/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_5/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_5/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_5/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_5/cond_1/Const_1"
  input: "batch_normalization_5/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg/sub/x"
  input: "batch_normalization_5/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_5/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_5/AssignMovingAvg/sub_1"
  input: "batch_normalization_5/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_5/moving_mean"
  input: "batch_normalization_5/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_mean"
  input: "^batch_normalization_5/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_5/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_5/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_5/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_5/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_5/moving_variance"
  input: "batch_normalization_5/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_variance"
  input: "^batch_normalization_5/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "leaky_re_lu_5/LeakyRelu"
  op: "LeakyRelu"
  input: "batch_normalization_5/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03061862103641033
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03061862103641033
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose/kernel"
    }
  }
}
node {
  name: "conv2d_transpose/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose/kernel"
}
node {
  name: "conv2d_transpose/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose/kernel"
  input: "conv2d_transpose/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose/bias"
    }
  }
}
node {
  name: "conv2d_transpose/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose/bias"
}
node {
  name: "conv2d_transpose/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose/bias"
  input: "conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose/Shape"
  op: "Shape"
  input: "conv2d_5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose/Shape"
  input: "conv2d_transpose/strided_slice/stack"
  input: "conv2d_transpose/strided_slice/stack_1"
  input: "conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose/Shape"
  input: "conv2d_transpose/strided_slice_1/stack"
  input: "conv2d_transpose/strided_slice_1/stack_1"
  input: "conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose/Shape"
  input: "conv2d_transpose/strided_slice_2/stack"
  input: "conv2d_transpose/strided_slice_2/stack_1"
  input: "conv2d_transpose/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose/mul"
  op: "Mul"
  input: "conv2d_transpose/strided_slice_1"
  input: "conv2d_transpose/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose/mul_1"
  op: "Mul"
  input: "conv2d_transpose/strided_slice_2"
  input: "conv2d_transpose/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "conv2d_transpose/stack"
  op: "Pack"
  input: "conv2d_transpose/strided_slice"
  input: "conv2d_transpose/mul"
  input: "conv2d_transpose/mul_1"
  input: "conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_3"
  op: "StridedSlice"
  input: "conv2d_transpose/stack"
  input: "conv2d_transpose/strided_slice_3/stack"
  input: "conv2d_transpose/strided_slice_3/stack_1"
  input: "conv2d_transpose/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose/stack"
  input: "conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "conv2d_5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose/conv2d_transpose"
  input: "conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu/Relu"
  op: "Relu"
  input: "conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_6/gamma"
    }
  }
}
node {
  name: "batch_normalization_6/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_6/gamma"
}
node {
  name: "batch_normalization_6/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_6/gamma"
  input: "batch_normalization_6/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_6/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_6/beta"
    }
  }
}
node {
  name: "batch_normalization_6/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_6/beta"
}
node {
  name: "batch_normalization_6/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_6/beta"
  input: "batch_normalization_6/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_6/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_6/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_6/moving_mean"
}
node {
  name: "batch_normalization_6/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_6/moving_mean"
  input: "batch_normalization_6/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_6/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_6/moving_variance"
}
node {
  name: "batch_normalization_6/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_6/moving_variance"
  input: "batch_normalization_6/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_6/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_6/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_6/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_6/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_6/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_6/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_6/gamma"
  input: "batch_normalization_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_6/beta"
  input: "batch_normalization_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_6/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Const"
  op: "Const"
  input: "^batch_normalization_6/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_6/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "re_lu/Relu"
  input: "batch_normalization_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_6/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_6/cond/ReadVariableOp"
  input: "batch_normalization_6/cond/ReadVariableOp_1"
  input: "batch_normalization_6/cond/Const"
  input: "batch_normalization_6/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_6/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_6/gamma"
  input: "batch_normalization_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_6/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_6/beta"
  input: "batch_normalization_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_6/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_6/moving_mean"
  input: "batch_normalization_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_6/moving_variance"
  input: "batch_normalization_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_6/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "re_lu/Relu"
  input: "batch_normalization_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_6/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_6/cond/ReadVariableOp_2"
  input: "batch_normalization_6/cond/ReadVariableOp_3"
  input: "batch_normalization_6/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_6/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_6/cond/Merge"
  op: "Merge"
  input: "batch_normalization_6/cond/FusedBatchNorm_1"
  input: "batch_normalization_6/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_6/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_6/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_6/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_6/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_6/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_6/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_6/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_6/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_6/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_6/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_6/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_6/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_6/cond_1/Const_1"
  input: "batch_normalization_6/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg/sub/x"
  input: "batch_normalization_6/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_6/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_6/AssignMovingAvg/sub_1"
  input: "batch_normalization_6/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_6/moving_mean"
  input: "batch_normalization_6/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_mean"
  input: "^batch_normalization_6/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_6/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_6/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_6/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_6/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_6/moving_variance"
  input: "batch_normalization_6/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_variance"
  input: "^batch_normalization_6/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout/cond/switch_t"
  op: "Identity"
  input: "dropout/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout/cond/switch_f"
  op: "Identity"
  input: "dropout/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout/cond/dropout/rate"
  op: "Const"
  input: "^dropout/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout/cond/dropout/Shape/Switch"
  op: "Switch"
  input: "batch_normalization_6/cond/Merge"
  input: "dropout/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/cond/Merge"
      }
    }
  }
}
node {
  name: "dropout/cond/dropout/Shape"
  op: "Shape"
  input: "dropout/cond/dropout/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "dropout/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^dropout/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^dropout/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout/cond/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout/cond/dropout/random_uniform/max"
  input: "dropout/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout/cond/dropout/random_uniform/RandomUniform"
  input: "dropout/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond/dropout/random_uniform"
  op: "Add"
  input: "dropout/cond/dropout/random_uniform/mul"
  input: "dropout/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond/dropout/sub/x"
  op: "Const"
  input: "^dropout/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout/cond/dropout/sub"
  op: "Sub"
  input: "dropout/cond/dropout/sub/x"
  input: "dropout/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond/dropout/truediv/x"
  op: "Const"
  input: "^dropout/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout/cond/dropout/truediv"
  op: "RealDiv"
  input: "dropout/cond/dropout/truediv/x"
  input: "dropout/cond/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout/cond/dropout/random_uniform"
  input: "dropout/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond/dropout/mul"
  op: "Mul"
  input: "dropout/cond/dropout/Shape/Switch:1"
  input: "dropout/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond/dropout/Cast"
  op: "Cast"
  input: "dropout/cond/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "dropout/cond/dropout/mul_1"
  op: "Mul"
  input: "dropout/cond/dropout/mul"
  input: "dropout/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond/Identity/Switch"
  op: "Switch"
  input: "batch_normalization_6/cond/Merge"
  input: "dropout/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/cond/Merge"
      }
    }
  }
}
node {
  name: "dropout/cond/Identity"
  op: "Identity"
  input: "dropout/cond/Identity/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond/Merge"
  op: "Merge"
  input: "dropout/cond/Identity"
  input: "dropout/cond/dropout/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concatenate/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concatenate/concat"
  op: "ConcatV2"
  input: "conv2d_4/BiasAdd"
  input: "dropout/cond/Merge"
  input: "concatenate/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04330126941204071
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04330126941204071
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_1/kernel"
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_1/kernel"
}
node {
  name: "conv2d_transpose_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_1/kernel"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_1/bias"
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_1/bias"
}
node {
  name: "conv2d_transpose_1/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_1/bias"
  input: "conv2d_transpose_1/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_1/Shape"
  op: "Shape"
  input: "concatenate/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_1/Shape"
  input: "conv2d_transpose_1/strided_slice/stack"
  input: "conv2d_transpose_1/strided_slice/stack_1"
  input: "conv2d_transpose_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_1/Shape"
  input: "conv2d_transpose_1/strided_slice_1/stack"
  input: "conv2d_transpose_1/strided_slice_1/stack_1"
  input: "conv2d_transpose_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_1/Shape"
  input: "conv2d_transpose_1/strided_slice_2/stack"
  input: "conv2d_transpose_1/strided_slice_2/stack_1"
  input: "conv2d_transpose_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/mul"
  op: "Mul"
  input: "conv2d_transpose_1/strided_slice_1"
  input: "conv2d_transpose_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/mul_1"
  op: "Mul"
  input: "conv2d_transpose_1/strided_slice_2"
  input: "conv2d_transpose_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/stack"
  op: "Pack"
  input: "conv2d_transpose_1/strided_slice"
  input: "conv2d_transpose_1/mul"
  input: "conv2d_transpose_1/mul_1"
  input: "conv2d_transpose_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/strided_slice_3"
  op: "StridedSlice"
  input: "conv2d_transpose_1/stack"
  input: "conv2d_transpose_1/strided_slice_3/stack"
  input: "conv2d_transpose_1/strided_slice_3/stack_1"
  input: "conv2d_transpose_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_1/stack"
  input: "conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "concatenate/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_1/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_1/conv2d_transpose"
  input: "conv2d_transpose_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_1/Relu"
  op: "Relu"
  input: "conv2d_transpose_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_7/gamma"
    }
  }
}
node {
  name: "batch_normalization_7/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_7/gamma"
}
node {
  name: "batch_normalization_7/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_7/gamma"
  input: "batch_normalization_7/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_7/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_7/beta"
    }
  }
}
node {
  name: "batch_normalization_7/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_7/beta"
}
node {
  name: "batch_normalization_7/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_7/beta"
  input: "batch_normalization_7/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_7/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_7/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_7/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_7/moving_mean"
}
node {
  name: "batch_normalization_7/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_7/moving_mean"
  input: "batch_normalization_7/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_7/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_7/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_7/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_7/moving_variance"
}
node {
  name: "batch_normalization_7/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_7/moving_variance"
  input: "batch_normalization_7/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_7/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_7/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_7/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_7/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_7/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_7/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_7/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_7/gamma"
  input: "batch_normalization_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_7/beta"
  input: "batch_normalization_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_7/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Const"
  op: "Const"
  input: "^batch_normalization_7/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_7/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "re_lu_1/Relu"
  input: "batch_normalization_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_7/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_7/cond/ReadVariableOp"
  input: "batch_normalization_7/cond/ReadVariableOp_1"
  input: "batch_normalization_7/cond/Const"
  input: "batch_normalization_7/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_7/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_7/gamma"
  input: "batch_normalization_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_7/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_7/beta"
  input: "batch_normalization_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_7/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_7/moving_mean"
  input: "batch_normalization_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_7/moving_variance"
  input: "batch_normalization_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_7/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "re_lu_1/Relu"
  input: "batch_normalization_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_7/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_7/cond/ReadVariableOp_2"
  input: "batch_normalization_7/cond/ReadVariableOp_3"
  input: "batch_normalization_7/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_7/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_7/cond/Merge"
  op: "Merge"
  input: "batch_normalization_7/cond/FusedBatchNorm_1"
  input: "batch_normalization_7/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_7/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_7/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_7/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_7/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_7/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_7/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_7/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_7/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_7/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_7/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_7/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_7/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_7/cond_1/Const_1"
  input: "batch_normalization_7/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_7/AssignMovingAvg/sub/x"
  input: "batch_normalization_7/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_7/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_7/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_7/AssignMovingAvg/sub_1"
  input: "batch_normalization_7/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_7/moving_mean"
  input: "batch_normalization_7/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_7/moving_mean"
  input: "^batch_normalization_7/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_7/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_7/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_7/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_7/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_7/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_7/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_7/moving_variance"
  input: "batch_normalization_7/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_7/moving_variance"
  input: "^batch_normalization_7/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/switch_t"
  op: "Identity"
  input: "dropout_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/switch_f"
  op: "Identity"
  input: "dropout_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/dropout/rate"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/Shape/Switch"
  op: "Switch"
  input: "batch_normalization_7/cond/Merge"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/cond/Merge"
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/Shape"
  op: "Shape"
  input: "dropout_1/cond/dropout/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_1/cond/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_1/cond/dropout/random_uniform/max"
  input: "dropout_1/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_1/cond/dropout/random_uniform/RandomUniform"
  input: "dropout_1/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform"
  op: "Add"
  input: "dropout_1/cond/dropout/random_uniform/mul"
  input: "dropout_1/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/sub/x"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/sub"
  op: "Sub"
  input: "dropout_1/cond/dropout/sub/x"
  input: "dropout_1/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/truediv/x"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/truediv"
  op: "RealDiv"
  input: "dropout_1/cond/dropout/truediv/x"
  input: "dropout_1/cond/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout_1/cond/dropout/random_uniform"
  input: "dropout_1/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/mul"
  op: "Mul"
  input: "dropout_1/cond/dropout/Shape/Switch:1"
  input: "dropout_1/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/Cast"
  op: "Cast"
  input: "dropout_1/cond/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "dropout_1/cond/dropout/mul_1"
  op: "Mul"
  input: "dropout_1/cond/dropout/mul"
  input: "dropout_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/Identity/Switch"
  op: "Switch"
  input: "batch_normalization_7/cond/Merge"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/cond/Merge"
      }
    }
  }
}
node {
  name: "dropout_1/cond/Identity"
  op: "Identity"
  input: "dropout_1/cond/Identity/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/Merge"
  op: "Merge"
  input: "dropout_1/cond/Identity"
  input: "dropout_1/cond/dropout/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concatenate_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concatenate_1/concat"
  op: "ConcatV2"
  input: "conv2d_3/BiasAdd"
  input: "dropout_1/cond/Merge"
  input: "concatenate_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06123724207282066
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06123724207282066
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_2/kernel"
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_2/kernel"
}
node {
  name: "conv2d_transpose_2/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_2/kernel"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_2/bias"
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_2/bias"
}
node {
  name: "conv2d_transpose_2/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_2/bias"
  input: "conv2d_transpose_2/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_2/Shape"
  op: "Shape"
  input: "concatenate_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_2/Shape"
  input: "conv2d_transpose_2/strided_slice/stack"
  input: "conv2d_transpose_2/strided_slice/stack_1"
  input: "conv2d_transpose_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_2/Shape"
  input: "conv2d_transpose_2/strided_slice_1/stack"
  input: "conv2d_transpose_2/strided_slice_1/stack_1"
  input: "conv2d_transpose_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_2/Shape"
  input: "conv2d_transpose_2/strided_slice_2/stack"
  input: "conv2d_transpose_2/strided_slice_2/stack_1"
  input: "conv2d_transpose_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_2/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/mul"
  op: "Mul"
  input: "conv2d_transpose_2/strided_slice_1"
  input: "conv2d_transpose_2/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_2/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/mul_1"
  op: "Mul"
  input: "conv2d_transpose_2/strided_slice_2"
  input: "conv2d_transpose_2/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_2/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/stack"
  op: "Pack"
  input: "conv2d_transpose_2/strided_slice"
  input: "conv2d_transpose_2/mul"
  input: "conv2d_transpose_2/mul_1"
  input: "conv2d_transpose_2/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_3"
  op: "StridedSlice"
  input: "conv2d_transpose_2/stack"
  input: "conv2d_transpose_2/strided_slice_3/stack"
  input: "conv2d_transpose_2/strided_slice_3/stack_1"
  input: "conv2d_transpose_2/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_2/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_2/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_2/stack"
  input: "conv2d_transpose_2/conv2d_transpose/ReadVariableOp"
  input: "concatenate_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_2/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_2/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_2/conv2d_transpose"
  input: "conv2d_transpose_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_2/Relu"
  op: "Relu"
  input: "conv2d_transpose_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_8/gamma"
    }
  }
}
node {
  name: "batch_normalization_8/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_8/gamma"
}
node {
  name: "batch_normalization_8/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_8/gamma"
  input: "batch_normalization_8/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_8/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_8/beta"
    }
  }
}
node {
  name: "batch_normalization_8/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_8/beta"
}
node {
  name: "batch_normalization_8/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_8/beta"
  input: "batch_normalization_8/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_8/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_8/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_8/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_8/moving_mean"
}
node {
  name: "batch_normalization_8/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_8/moving_mean"
  input: "batch_normalization_8/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_8/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_8/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_8/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_8/moving_variance"
}
node {
  name: "batch_normalization_8/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_8/moving_variance"
  input: "batch_normalization_8/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_8/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_8/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_8/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_8/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_8/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_8/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_8/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_8/gamma"
  input: "batch_normalization_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_8/beta"
  input: "batch_normalization_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_8/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Const"
  op: "Const"
  input: "^batch_normalization_8/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_8/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "re_lu_2/Relu"
  input: "batch_normalization_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_2/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_8/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_8/cond/ReadVariableOp"
  input: "batch_normalization_8/cond/ReadVariableOp_1"
  input: "batch_normalization_8/cond/Const"
  input: "batch_normalization_8/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_8/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_8/gamma"
  input: "batch_normalization_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_8/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_8/beta"
  input: "batch_normalization_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_8/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_8/moving_mean"
  input: "batch_normalization_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_8/moving_variance"
  input: "batch_normalization_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_8/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "re_lu_2/Relu"
  input: "batch_normalization_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_2/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_8/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_8/cond/ReadVariableOp_2"
  input: "batch_normalization_8/cond/ReadVariableOp_3"
  input: "batch_normalization_8/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_8/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_8/cond/Merge"
  op: "Merge"
  input: "batch_normalization_8/cond/FusedBatchNorm_1"
  input: "batch_normalization_8/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_8/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_8/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_8/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_8/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_8/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_8/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_8/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_8/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_8/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_8/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_8/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_8/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_8/cond_1/Const_1"
  input: "batch_normalization_8/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_8/AssignMovingAvg/sub/x"
  input: "batch_normalization_8/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_8/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_8/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_8/AssignMovingAvg/sub_1"
  input: "batch_normalization_8/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_8/moving_mean"
  input: "batch_normalization_8/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_8/moving_mean"
  input: "^batch_normalization_8/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_8/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_8/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_8/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_8/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_8/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_8/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_8/moving_variance"
  input: "batch_normalization_8/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_8/moving_variance"
  input: "^batch_normalization_8/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_2/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_2/cond/switch_t"
  op: "Identity"
  input: "dropout_2/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_2/cond/switch_f"
  op: "Identity"
  input: "dropout_2/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_2/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_2/cond/dropout/rate"
  op: "Const"
  input: "^dropout_2/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout_2/cond/dropout/Shape/Switch"
  op: "Switch"
  input: "batch_normalization_8/cond/Merge"
  input: "dropout_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/cond/Merge"
      }
    }
  }
}
node {
  name: "dropout_2/cond/dropout/Shape"
  op: "Shape"
  input: "dropout_2/cond/dropout/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "dropout_2/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^dropout_2/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_2/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^dropout_2/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_2/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_2/cond/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout_2/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_2/cond/dropout/random_uniform/max"
  input: "dropout_2/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_2/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_2/cond/dropout/random_uniform/RandomUniform"
  input: "dropout_2/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_2/cond/dropout/random_uniform"
  op: "Add"
  input: "dropout_2/cond/dropout/random_uniform/mul"
  input: "dropout_2/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_2/cond/dropout/sub/x"
  op: "Const"
  input: "^dropout_2/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_2/cond/dropout/sub"
  op: "Sub"
  input: "dropout_2/cond/dropout/sub/x"
  input: "dropout_2/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_2/cond/dropout/truediv/x"
  op: "Const"
  input: "^dropout_2/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_2/cond/dropout/truediv"
  op: "RealDiv"
  input: "dropout_2/cond/dropout/truediv/x"
  input: "dropout_2/cond/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_2/cond/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout_2/cond/dropout/random_uniform"
  input: "dropout_2/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_2/cond/dropout/mul"
  op: "Mul"
  input: "dropout_2/cond/dropout/Shape/Switch:1"
  input: "dropout_2/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_2/cond/dropout/Cast"
  op: "Cast"
  input: "dropout_2/cond/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "dropout_2/cond/dropout/mul_1"
  op: "Mul"
  input: "dropout_2/cond/dropout/mul"
  input: "dropout_2/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_2/cond/Identity/Switch"
  op: "Switch"
  input: "batch_normalization_8/cond/Merge"
  input: "dropout_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/cond/Merge"
      }
    }
  }
}
node {
  name: "dropout_2/cond/Identity"
  op: "Identity"
  input: "dropout_2/cond/Identity/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_2/cond/Merge"
  op: "Merge"
  input: "dropout_2/cond/Identity"
  input: "dropout_2/cond/dropout/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concatenate_2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concatenate_2/concat"
  op: "ConcatV2"
  input: "conv2d_2/BiasAdd"
  input: "dropout_2/cond/Merge"
  input: "concatenate_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000 \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_3/kernel"
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_3/kernel"
}
node {
  name: "conv2d_transpose_3/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_3/kernel"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_3/bias"
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_3/bias"
}
node {
  name: "conv2d_transpose_3/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_3/bias"
  input: "conv2d_transpose_3/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_3/Shape"
  op: "Shape"
  input: "concatenate_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_3/Shape"
  input: "conv2d_transpose_3/strided_slice/stack"
  input: "conv2d_transpose_3/strided_slice/stack_1"
  input: "conv2d_transpose_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_3/Shape"
  input: "conv2d_transpose_3/strided_slice_1/stack"
  input: "conv2d_transpose_3/strided_slice_1/stack_1"
  input: "conv2d_transpose_3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_3/Shape"
  input: "conv2d_transpose_3/strided_slice_2/stack"
  input: "conv2d_transpose_3/strided_slice_2/stack_1"
  input: "conv2d_transpose_3/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_3/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/mul"
  op: "Mul"
  input: "conv2d_transpose_3/strided_slice_1"
  input: "conv2d_transpose_3/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_3/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/mul_1"
  op: "Mul"
  input: "conv2d_transpose_3/strided_slice_2"
  input: "conv2d_transpose_3/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_3/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/stack"
  op: "Pack"
  input: "conv2d_transpose_3/strided_slice"
  input: "conv2d_transpose_3/mul"
  input: "conv2d_transpose_3/mul_1"
  input: "conv2d_transpose_3/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_3"
  op: "StridedSlice"
  input: "conv2d_transpose_3/stack"
  input: "conv2d_transpose_3/strided_slice_3/stack"
  input: "conv2d_transpose_3/strided_slice_3/stack_1"
  input: "conv2d_transpose_3/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_3/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_3/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_3/stack"
  input: "conv2d_transpose_3/conv2d_transpose/ReadVariableOp"
  input: "concatenate_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_3/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_3/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_3/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_3/conv2d_transpose"
  input: "conv2d_transpose_3/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_3/Relu"
  op: "Relu"
  input: "conv2d_transpose_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_9/gamma"
    }
  }
}
node {
  name: "batch_normalization_9/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_9/gamma"
}
node {
  name: "batch_normalization_9/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_9/gamma"
  input: "batch_normalization_9/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_9/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_9/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_9/beta"
    }
  }
}
node {
  name: "batch_normalization_9/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_9/beta"
}
node {
  name: "batch_normalization_9/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_9/beta"
  input: "batch_normalization_9/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_9/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_9/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_9/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_9/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_9/moving_mean"
}
node {
  name: "batch_normalization_9/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_9/moving_mean"
  input: "batch_normalization_9/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_9/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_9/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_9/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_9/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_9/moving_variance"
}
node {
  name: "batch_normalization_9/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_9/moving_variance"
  input: "batch_normalization_9/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_9/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_9/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_9/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_9/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_9/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_9/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_9/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_9/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_9/gamma"
  input: "batch_normalization_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_9/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_9/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_9/beta"
  input: "batch_normalization_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_9/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_9/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/cond/Const"
  op: "Const"
  input: "^batch_normalization_9/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_9/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "re_lu_3/Relu"
  input: "batch_normalization_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_3/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_9/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_9/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_9/cond/ReadVariableOp"
  input: "batch_normalization_9/cond/ReadVariableOp_1"
  input: "batch_normalization_9/cond/Const"
  input: "batch_normalization_9/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_9/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_9/gamma"
  input: "batch_normalization_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_9/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_9/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_9/beta"
  input: "batch_normalization_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_9/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_9/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_9/moving_mean"
  input: "batch_normalization_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_9/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_9/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_9/moving_variance"
  input: "batch_normalization_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_9/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_9/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "re_lu_3/Relu"
  input: "batch_normalization_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_3/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_9/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_9/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_9/cond/ReadVariableOp_2"
  input: "batch_normalization_9/cond/ReadVariableOp_3"
  input: "batch_normalization_9/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_9/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_9/cond/Merge"
  op: "Merge"
  input: "batch_normalization_9/cond/FusedBatchNorm_1"
  input: "batch_normalization_9/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_9/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_9/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_9/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_9/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_9/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_9/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_9/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_9/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_9/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_9/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_9/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_9/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_9/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_9/cond_1/Const_1"
  input: "batch_normalization_9/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_9/AssignMovingAvg/sub/x"
  input: "batch_normalization_9/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_9/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_9/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_9/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_9/AssignMovingAvg/sub_1"
  input: "batch_normalization_9/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_9/moving_mean"
  input: "batch_normalization_9/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_9/moving_mean"
  input: "^batch_normalization_9/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_9/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_9/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_9/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_9/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_9/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_9/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_9/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_9/moving_variance"
  input: "batch_normalization_9/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_9/moving_variance"
  input: "^batch_normalization_9/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concatenate_3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concatenate_3/concat"
  op: "ConcatV2"
  input: "conv2d_1/BiasAdd"
  input: "batch_normalization_9/cond/Merge"
  input: "concatenate_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_4/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.12247448414564133
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.12247448414564133
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_4/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_transpose_4/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_4/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_4/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_4/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_4/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_4/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_4/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_4/kernel"
    }
  }
}
node {
  name: "conv2d_transpose_4/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_4/kernel"
}
node {
  name: "conv2d_transpose_4/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_4/kernel"
  input: "conv2d_transpose_4/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_4/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_4/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_4/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_4/bias"
    }
  }
}
node {
  name: "conv2d_transpose_4/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_4/bias"
}
node {
  name: "conv2d_transpose_4/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_4/bias"
  input: "conv2d_transpose_4/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_4/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_4/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_4/Shape"
  op: "Shape"
  input: "concatenate_3/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_4/Shape"
  input: "conv2d_transpose_4/strided_slice/stack"
  input: "conv2d_transpose_4/strided_slice/stack_1"
  input: "conv2d_transpose_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_4/Shape"
  input: "conv2d_transpose_4/strided_slice_1/stack"
  input: "conv2d_transpose_4/strided_slice_1/stack_1"
  input: "conv2d_transpose_4/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_4/Shape"
  input: "conv2d_transpose_4/strided_slice_2/stack"
  input: "conv2d_transpose_4/strided_slice_2/stack_1"
  input: "conv2d_transpose_4/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_4/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/mul"
  op: "Mul"
  input: "conv2d_transpose_4/strided_slice_1"
  input: "conv2d_transpose_4/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_4/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/mul_1"
  op: "Mul"
  input: "conv2d_transpose_4/strided_slice_2"
  input: "conv2d_transpose_4/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_4/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/stack"
  op: "Pack"
  input: "conv2d_transpose_4/strided_slice"
  input: "conv2d_transpose_4/mul"
  input: "conv2d_transpose_4/mul_1"
  input: "conv2d_transpose_4/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_3"
  op: "StridedSlice"
  input: "conv2d_transpose_4/stack"
  input: "conv2d_transpose_4/strided_slice_3/stack"
  input: "conv2d_transpose_4/strided_slice_3/stack_1"
  input: "conv2d_transpose_4/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_4/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_4/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_4/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_4/stack"
  input: "conv2d_transpose_4/conv2d_transpose/ReadVariableOp"
  input: "concatenate_3/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_4/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_4/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_4/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_4/conv2d_transpose"
  input: "conv2d_transpose_4/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_4/Relu"
  op: "Relu"
  input: "conv2d_transpose_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_10/gamma"
    }
  }
}
node {
  name: "batch_normalization_10/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_10/gamma"
}
node {
  name: "batch_normalization_10/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_10/gamma"
  input: "batch_normalization_10/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_10/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_10/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_10/beta"
    }
  }
}
node {
  name: "batch_normalization_10/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_10/beta"
}
node {
  name: "batch_normalization_10/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_10/beta"
  input: "batch_normalization_10/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_10/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_10/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_10/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_10/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_10/moving_mean"
}
node {
  name: "batch_normalization_10/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_10/moving_mean"
  input: "batch_normalization_10/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_10/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_10/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_10/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_10/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_10/moving_variance"
}
node {
  name: "batch_normalization_10/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_10/moving_variance"
  input: "batch_normalization_10/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_10/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_10/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_10/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_10/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_10/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_10/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_10/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_10/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_10/gamma"
  input: "batch_normalization_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_10/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_10/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_10/beta"
  input: "batch_normalization_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_10/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_10/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/cond/Const"
  op: "Const"
  input: "^batch_normalization_10/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_10/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "re_lu_4/Relu"
  input: "batch_normalization_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_4/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_10/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_10/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_10/cond/ReadVariableOp"
  input: "batch_normalization_10/cond/ReadVariableOp_1"
  input: "batch_normalization_10/cond/Const"
  input: "batch_normalization_10/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_10/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_10/gamma"
  input: "batch_normalization_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_10/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_10/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_10/beta"
  input: "batch_normalization_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_10/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_10/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_10/moving_mean"
  input: "batch_normalization_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_10/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_10/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_10/moving_variance"
  input: "batch_normalization_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_10/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_10/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "re_lu_4/Relu"
  input: "batch_normalization_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_4/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_10/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_10/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_10/cond/ReadVariableOp_2"
  input: "batch_normalization_10/cond/ReadVariableOp_3"
  input: "batch_normalization_10/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_10/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_10/cond/Merge"
  op: "Merge"
  input: "batch_normalization_10/cond/FusedBatchNorm_1"
  input: "batch_normalization_10/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_10/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_10/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_10/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_10/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_10/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_10/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_10/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_10/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_10/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_10/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_10/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_10/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_10/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_10/cond_1/Const_1"
  input: "batch_normalization_10/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_10/AssignMovingAvg/sub/x"
  input: "batch_normalization_10/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_10/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_10/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_10/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_10/AssignMovingAvg/sub_1"
  input: "batch_normalization_10/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_10/moving_mean"
  input: "batch_normalization_10/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_10/moving_mean"
  input: "^batch_normalization_10/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_10/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_10/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_10/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_10/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_10/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_10/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_10/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_10/moving_variance"
  input: "batch_normalization_10/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_10/moving_variance"
  input: "^batch_normalization_10/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concatenate_4/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concatenate_4/concat"
  op: "ConcatV2"
  input: "conv2d/BiasAdd"
  input: "batch_normalization_10/cond/Merge"
  input: "concatenate_4/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_5/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4898979365825653
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4898979365825653
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_5/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_transpose_5/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_5/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_5/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_5/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_5/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_5/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_5/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_5/kernel"
    }
  }
}
node {
  name: "conv2d_transpose_5/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_5/kernel"
}
node {
  name: "conv2d_transpose_5/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_5/kernel"
  input: "conv2d_transpose_5/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_5/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_5/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_5/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_5/bias"
    }
  }
}
node {
  name: "conv2d_transpose_5/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_5/bias"
}
node {
  name: "conv2d_transpose_5/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_5/bias"
  input: "conv2d_transpose_5/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_5/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_5/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_5/Shape"
  op: "Shape"
  input: "concatenate_4/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_5/Shape"
  input: "conv2d_transpose_5/strided_slice/stack"
  input: "conv2d_transpose_5/strided_slice/stack_1"
  input: "conv2d_transpose_5/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_5/Shape"
  input: "conv2d_transpose_5/strided_slice_1/stack"
  input: "conv2d_transpose_5/strided_slice_1/stack_1"
  input: "conv2d_transpose_5/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_5/Shape"
  input: "conv2d_transpose_5/strided_slice_2/stack"
  input: "conv2d_transpose_5/strided_slice_2/stack_1"
  input: "conv2d_transpose_5/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_5/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/mul"
  op: "Mul"
  input: "conv2d_transpose_5/strided_slice_1"
  input: "conv2d_transpose_5/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_5/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/mul_1"
  op: "Mul"
  input: "conv2d_transpose_5/strided_slice_2"
  input: "conv2d_transpose_5/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_5/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/stack"
  op: "Pack"
  input: "conv2d_transpose_5/strided_slice"
  input: "conv2d_transpose_5/mul"
  input: "conv2d_transpose_5/mul_1"
  input: "conv2d_transpose_5/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_5/strided_slice_3"
  op: "StridedSlice"
  input: "conv2d_transpose_5/stack"
  input: "conv2d_transpose_5/strided_slice_3/stack"
  input: "conv2d_transpose_5/strided_slice_3/stack_1"
  input: "conv2d_transpose_5/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_5/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_5/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_5/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_5/stack"
  input: "conv2d_transpose_5/conv2d_transpose/ReadVariableOp"
  input: "concatenate_4/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_5/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_5/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_5/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_5/conv2d_transpose"
  input: "conv2d_transpose_5/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_5/Relu"
  op: "Relu"
  input: "conv2d_transpose_5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_11/gamma"
    }
  }
}
node {
  name: "batch_normalization_11/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_11/gamma"
}
node {
  name: "batch_normalization_11/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_11/gamma"
  input: "batch_normalization_11/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_11/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_11/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_11/beta"
    }
  }
}
node {
  name: "batch_normalization_11/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_11/beta"
}
node {
  name: "batch_normalization_11/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_11/beta"
  input: "batch_normalization_11/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_11/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_11/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_11/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_11/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_11/moving_mean"
}
node {
  name: "batch_normalization_11/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_11/moving_mean"
  input: "batch_normalization_11/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_11/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_11/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_11/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_11/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_11/moving_variance"
}
node {
  name: "batch_normalization_11/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_11/moving_variance"
  input: "batch_normalization_11/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_11/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_11/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_11/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_11/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_11/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_11/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_11/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_11/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_11/gamma"
  input: "batch_normalization_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_11/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_11/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_11/beta"
  input: "batch_normalization_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_11/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_11/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/cond/Const"
  op: "Const"
  input: "^batch_normalization_11/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_11/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "re_lu_5/Relu"
  input: "batch_normalization_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_5/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_11/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_11/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_11/cond/ReadVariableOp"
  input: "batch_normalization_11/cond/ReadVariableOp_1"
  input: "batch_normalization_11/cond/Const"
  input: "batch_normalization_11/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_11/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_11/gamma"
  input: "batch_normalization_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_11/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_11/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_11/beta"
  input: "batch_normalization_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_11/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_11/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_11/moving_mean"
  input: "batch_normalization_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_11/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_11/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_11/moving_variance"
  input: "batch_normalization_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_11/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_11/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "re_lu_5/Relu"
  input: "batch_normalization_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_5/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_11/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_11/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_11/cond/ReadVariableOp_2"
  input: "batch_normalization_11/cond/ReadVariableOp_3"
  input: "batch_normalization_11/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_11/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_11/cond/Merge"
  op: "Merge"
  input: "batch_normalization_11/cond/FusedBatchNorm_1"
  input: "batch_normalization_11/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_11/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_11/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_11/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_11/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_11/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_11/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_11/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_11/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_11/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_11/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_11/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_11/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_11/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_11/cond_1/Const_1"
  input: "batch_normalization_11/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_11/AssignMovingAvg/sub/x"
  input: "batch_normalization_11/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_11/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_11/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_11/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_11/AssignMovingAvg/sub_1"
  input: "batch_normalization_11/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_11/moving_mean"
  input: "batch_normalization_11/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_11/moving_mean"
  input: "^batch_normalization_11/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_11/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_11/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_11/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_11/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_11/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_11/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_11/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_11/moving_variance"
  input: "batch_normalization_11/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_11/moving_variance"
  input: "^batch_normalization_11/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.6123724579811096
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6123724579811096
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_6/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_6/kernel/Initializer/random_uniform/max"
  input: "conv2d_6/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_6/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_6/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_6/kernel/Initializer/random_uniform/mul"
  input: "conv2d_6/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_6/kernel"
    }
  }
}
node {
  name: "conv2d_6/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_6/kernel"
}
node {
  name: "conv2d_6/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_6/kernel"
  input: "conv2d_6/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_6/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_6/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_6/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_6/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_6/bias"
    }
  }
}
node {
  name: "conv2d_6/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_6/bias"
}
node {
  name: "conv2d_6/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_6/bias"
  input: "conv2d_6/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_6/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_6/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_6/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/filter_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "batch_normalization_11/cond/Merge"
  input: "conv2d_6/SpaceToBatchND/block_shape"
  input: "conv2d_6/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_6/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_6/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_6/Conv2D"
  op: "Conv2D"
  input: "conv2d_6/SpaceToBatchND"
  input: "conv2d_6/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "conv2d_6/Conv2D"
  input: "conv2d_6/BatchToSpaceND/block_shape"
  input: "conv2d_6/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_6/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_6/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_6/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_6/BatchToSpaceND"
  input: "conv2d_6/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_6/Sigmoid"
  op: "Sigmoid"
  input: "conv2d_6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "vocals_spectrogram/mul"
  op: "Mul"
  input: "conv2d_6/Sigmoid"
  input: "strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\002\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3464101552963257
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3464101552963257
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_7/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_7/kernel/Initializer/random_uniform/max"
  input: "conv2d_7/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_7/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_7/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_7/kernel/Initializer/random_uniform/mul"
  input: "conv2d_7/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
}
node {
  name: "conv2d_7/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 2
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_7/kernel"
    }
  }
}
node {
  name: "conv2d_7/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_7/kernel"
}
node {
  name: "conv2d_7/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_7/kernel"
  input: "conv2d_7/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_7/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_7/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_7/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_7/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_7/bias"
    }
  }
}
node {
  name: "conv2d_7/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_7/bias"
}
node {
  name: "conv2d_7/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_7/bias"
  input: "conv2d_7/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_7/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_7/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_7/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_7/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_7/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_7/Conv2D"
  op: "Conv2D"
  input: "strided_slice_3"
  input: "conv2d_7/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_7/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_7/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_7/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_7/Conv2D"
  input: "conv2d_7/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_12/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_12/gamma"
    }
  }
}
node {
  name: "batch_normalization_12/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_12/gamma"
}
node {
  name: "batch_normalization_12/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_12/gamma"
  input: "batch_normalization_12/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_12/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_12/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_12/beta"
    }
  }
}
node {
  name: "batch_normalization_12/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_12/beta"
}
node {
  name: "batch_normalization_12/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_12/beta"
  input: "batch_normalization_12/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_12/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_12/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_12/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_12/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_12/moving_mean"
}
node {
  name: "batch_normalization_12/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_12/moving_mean"
  input: "batch_normalization_12/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_12/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_12/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_12/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_12/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_12/moving_variance"
}
node {
  name: "batch_normalization_12/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_12/moving_variance"
  input: "batch_normalization_12/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_12/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_12/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_12/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_12/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_12/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_12/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_12/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_12/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_12/gamma"
  input: "batch_normalization_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_12/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_12/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_12/beta"
  input: "batch_normalization_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_12/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_12/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/cond/Const"
  op: "Const"
  input: "^batch_normalization_12/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_12/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "conv2d_7/BiasAdd"
  input: "batch_normalization_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_12/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_12/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_12/cond/ReadVariableOp"
  input: "batch_normalization_12/cond/ReadVariableOp_1"
  input: "batch_normalization_12/cond/Const"
  input: "batch_normalization_12/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_12/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_12/gamma"
  input: "batch_normalization_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_12/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_12/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_12/beta"
  input: "batch_normalization_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_12/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_12/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_12/moving_mean"
  input: "batch_normalization_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_12/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_12/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_12/moving_variance"
  input: "batch_normalization_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_12/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_12/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "conv2d_7/BiasAdd"
  input: "batch_normalization_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_12/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_12/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_12/cond/ReadVariableOp_2"
  input: "batch_normalization_12/cond/ReadVariableOp_3"
  input: "batch_normalization_12/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_12/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_12/cond/Merge"
  op: "Merge"
  input: "batch_normalization_12/cond/FusedBatchNorm_1"
  input: "batch_normalization_12/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_12/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_12/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_12/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_12/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_12/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_12/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_12/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_12/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_12/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_12/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_12/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_12/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_12/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_12/cond_1/Const_1"
  input: "batch_normalization_12/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_12/AssignMovingAvg/sub/x"
  input: "batch_normalization_12/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_12/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_12/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_12/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_12/AssignMovingAvg/sub_1"
  input: "batch_normalization_12/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_12/moving_mean"
  input: "batch_normalization_12/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_12/moving_mean"
  input: "^batch_normalization_12/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_12/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_12/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_12/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_12/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_12/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_12/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_12/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_12/moving_variance"
  input: "batch_normalization_12/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_12/moving_variance"
  input: "^batch_normalization_12/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "leaky_re_lu_1_1/LeakyRelu"
  op: "LeakyRelu"
  input: "batch_normalization_12/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.12247448414564133
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.12247448414564133
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_8/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_8/kernel/Initializer/random_uniform/max"
  input: "conv2d_8/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_8/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_8/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_8/kernel/Initializer/random_uniform/mul"
  input: "conv2d_8/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
}
node {
  name: "conv2d_8/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_8/kernel"
    }
  }
}
node {
  name: "conv2d_8/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_8/kernel"
}
node {
  name: "conv2d_8/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_8/kernel"
  input: "conv2d_8/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_8/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_8/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_8/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_8/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_8/bias"
    }
  }
}
node {
  name: "conv2d_8/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_8/bias"
}
node {
  name: "conv2d_8/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_8/bias"
  input: "conv2d_8/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_8/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_8/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_8/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_8/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_8/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_8/Conv2D"
  op: "Conv2D"
  input: "leaky_re_lu_1_1/LeakyRelu"
  input: "conv2d_8/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_8/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_8/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_8/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_8/Conv2D"
  input: "conv2d_8/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_13/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_13/gamma"
    }
  }
}
node {
  name: "batch_normalization_13/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_13/gamma"
}
node {
  name: "batch_normalization_13/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_13/gamma"
  input: "batch_normalization_13/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_13/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_13/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_13/beta"
    }
  }
}
node {
  name: "batch_normalization_13/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_13/beta"
}
node {
  name: "batch_normalization_13/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_13/beta"
  input: "batch_normalization_13/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_13/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_13/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_13/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_13/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_13/moving_mean"
}
node {
  name: "batch_normalization_13/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_13/moving_mean"
  input: "batch_normalization_13/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_13/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_13/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_13/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_13/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_13/moving_variance"
}
node {
  name: "batch_normalization_13/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_13/moving_variance"
  input: "batch_normalization_13/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_13/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_13/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_13/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_13/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_13/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_13/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_13/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_13/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_13/gamma"
  input: "batch_normalization_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_13/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_13/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_13/beta"
  input: "batch_normalization_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_13/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_13/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/cond/Const"
  op: "Const"
  input: "^batch_normalization_13/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_13/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "conv2d_8/BiasAdd"
  input: "batch_normalization_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_13/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_13/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_13/cond/ReadVariableOp"
  input: "batch_normalization_13/cond/ReadVariableOp_1"
  input: "batch_normalization_13/cond/Const"
  input: "batch_normalization_13/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_13/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_13/gamma"
  input: "batch_normalization_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_13/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_13/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_13/beta"
  input: "batch_normalization_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_13/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_13/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_13/moving_mean"
  input: "batch_normalization_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_13/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_13/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_13/moving_variance"
  input: "batch_normalization_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_13/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_13/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "conv2d_8/BiasAdd"
  input: "batch_normalization_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_13/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_13/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_13/cond/ReadVariableOp_2"
  input: "batch_normalization_13/cond/ReadVariableOp_3"
  input: "batch_normalization_13/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_13/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_13/cond/Merge"
  op: "Merge"
  input: "batch_normalization_13/cond/FusedBatchNorm_1"
  input: "batch_normalization_13/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_13/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_13/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_13/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_13/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_13/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_13/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_13/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_13/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_13/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_13/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_13/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_13/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_13/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_13/cond_1/Const_1"
  input: "batch_normalization_13/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_13/AssignMovingAvg/sub/x"
  input: "batch_normalization_13/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_13/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_13/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_13/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_13/AssignMovingAvg/sub_1"
  input: "batch_normalization_13/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_13/moving_mean"
  input: "batch_normalization_13/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_13/moving_mean"
  input: "^batch_normalization_13/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_13/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_13/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_13/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_13/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_13/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_13/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_13/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_13/moving_variance"
  input: "batch_normalization_13/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_13/moving_variance"
  input: "^batch_normalization_13/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "leaky_re_lu_1_2/LeakyRelu"
  op: "LeakyRelu"
  input: "batch_normalization_13/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_9/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_9/kernel/Initializer/random_uniform/max"
  input: "conv2d_9/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_9/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_9/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_9/kernel/Initializer/random_uniform/mul"
  input: "conv2d_9/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
}
node {
  name: "conv2d_9/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_9/kernel"
    }
  }
}
node {
  name: "conv2d_9/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_9/kernel"
}
node {
  name: "conv2d_9/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_9/kernel"
  input: "conv2d_9/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_9/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_9/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_9/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_9/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_9/bias"
    }
  }
}
node {
  name: "conv2d_9/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_9/bias"
}
node {
  name: "conv2d_9/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_9/bias"
  input: "conv2d_9/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_9/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_9/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_9/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_9/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_9/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_9/Conv2D"
  op: "Conv2D"
  input: "leaky_re_lu_1_2/LeakyRelu"
  input: "conv2d_9/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_9/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_9/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_9/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_9/Conv2D"
  input: "conv2d_9/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_14/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_14/gamma"
    }
  }
}
node {
  name: "batch_normalization_14/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_14/gamma"
}
node {
  name: "batch_normalization_14/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_14/gamma"
  input: "batch_normalization_14/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_14/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_14/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_14/beta"
    }
  }
}
node {
  name: "batch_normalization_14/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_14/beta"
}
node {
  name: "batch_normalization_14/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_14/beta"
  input: "batch_normalization_14/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_14/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_14/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_14/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_14/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_14/moving_mean"
}
node {
  name: "batch_normalization_14/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_14/moving_mean"
  input: "batch_normalization_14/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_14/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_14/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_14/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_14/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_14/moving_variance"
}
node {
  name: "batch_normalization_14/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_14/moving_variance"
  input: "batch_normalization_14/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_14/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_14/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_14/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_14/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_14/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_14/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_14/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_14/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_14/gamma"
  input: "batch_normalization_14/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_14/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_14/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_14/beta"
  input: "batch_normalization_14/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_14/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_14/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/cond/Const"
  op: "Const"
  input: "^batch_normalization_14/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_14/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "conv2d_9/BiasAdd"
  input: "batch_normalization_14/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_14/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_14/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_14/cond/ReadVariableOp"
  input: "batch_normalization_14/cond/ReadVariableOp_1"
  input: "batch_normalization_14/cond/Const"
  input: "batch_normalization_14/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_14/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_14/gamma"
  input: "batch_normalization_14/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_14/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_14/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_14/beta"
  input: "batch_normalization_14/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_14/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_14/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_14/moving_mean"
  input: "batch_normalization_14/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_14/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_14/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_14/moving_variance"
  input: "batch_normalization_14/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_14/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_14/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "conv2d_9/BiasAdd"
  input: "batch_normalization_14/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_14/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_14/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_14/cond/ReadVariableOp_2"
  input: "batch_normalization_14/cond/ReadVariableOp_3"
  input: "batch_normalization_14/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_14/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_14/cond/Merge"
  op: "Merge"
  input: "batch_normalization_14/cond/FusedBatchNorm_1"
  input: "batch_normalization_14/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_14/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_14/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_14/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_14/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_14/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_14/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_14/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_14/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_14/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_14/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_14/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_14/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_14/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_14/cond_1/Const_1"
  input: "batch_normalization_14/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_14/AssignMovingAvg/sub/x"
  input: "batch_normalization_14/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_14/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_14/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_14/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_14/AssignMovingAvg/sub_1"
  input: "batch_normalization_14/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_14/moving_mean"
  input: "batch_normalization_14/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_14/moving_mean"
  input: "^batch_normalization_14/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_14/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_14/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_14/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_14/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_14/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_14/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_14/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_14/moving_variance"
  input: "batch_normalization_14/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_14/moving_variance"
  input: "^batch_normalization_14/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "leaky_re_lu_1_3/LeakyRelu"
  op: "LeakyRelu"
  input: "batch_normalization_14/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06123724207282066
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06123724207282066
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_10/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_10/kernel/Initializer/random_uniform/max"
  input: "conv2d_10/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_10/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_10/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_10/kernel/Initializer/random_uniform/mul"
  input: "conv2d_10/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
}
node {
  name: "conv2d_10/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_10/kernel"
    }
  }
}
node {
  name: "conv2d_10/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_10/kernel"
}
node {
  name: "conv2d_10/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_10/kernel"
  input: "conv2d_10/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_10/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_10/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_10/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_10/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_10/bias"
    }
  }
}
node {
  name: "conv2d_10/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_10/bias"
}
node {
  name: "conv2d_10/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_10/bias"
  input: "conv2d_10/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_10/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_10/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_10/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_10/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_10/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_10/Conv2D"
  op: "Conv2D"
  input: "leaky_re_lu_1_3/LeakyRelu"
  input: "conv2d_10/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_10/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_10/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_10/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_10/Conv2D"
  input: "conv2d_10/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_15/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_15/gamma"
    }
  }
}
node {
  name: "batch_normalization_15/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_15/gamma"
}
node {
  name: "batch_normalization_15/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_15/gamma"
  input: "batch_normalization_15/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_15/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_15/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_15/beta"
    }
  }
}
node {
  name: "batch_normalization_15/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_15/beta"
}
node {
  name: "batch_normalization_15/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_15/beta"
  input: "batch_normalization_15/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_15/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_15/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_15/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_15/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_15/moving_mean"
}
node {
  name: "batch_normalization_15/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_15/moving_mean"
  input: "batch_normalization_15/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_15/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_15/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_15/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_15/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_15/moving_variance"
}
node {
  name: "batch_normalization_15/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_15/moving_variance"
  input: "batch_normalization_15/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_15/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_15/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_15/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_15/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_15/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_15/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_15/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_15/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_15/gamma"
  input: "batch_normalization_15/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_15/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_15/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_15/beta"
  input: "batch_normalization_15/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_15/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_15/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/cond/Const"
  op: "Const"
  input: "^batch_normalization_15/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_15/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "conv2d_10/BiasAdd"
  input: "batch_normalization_15/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_15/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_15/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_15/cond/ReadVariableOp"
  input: "batch_normalization_15/cond/ReadVariableOp_1"
  input: "batch_normalization_15/cond/Const"
  input: "batch_normalization_15/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_15/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_15/gamma"
  input: "batch_normalization_15/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_15/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_15/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_15/beta"
  input: "batch_normalization_15/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_15/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_15/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_15/moving_mean"
  input: "batch_normalization_15/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_15/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_15/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_15/moving_variance"
  input: "batch_normalization_15/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_15/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_15/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "conv2d_10/BiasAdd"
  input: "batch_normalization_15/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_15/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_15/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_15/cond/ReadVariableOp_2"
  input: "batch_normalization_15/cond/ReadVariableOp_3"
  input: "batch_normalization_15/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_15/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_15/cond/Merge"
  op: "Merge"
  input: "batch_normalization_15/cond/FusedBatchNorm_1"
  input: "batch_normalization_15/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_15/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_15/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_15/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_15/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_15/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_15/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_15/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_15/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_15/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_15/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_15/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_15/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_15/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_15/cond_1/Const_1"
  input: "batch_normalization_15/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_15/AssignMovingAvg/sub/x"
  input: "batch_normalization_15/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_15/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_15/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_15/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_15/AssignMovingAvg/sub_1"
  input: "batch_normalization_15/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_15/moving_mean"
  input: "batch_normalization_15/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_15/moving_mean"
  input: "^batch_normalization_15/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_15/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_15/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_15/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_15/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_15/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_15/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_15/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_15/moving_variance"
  input: "batch_normalization_15/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_15/moving_variance"
  input: "^batch_normalization_15/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "leaky_re_lu_1_4/LeakyRelu"
  op: "LeakyRelu"
  input: "batch_normalization_15/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04330126941204071
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04330126941204071
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_11/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_11/kernel/Initializer/random_uniform/max"
  input: "conv2d_11/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_11/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_11/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_11/kernel/Initializer/random_uniform/mul"
  input: "conv2d_11/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
}
node {
  name: "conv2d_11/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_11/kernel"
    }
  }
}
node {
  name: "conv2d_11/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_11/kernel"
}
node {
  name: "conv2d_11/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_11/kernel"
  input: "conv2d_11/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_11/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_11/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_11/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_11/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_11/bias"
    }
  }
}
node {
  name: "conv2d_11/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_11/bias"
}
node {
  name: "conv2d_11/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_11/bias"
  input: "conv2d_11/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_11/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_11/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_11/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_11/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_11/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_11/Conv2D"
  op: "Conv2D"
  input: "leaky_re_lu_1_4/LeakyRelu"
  input: "conv2d_11/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_11/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_11/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_11/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_11/Conv2D"
  input: "conv2d_11/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_16/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_16/gamma"
    }
  }
}
node {
  name: "batch_normalization_16/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_16/gamma"
}
node {
  name: "batch_normalization_16/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_16/gamma"
  input: "batch_normalization_16/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_16/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_16/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_16/beta"
    }
  }
}
node {
  name: "batch_normalization_16/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_16/beta"
}
node {
  name: "batch_normalization_16/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_16/beta"
  input: "batch_normalization_16/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_16/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_16/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_16/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_16/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_16/moving_mean"
}
node {
  name: "batch_normalization_16/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_16/moving_mean"
  input: "batch_normalization_16/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_16/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_16/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_16/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_16/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_16/moving_variance"
}
node {
  name: "batch_normalization_16/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_16/moving_variance"
  input: "batch_normalization_16/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_16/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_16/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_16/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_16/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_16/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_16/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_16/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_16/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_16/gamma"
  input: "batch_normalization_16/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_16/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_16/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_16/beta"
  input: "batch_normalization_16/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_16/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_16/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/cond/Const"
  op: "Const"
  input: "^batch_normalization_16/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_16/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "conv2d_11/BiasAdd"
  input: "batch_normalization_16/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_16/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_16/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_16/cond/ReadVariableOp"
  input: "batch_normalization_16/cond/ReadVariableOp_1"
  input: "batch_normalization_16/cond/Const"
  input: "batch_normalization_16/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_16/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_16/gamma"
  input: "batch_normalization_16/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_16/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_16/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_16/beta"
  input: "batch_normalization_16/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_16/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_16/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_16/moving_mean"
  input: "batch_normalization_16/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_16/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_16/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_16/moving_variance"
  input: "batch_normalization_16/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_16/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_16/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "conv2d_11/BiasAdd"
  input: "batch_normalization_16/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_16/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_16/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_16/cond/ReadVariableOp_2"
  input: "batch_normalization_16/cond/ReadVariableOp_3"
  input: "batch_normalization_16/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_16/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_16/cond/Merge"
  op: "Merge"
  input: "batch_normalization_16/cond/FusedBatchNorm_1"
  input: "batch_normalization_16/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_16/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_16/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_16/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_16/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_16/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_16/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_16/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_16/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_16/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_16/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_16/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_16/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_16/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_16/cond_1/Const_1"
  input: "batch_normalization_16/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_16/AssignMovingAvg/sub/x"
  input: "batch_normalization_16/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_16/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_16/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_16/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_16/AssignMovingAvg/sub_1"
  input: "batch_normalization_16/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_16/moving_mean"
  input: "batch_normalization_16/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_16/moving_mean"
  input: "^batch_normalization_16/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_16/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_16/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_16/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_16/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_16/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_16/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_16/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_16/moving_variance"
  input: "batch_normalization_16/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_16/moving_variance"
  input: "^batch_normalization_16/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "leaky_re_lu_1_5/LeakyRelu"
  op: "LeakyRelu"
  input: "batch_normalization_16/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03061862103641033
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03061862103641033
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_12/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_12/kernel/Initializer/random_uniform/max"
  input: "conv2d_12/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_12/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_12/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_12/kernel/Initializer/random_uniform/mul"
  input: "conv2d_12/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
}
node {
  name: "conv2d_12/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_12/kernel"
    }
  }
}
node {
  name: "conv2d_12/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_12/kernel"
}
node {
  name: "conv2d_12/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_12/kernel"
  input: "conv2d_12/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_12/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_12/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_12/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_12/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_12/bias"
    }
  }
}
node {
  name: "conv2d_12/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_12/bias"
}
node {
  name: "conv2d_12/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_12/bias"
  input: "conv2d_12/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_12/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_12/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_12/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_12/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_12/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_12/Conv2D"
  op: "Conv2D"
  input: "leaky_re_lu_1_5/LeakyRelu"
  input: "conv2d_12/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_12/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_12/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_12/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_12/Conv2D"
  input: "conv2d_12/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_17/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_17/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_17/gamma"
    }
  }
}
node {
  name: "batch_normalization_17/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_17/gamma"
}
node {
  name: "batch_normalization_17/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_17/gamma"
  input: "batch_normalization_17/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_17/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_17/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_17/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_17/beta"
    }
  }
}
node {
  name: "batch_normalization_17/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_17/beta"
}
node {
  name: "batch_normalization_17/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_17/beta"
  input: "batch_normalization_17/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_17/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_17/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_17/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_17/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_17/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_17/moving_mean"
}
node {
  name: "batch_normalization_17/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_17/moving_mean"
  input: "batch_normalization_17/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_17/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_17/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_17/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_17/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_17/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_17/moving_variance"
}
node {
  name: "batch_normalization_17/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_17/moving_variance"
  input: "batch_normalization_17/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_17/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_17/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_17/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_17/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_17/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_17/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_17/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_17/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_17/gamma"
  input: "batch_normalization_17/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_17/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_17/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_17/beta"
  input: "batch_normalization_17/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_17/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_17/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/cond/Const"
  op: "Const"
  input: "^batch_normalization_17/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_17/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_17/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_17/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "conv2d_12/BiasAdd"
  input: "batch_normalization_17/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_17/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_17/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_17/cond/ReadVariableOp"
  input: "batch_normalization_17/cond/ReadVariableOp_1"
  input: "batch_normalization_17/cond/Const"
  input: "batch_normalization_17/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_17/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_17/gamma"
  input: "batch_normalization_17/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_17/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_17/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_17/beta"
  input: "batch_normalization_17/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_17/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_17/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_17/moving_mean"
  input: "batch_normalization_17/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_17/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_17/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_17/moving_variance"
  input: "batch_normalization_17/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_17/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_17/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "conv2d_12/BiasAdd"
  input: "batch_normalization_17/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/BiasAdd"
      }
    }
  }
}
node {
  name: "batch_normalization_17/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_17/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_17/cond/ReadVariableOp_2"
  input: "batch_normalization_17/cond/ReadVariableOp_3"
  input: "batch_normalization_17/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_17/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_17/cond/Merge"
  op: "Merge"
  input: "batch_normalization_17/cond/FusedBatchNorm_1"
  input: "batch_normalization_17/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_17/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_17/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_17/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_17/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_17/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_17/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_17/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_17/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_17/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_17/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_17/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_17/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_17/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_17/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_17/cond_1/Const_1"
  input: "batch_normalization_17/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_17/AssignMovingAvg/sub/x"
  input: "batch_normalization_17/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_17/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_17/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_17/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_17/AssignMovingAvg/sub_1"
  input: "batch_normalization_17/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_17/moving_mean"
  input: "batch_normalization_17/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_17/moving_mean"
  input: "^batch_normalization_17/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_17/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_17/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_17/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_17/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_17/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_17/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_17/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_17/moving_variance"
  input: "batch_normalization_17/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_17/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_17/moving_variance"
  input: "^batch_normalization_17/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_17/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "leaky_re_lu_1_6/LeakyRelu"
  op: "LeakyRelu"
  input: "batch_normalization_17/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "conv2d_transpose_6/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03061862103641033
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03061862103641033
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_6/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_transpose_6/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_6/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_6/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_6/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_6/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_6/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_6/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_6/kernel"
    }
  }
}
node {
  name: "conv2d_transpose_6/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_6/kernel"
}
node {
  name: "conv2d_transpose_6/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_6/kernel"
  input: "conv2d_transpose_6/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_6/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_6/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_6/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_6/bias"
    }
  }
}
node {
  name: "conv2d_transpose_6/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_6/bias"
}
node {
  name: "conv2d_transpose_6/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_6/bias"
  input: "conv2d_transpose_6/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_6/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_6/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_6/Shape"
  op: "Shape"
  input: "conv2d_12/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_6/Shape"
  input: "conv2d_transpose_6/strided_slice/stack"
  input: "conv2d_transpose_6/strided_slice/stack_1"
  input: "conv2d_transpose_6/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_6/Shape"
  input: "conv2d_transpose_6/strided_slice_1/stack"
  input: "conv2d_transpose_6/strided_slice_1/stack_1"
  input: "conv2d_transpose_6/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_6/Shape"
  input: "conv2d_transpose_6/strided_slice_2/stack"
  input: "conv2d_transpose_6/strided_slice_2/stack_1"
  input: "conv2d_transpose_6/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_6/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/mul"
  op: "Mul"
  input: "conv2d_transpose_6/strided_slice_1"
  input: "conv2d_transpose_6/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_6/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/mul_1"
  op: "Mul"
  input: "conv2d_transpose_6/strided_slice_2"
  input: "conv2d_transpose_6/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_6/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/stack"
  op: "Pack"
  input: "conv2d_transpose_6/strided_slice"
  input: "conv2d_transpose_6/mul"
  input: "conv2d_transpose_6/mul_1"
  input: "conv2d_transpose_6/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_6/strided_slice_3"
  op: "StridedSlice"
  input: "conv2d_transpose_6/stack"
  input: "conv2d_transpose_6/strided_slice_3/stack"
  input: "conv2d_transpose_6/strided_slice_3/stack_1"
  input: "conv2d_transpose_6/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_6/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_6/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_6/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_6/stack"
  input: "conv2d_transpose_6/conv2d_transpose/ReadVariableOp"
  input: "conv2d_12/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_6/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_6/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_6/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_6/conv2d_transpose"
  input: "conv2d_transpose_6/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_1_1/Relu"
  op: "Relu"
  input: "conv2d_transpose_6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_18/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_18/gamma"
    }
  }
}
node {
  name: "batch_normalization_18/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_18/gamma"
}
node {
  name: "batch_normalization_18/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_18/gamma"
  input: "batch_normalization_18/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_18/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_18/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_18/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_18/beta"
    }
  }
}
node {
  name: "batch_normalization_18/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_18/beta"
}
node {
  name: "batch_normalization_18/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_18/beta"
  input: "batch_normalization_18/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_18/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_18/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_18/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_18/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_18/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_18/moving_mean"
}
node {
  name: "batch_normalization_18/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_18/moving_mean"
  input: "batch_normalization_18/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_18/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_18/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_18/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_18/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_18/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_18/moving_variance"
}
node {
  name: "batch_normalization_18/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_18/moving_variance"
  input: "batch_normalization_18/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_18/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_18/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_18/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_18/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_18/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_18/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_18/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_18/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_18/gamma"
  input: "batch_normalization_18/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_18/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_18/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_18/beta"
  input: "batch_normalization_18/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_18/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_18/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/cond/Const"
  op: "Const"
  input: "^batch_normalization_18/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_18/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_18/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_18/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "re_lu_1_1/Relu"
  input: "batch_normalization_18/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1_1/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_18/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_18/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_18/cond/ReadVariableOp"
  input: "batch_normalization_18/cond/ReadVariableOp_1"
  input: "batch_normalization_18/cond/Const"
  input: "batch_normalization_18/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_18/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_18/gamma"
  input: "batch_normalization_18/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_18/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_18/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_18/beta"
  input: "batch_normalization_18/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_18/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_18/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_18/moving_mean"
  input: "batch_normalization_18/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_18/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_18/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_18/moving_variance"
  input: "batch_normalization_18/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_18/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_18/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "re_lu_1_1/Relu"
  input: "batch_normalization_18/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1_1/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_18/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_18/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_18/cond/ReadVariableOp_2"
  input: "batch_normalization_18/cond/ReadVariableOp_3"
  input: "batch_normalization_18/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_18/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_18/cond/Merge"
  op: "Merge"
  input: "batch_normalization_18/cond/FusedBatchNorm_1"
  input: "batch_normalization_18/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_18/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_18/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_18/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_18/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_18/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_18/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_18/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_18/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_18/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_18/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_18/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_18/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_18/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_18/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_18/cond_1/Const_1"
  input: "batch_normalization_18/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_18/AssignMovingAvg/sub/x"
  input: "batch_normalization_18/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_18/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_18/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_18/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_18/AssignMovingAvg/sub_1"
  input: "batch_normalization_18/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_18/moving_mean"
  input: "batch_normalization_18/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_18/moving_mean"
  input: "^batch_normalization_18/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_18/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_18/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_18/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_18/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_18/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_18/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_18/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_18/moving_variance"
  input: "batch_normalization_18/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_18/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_18/moving_variance"
  input: "^batch_normalization_18/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_3/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_3/cond/switch_t"
  op: "Identity"
  input: "dropout_3/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_3/cond/switch_f"
  op: "Identity"
  input: "dropout_3/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_3/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_3/cond/dropout/rate"
  op: "Const"
  input: "^dropout_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout_3/cond/dropout/Shape/Switch"
  op: "Switch"
  input: "batch_normalization_18/cond/Merge"
  input: "dropout_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/cond/Merge"
      }
    }
  }
}
node {
  name: "dropout_3/cond/dropout/Shape"
  op: "Shape"
  input: "dropout_3/cond/dropout/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "dropout_3/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^dropout_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_3/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^dropout_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_3/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_3/cond/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout_3/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_3/cond/dropout/random_uniform/max"
  input: "dropout_3/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_3/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_3/cond/dropout/random_uniform/RandomUniform"
  input: "dropout_3/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_3/cond/dropout/random_uniform"
  op: "Add"
  input: "dropout_3/cond/dropout/random_uniform/mul"
  input: "dropout_3/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_3/cond/dropout/sub/x"
  op: "Const"
  input: "^dropout_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_3/cond/dropout/sub"
  op: "Sub"
  input: "dropout_3/cond/dropout/sub/x"
  input: "dropout_3/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_3/cond/dropout/truediv/x"
  op: "Const"
  input: "^dropout_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_3/cond/dropout/truediv"
  op: "RealDiv"
  input: "dropout_3/cond/dropout/truediv/x"
  input: "dropout_3/cond/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_3/cond/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout_3/cond/dropout/random_uniform"
  input: "dropout_3/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_3/cond/dropout/mul"
  op: "Mul"
  input: "dropout_3/cond/dropout/Shape/Switch:1"
  input: "dropout_3/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_3/cond/dropout/Cast"
  op: "Cast"
  input: "dropout_3/cond/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "dropout_3/cond/dropout/mul_1"
  op: "Mul"
  input: "dropout_3/cond/dropout/mul"
  input: "dropout_3/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_3/cond/Identity/Switch"
  op: "Switch"
  input: "batch_normalization_18/cond/Merge"
  input: "dropout_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_18/cond/Merge"
      }
    }
  }
}
node {
  name: "dropout_3/cond/Identity"
  op: "Identity"
  input: "dropout_3/cond/Identity/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_3/cond/Merge"
  op: "Merge"
  input: "dropout_3/cond/Identity"
  input: "dropout_3/cond/dropout/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concatenate_5/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concatenate_5/concat"
  op: "ConcatV2"
  input: "conv2d_11/BiasAdd"
  input: "dropout_3/cond/Merge"
  input: "concatenate_5/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_7/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04330126941204071
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04330126941204071
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_7/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_transpose_7/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_7/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_7/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_7/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_7/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_7/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_7/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_7/kernel"
    }
  }
}
node {
  name: "conv2d_transpose_7/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_7/kernel"
}
node {
  name: "conv2d_transpose_7/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_7/kernel"
  input: "conv2d_transpose_7/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_7/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_7/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_7/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_7/bias"
    }
  }
}
node {
  name: "conv2d_transpose_7/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_7/bias"
}
node {
  name: "conv2d_transpose_7/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_7/bias"
  input: "conv2d_transpose_7/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_7/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_7/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_7/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_7/Shape"
  op: "Shape"
  input: "concatenate_5/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_7/Shape"
  input: "conv2d_transpose_7/strided_slice/stack"
  input: "conv2d_transpose_7/strided_slice/stack_1"
  input: "conv2d_transpose_7/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_7/Shape"
  input: "conv2d_transpose_7/strided_slice_1/stack"
  input: "conv2d_transpose_7/strided_slice_1/stack_1"
  input: "conv2d_transpose_7/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_7/Shape"
  input: "conv2d_transpose_7/strided_slice_2/stack"
  input: "conv2d_transpose_7/strided_slice_2/stack_1"
  input: "conv2d_transpose_7/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_7/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/mul"
  op: "Mul"
  input: "conv2d_transpose_7/strided_slice_1"
  input: "conv2d_transpose_7/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_7/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/mul_1"
  op: "Mul"
  input: "conv2d_transpose_7/strided_slice_2"
  input: "conv2d_transpose_7/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_7/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/stack"
  op: "Pack"
  input: "conv2d_transpose_7/strided_slice"
  input: "conv2d_transpose_7/mul"
  input: "conv2d_transpose_7/mul_1"
  input: "conv2d_transpose_7/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_7/strided_slice_3"
  op: "StridedSlice"
  input: "conv2d_transpose_7/stack"
  input: "conv2d_transpose_7/strided_slice_3/stack"
  input: "conv2d_transpose_7/strided_slice_3/stack_1"
  input: "conv2d_transpose_7/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_7/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_7/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_7/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_7/stack"
  input: "conv2d_transpose_7/conv2d_transpose/ReadVariableOp"
  input: "concatenate_5/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_7/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_7/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_7/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_7/conv2d_transpose"
  input: "conv2d_transpose_7/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_1_2/Relu"
  op: "Relu"
  input: "conv2d_transpose_7/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_19/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_19/gamma"
    }
  }
}
node {
  name: "batch_normalization_19/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_19/gamma"
}
node {
  name: "batch_normalization_19/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_19/gamma"
  input: "batch_normalization_19/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_19/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_19/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_19/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_19/beta"
    }
  }
}
node {
  name: "batch_normalization_19/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_19/beta"
}
node {
  name: "batch_normalization_19/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_19/beta"
  input: "batch_normalization_19/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_19/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_19/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_19/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_19/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_19/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_19/moving_mean"
}
node {
  name: "batch_normalization_19/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_19/moving_mean"
  input: "batch_normalization_19/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_19/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_19/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_19/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_19/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_19/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_19/moving_variance"
}
node {
  name: "batch_normalization_19/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_19/moving_variance"
  input: "batch_normalization_19/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_19/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_19/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_19/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_19/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_19/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_19/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_19/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_19/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_19/gamma"
  input: "batch_normalization_19/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_19/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_19/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_19/beta"
  input: "batch_normalization_19/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_19/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_19/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/cond/Const"
  op: "Const"
  input: "^batch_normalization_19/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_19/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_19/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_19/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "re_lu_1_2/Relu"
  input: "batch_normalization_19/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1_2/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_19/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_19/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_19/cond/ReadVariableOp"
  input: "batch_normalization_19/cond/ReadVariableOp_1"
  input: "batch_normalization_19/cond/Const"
  input: "batch_normalization_19/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_19/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_19/gamma"
  input: "batch_normalization_19/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_19/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_19/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_19/beta"
  input: "batch_normalization_19/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_19/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_19/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_19/moving_mean"
  input: "batch_normalization_19/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_19/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_19/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_19/moving_variance"
  input: "batch_normalization_19/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_19/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_19/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "re_lu_1_2/Relu"
  input: "batch_normalization_19/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1_2/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_19/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_19/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_19/cond/ReadVariableOp_2"
  input: "batch_normalization_19/cond/ReadVariableOp_3"
  input: "batch_normalization_19/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_19/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_19/cond/Merge"
  op: "Merge"
  input: "batch_normalization_19/cond/FusedBatchNorm_1"
  input: "batch_normalization_19/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_19/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_19/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_19/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_19/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_19/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_19/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_19/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_19/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_19/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_19/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_19/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_19/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_19/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_19/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_19/cond_1/Const_1"
  input: "batch_normalization_19/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_19/AssignMovingAvg/sub/x"
  input: "batch_normalization_19/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_19/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_19/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_19/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_19/AssignMovingAvg/sub_1"
  input: "batch_normalization_19/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_19/moving_mean"
  input: "batch_normalization_19/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_19/moving_mean"
  input: "^batch_normalization_19/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_19/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_19/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_19/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_19/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_19/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_19/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_19/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_19/moving_variance"
  input: "batch_normalization_19/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_19/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_19/moving_variance"
  input: "^batch_normalization_19/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_4/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_4/cond/switch_t"
  op: "Identity"
  input: "dropout_4/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_4/cond/switch_f"
  op: "Identity"
  input: "dropout_4/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_4/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_4/cond/dropout/rate"
  op: "Const"
  input: "^dropout_4/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout_4/cond/dropout/Shape/Switch"
  op: "Switch"
  input: "batch_normalization_19/cond/Merge"
  input: "dropout_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/cond/Merge"
      }
    }
  }
}
node {
  name: "dropout_4/cond/dropout/Shape"
  op: "Shape"
  input: "dropout_4/cond/dropout/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "dropout_4/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^dropout_4/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_4/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^dropout_4/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_4/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_4/cond/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout_4/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_4/cond/dropout/random_uniform/max"
  input: "dropout_4/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_4/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_4/cond/dropout/random_uniform/RandomUniform"
  input: "dropout_4/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_4/cond/dropout/random_uniform"
  op: "Add"
  input: "dropout_4/cond/dropout/random_uniform/mul"
  input: "dropout_4/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_4/cond/dropout/sub/x"
  op: "Const"
  input: "^dropout_4/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_4/cond/dropout/sub"
  op: "Sub"
  input: "dropout_4/cond/dropout/sub/x"
  input: "dropout_4/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_4/cond/dropout/truediv/x"
  op: "Const"
  input: "^dropout_4/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_4/cond/dropout/truediv"
  op: "RealDiv"
  input: "dropout_4/cond/dropout/truediv/x"
  input: "dropout_4/cond/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_4/cond/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout_4/cond/dropout/random_uniform"
  input: "dropout_4/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_4/cond/dropout/mul"
  op: "Mul"
  input: "dropout_4/cond/dropout/Shape/Switch:1"
  input: "dropout_4/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_4/cond/dropout/Cast"
  op: "Cast"
  input: "dropout_4/cond/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "dropout_4/cond/dropout/mul_1"
  op: "Mul"
  input: "dropout_4/cond/dropout/mul"
  input: "dropout_4/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_4/cond/Identity/Switch"
  op: "Switch"
  input: "batch_normalization_19/cond/Merge"
  input: "dropout_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_19/cond/Merge"
      }
    }
  }
}
node {
  name: "dropout_4/cond/Identity"
  op: "Identity"
  input: "dropout_4/cond/Identity/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_4/cond/Merge"
  op: "Merge"
  input: "dropout_4/cond/Identity"
  input: "dropout_4/cond/dropout/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concatenate_6/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concatenate_6/concat"
  op: "ConcatV2"
  input: "conv2d_10/BiasAdd"
  input: "dropout_4/cond/Merge"
  input: "concatenate_6/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_8/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06123724207282066
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06123724207282066
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_8/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_transpose_8/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_8/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_8/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_8/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_8/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_8/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_8/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_8/kernel"
    }
  }
}
node {
  name: "conv2d_transpose_8/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_8/kernel"
}
node {
  name: "conv2d_transpose_8/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_8/kernel"
  input: "conv2d_transpose_8/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_8/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_8/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_8/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_8/bias"
    }
  }
}
node {
  name: "conv2d_transpose_8/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_8/bias"
}
node {
  name: "conv2d_transpose_8/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_8/bias"
  input: "conv2d_transpose_8/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_8/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_8/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_8/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_8/Shape"
  op: "Shape"
  input: "concatenate_6/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_8/Shape"
  input: "conv2d_transpose_8/strided_slice/stack"
  input: "conv2d_transpose_8/strided_slice/stack_1"
  input: "conv2d_transpose_8/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_8/Shape"
  input: "conv2d_transpose_8/strided_slice_1/stack"
  input: "conv2d_transpose_8/strided_slice_1/stack_1"
  input: "conv2d_transpose_8/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_8/Shape"
  input: "conv2d_transpose_8/strided_slice_2/stack"
  input: "conv2d_transpose_8/strided_slice_2/stack_1"
  input: "conv2d_transpose_8/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_8/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/mul"
  op: "Mul"
  input: "conv2d_transpose_8/strided_slice_1"
  input: "conv2d_transpose_8/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_8/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/mul_1"
  op: "Mul"
  input: "conv2d_transpose_8/strided_slice_2"
  input: "conv2d_transpose_8/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_8/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/stack"
  op: "Pack"
  input: "conv2d_transpose_8/strided_slice"
  input: "conv2d_transpose_8/mul"
  input: "conv2d_transpose_8/mul_1"
  input: "conv2d_transpose_8/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_8/strided_slice_3"
  op: "StridedSlice"
  input: "conv2d_transpose_8/stack"
  input: "conv2d_transpose_8/strided_slice_3/stack"
  input: "conv2d_transpose_8/strided_slice_3/stack_1"
  input: "conv2d_transpose_8/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_8/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_8/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_8/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_8/stack"
  input: "conv2d_transpose_8/conv2d_transpose/ReadVariableOp"
  input: "concatenate_6/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_8/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_8/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_8/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_8/conv2d_transpose"
  input: "conv2d_transpose_8/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_1_3/Relu"
  op: "Relu"
  input: "conv2d_transpose_8/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_20/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_20/gamma"
    }
  }
}
node {
  name: "batch_normalization_20/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_20/gamma"
}
node {
  name: "batch_normalization_20/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_20/gamma"
  input: "batch_normalization_20/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_20/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_20/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_20/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_20/beta"
    }
  }
}
node {
  name: "batch_normalization_20/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_20/beta"
}
node {
  name: "batch_normalization_20/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_20/beta"
  input: "batch_normalization_20/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_20/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_20/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_20/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_20/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_20/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_20/moving_mean"
}
node {
  name: "batch_normalization_20/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_20/moving_mean"
  input: "batch_normalization_20/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_20/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_20/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_20/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_20/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_20/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_20/moving_variance"
}
node {
  name: "batch_normalization_20/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_20/moving_variance"
  input: "batch_normalization_20/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_20/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_20/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_20/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_20/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_20/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_20/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_20/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_20/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_20/gamma"
  input: "batch_normalization_20/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_20/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_20/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_20/beta"
  input: "batch_normalization_20/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_20/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_20/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/cond/Const"
  op: "Const"
  input: "^batch_normalization_20/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_20/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_20/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_20/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "re_lu_1_3/Relu"
  input: "batch_normalization_20/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1_3/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_20/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_20/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_20/cond/ReadVariableOp"
  input: "batch_normalization_20/cond/ReadVariableOp_1"
  input: "batch_normalization_20/cond/Const"
  input: "batch_normalization_20/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_20/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_20/gamma"
  input: "batch_normalization_20/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_20/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_20/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_20/beta"
  input: "batch_normalization_20/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_20/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_20/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_20/moving_mean"
  input: "batch_normalization_20/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_20/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_20/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_20/moving_variance"
  input: "batch_normalization_20/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_20/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_20/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "re_lu_1_3/Relu"
  input: "batch_normalization_20/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1_3/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_20/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_20/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_20/cond/ReadVariableOp_2"
  input: "batch_normalization_20/cond/ReadVariableOp_3"
  input: "batch_normalization_20/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_20/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_20/cond/Merge"
  op: "Merge"
  input: "batch_normalization_20/cond/FusedBatchNorm_1"
  input: "batch_normalization_20/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_20/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_20/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_20/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_20/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_20/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_20/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_20/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_20/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_20/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_20/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_20/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_20/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_20/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_20/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_20/cond_1/Const_1"
  input: "batch_normalization_20/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_20/AssignMovingAvg/sub/x"
  input: "batch_normalization_20/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_20/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_20/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_20/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_20/AssignMovingAvg/sub_1"
  input: "batch_normalization_20/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_20/moving_mean"
  input: "batch_normalization_20/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_20/moving_mean"
  input: "^batch_normalization_20/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_20/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_20/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_20/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_20/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_20/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_20/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_20/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_20/moving_variance"
  input: "batch_normalization_20/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_20/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_20/moving_variance"
  input: "^batch_normalization_20/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_5/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_5/cond/switch_t"
  op: "Identity"
  input: "dropout_5/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_5/cond/switch_f"
  op: "Identity"
  input: "dropout_5/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_5/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_5/cond/dropout/rate"
  op: "Const"
  input: "^dropout_5/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout_5/cond/dropout/Shape/Switch"
  op: "Switch"
  input: "batch_normalization_20/cond/Merge"
  input: "dropout_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/cond/Merge"
      }
    }
  }
}
node {
  name: "dropout_5/cond/dropout/Shape"
  op: "Shape"
  input: "dropout_5/cond/dropout/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "dropout_5/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^dropout_5/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_5/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^dropout_5/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_5/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_5/cond/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout_5/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_5/cond/dropout/random_uniform/max"
  input: "dropout_5/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_5/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_5/cond/dropout/random_uniform/RandomUniform"
  input: "dropout_5/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_5/cond/dropout/random_uniform"
  op: "Add"
  input: "dropout_5/cond/dropout/random_uniform/mul"
  input: "dropout_5/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_5/cond/dropout/sub/x"
  op: "Const"
  input: "^dropout_5/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_5/cond/dropout/sub"
  op: "Sub"
  input: "dropout_5/cond/dropout/sub/x"
  input: "dropout_5/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_5/cond/dropout/truediv/x"
  op: "Const"
  input: "^dropout_5/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_5/cond/dropout/truediv"
  op: "RealDiv"
  input: "dropout_5/cond/dropout/truediv/x"
  input: "dropout_5/cond/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_5/cond/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout_5/cond/dropout/random_uniform"
  input: "dropout_5/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_5/cond/dropout/mul"
  op: "Mul"
  input: "dropout_5/cond/dropout/Shape/Switch:1"
  input: "dropout_5/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_5/cond/dropout/Cast"
  op: "Cast"
  input: "dropout_5/cond/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "dropout_5/cond/dropout/mul_1"
  op: "Mul"
  input: "dropout_5/cond/dropout/mul"
  input: "dropout_5/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_5/cond/Identity/Switch"
  op: "Switch"
  input: "batch_normalization_20/cond/Merge"
  input: "dropout_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_20/cond/Merge"
      }
    }
  }
}
node {
  name: "dropout_5/cond/Identity"
  op: "Identity"
  input: "dropout_5/cond/Identity/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_5/cond/Merge"
  op: "Merge"
  input: "dropout_5/cond/Identity"
  input: "dropout_5/cond/dropout/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concatenate_7/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concatenate_7/concat"
  op: "ConcatV2"
  input: "conv2d_9/BiasAdd"
  input: "dropout_5/cond/Merge"
  input: "concatenate_7/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_9/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000 \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_9/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_transpose_9/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_9/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_9/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_9/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_9/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_9/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_9/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_9/kernel"
    }
  }
}
node {
  name: "conv2d_transpose_9/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_9/kernel"
}
node {
  name: "conv2d_transpose_9/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_9/kernel"
  input: "conv2d_transpose_9/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_9/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_9/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_9/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_9/bias"
    }
  }
}
node {
  name: "conv2d_transpose_9/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_9/bias"
}
node {
  name: "conv2d_transpose_9/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_9/bias"
  input: "conv2d_transpose_9/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_9/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_9/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_9/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_9/Shape"
  op: "Shape"
  input: "concatenate_7/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_9/Shape"
  input: "conv2d_transpose_9/strided_slice/stack"
  input: "conv2d_transpose_9/strided_slice/stack_1"
  input: "conv2d_transpose_9/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_9/Shape"
  input: "conv2d_transpose_9/strided_slice_1/stack"
  input: "conv2d_transpose_9/strided_slice_1/stack_1"
  input: "conv2d_transpose_9/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_9/Shape"
  input: "conv2d_transpose_9/strided_slice_2/stack"
  input: "conv2d_transpose_9/strided_slice_2/stack_1"
  input: "conv2d_transpose_9/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_9/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/mul"
  op: "Mul"
  input: "conv2d_transpose_9/strided_slice_1"
  input: "conv2d_transpose_9/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_9/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/mul_1"
  op: "Mul"
  input: "conv2d_transpose_9/strided_slice_2"
  input: "conv2d_transpose_9/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_9/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/stack"
  op: "Pack"
  input: "conv2d_transpose_9/strided_slice"
  input: "conv2d_transpose_9/mul"
  input: "conv2d_transpose_9/mul_1"
  input: "conv2d_transpose_9/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_9/strided_slice_3"
  op: "StridedSlice"
  input: "conv2d_transpose_9/stack"
  input: "conv2d_transpose_9/strided_slice_3/stack"
  input: "conv2d_transpose_9/strided_slice_3/stack_1"
  input: "conv2d_transpose_9/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_9/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_9/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_9/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_9/stack"
  input: "conv2d_transpose_9/conv2d_transpose/ReadVariableOp"
  input: "concatenate_7/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_9/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_9/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_9/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_9/conv2d_transpose"
  input: "conv2d_transpose_9/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_1_4/Relu"
  op: "Relu"
  input: "conv2d_transpose_9/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_21/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_21/gamma"
    }
  }
}
node {
  name: "batch_normalization_21/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_21/gamma"
}
node {
  name: "batch_normalization_21/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_21/gamma"
  input: "batch_normalization_21/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_21/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_21/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_21/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_21/beta"
    }
  }
}
node {
  name: "batch_normalization_21/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_21/beta"
}
node {
  name: "batch_normalization_21/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_21/beta"
  input: "batch_normalization_21/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_21/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_21/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_21/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_21/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_21/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_21/moving_mean"
}
node {
  name: "batch_normalization_21/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_21/moving_mean"
  input: "batch_normalization_21/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_21/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_21/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_21/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_21/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_21/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_21/moving_variance"
}
node {
  name: "batch_normalization_21/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_21/moving_variance"
  input: "batch_normalization_21/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_21/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_21/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_21/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_21/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_21/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_21/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_21/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_21/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_21/gamma"
  input: "batch_normalization_21/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_21/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_21/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_21/beta"
  input: "batch_normalization_21/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_21/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_21/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/cond/Const"
  op: "Const"
  input: "^batch_normalization_21/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_21/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_21/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_21/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "re_lu_1_4/Relu"
  input: "batch_normalization_21/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1_4/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_21/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_21/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_21/cond/ReadVariableOp"
  input: "batch_normalization_21/cond/ReadVariableOp_1"
  input: "batch_normalization_21/cond/Const"
  input: "batch_normalization_21/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_21/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_21/gamma"
  input: "batch_normalization_21/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_21/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_21/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_21/beta"
  input: "batch_normalization_21/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_21/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_21/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_21/moving_mean"
  input: "batch_normalization_21/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_21/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_21/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_21/moving_variance"
  input: "batch_normalization_21/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_21/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_21/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "re_lu_1_4/Relu"
  input: "batch_normalization_21/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1_4/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_21/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_21/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_21/cond/ReadVariableOp_2"
  input: "batch_normalization_21/cond/ReadVariableOp_3"
  input: "batch_normalization_21/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_21/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_21/cond/Merge"
  op: "Merge"
  input: "batch_normalization_21/cond/FusedBatchNorm_1"
  input: "batch_normalization_21/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_21/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_21/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_21/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_21/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_21/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_21/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_21/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_21/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_21/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_21/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_21/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_21/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_21/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_21/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_21/cond_1/Const_1"
  input: "batch_normalization_21/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_21/AssignMovingAvg/sub/x"
  input: "batch_normalization_21/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_21/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_21/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_21/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_21/AssignMovingAvg/sub_1"
  input: "batch_normalization_21/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_21/moving_mean"
  input: "batch_normalization_21/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_21/moving_mean"
  input: "^batch_normalization_21/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_21/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_21/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_21/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_21/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_21/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_21/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_21/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_21/moving_variance"
  input: "batch_normalization_21/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_21/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_21/moving_variance"
  input: "^batch_normalization_21/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_21/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concatenate_8/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concatenate_8/concat"
  op: "ConcatV2"
  input: "conv2d_8/BiasAdd"
  input: "batch_normalization_21/cond/Merge"
  input: "concatenate_8/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_10/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.12247448414564133
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.12247448414564133
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_10/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_transpose_10/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_10/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_10/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_10/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_10/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_10/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_10/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_10/kernel"
    }
  }
}
node {
  name: "conv2d_transpose_10/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_10/kernel"
}
node {
  name: "conv2d_transpose_10/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_10/kernel"
  input: "conv2d_transpose_10/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_10/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_10/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_10/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_10/bias"
    }
  }
}
node {
  name: "conv2d_transpose_10/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_10/bias"
}
node {
  name: "conv2d_transpose_10/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_10/bias"
  input: "conv2d_transpose_10/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_10/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_10/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_10/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_10/Shape"
  op: "Shape"
  input: "concatenate_8/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_10/Shape"
  input: "conv2d_transpose_10/strided_slice/stack"
  input: "conv2d_transpose_10/strided_slice/stack_1"
  input: "conv2d_transpose_10/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_10/Shape"
  input: "conv2d_transpose_10/strided_slice_1/stack"
  input: "conv2d_transpose_10/strided_slice_1/stack_1"
  input: "conv2d_transpose_10/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_10/Shape"
  input: "conv2d_transpose_10/strided_slice_2/stack"
  input: "conv2d_transpose_10/strided_slice_2/stack_1"
  input: "conv2d_transpose_10/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_10/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/mul"
  op: "Mul"
  input: "conv2d_transpose_10/strided_slice_1"
  input: "conv2d_transpose_10/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_10/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/mul_1"
  op: "Mul"
  input: "conv2d_transpose_10/strided_slice_2"
  input: "conv2d_transpose_10/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_10/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/stack"
  op: "Pack"
  input: "conv2d_transpose_10/strided_slice"
  input: "conv2d_transpose_10/mul"
  input: "conv2d_transpose_10/mul_1"
  input: "conv2d_transpose_10/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_10/strided_slice_3"
  op: "StridedSlice"
  input: "conv2d_transpose_10/stack"
  input: "conv2d_transpose_10/strided_slice_3/stack"
  input: "conv2d_transpose_10/strided_slice_3/stack_1"
  input: "conv2d_transpose_10/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_10/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_10/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_10/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_10/stack"
  input: "conv2d_transpose_10/conv2d_transpose/ReadVariableOp"
  input: "concatenate_8/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_10/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_10/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_10/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_10/conv2d_transpose"
  input: "conv2d_transpose_10/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_1_5/Relu"
  op: "Relu"
  input: "conv2d_transpose_10/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_22/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_22/gamma"
    }
  }
}
node {
  name: "batch_normalization_22/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_22/gamma"
}
node {
  name: "batch_normalization_22/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_22/gamma"
  input: "batch_normalization_22/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_22/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_22/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_22/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_22/beta"
    }
  }
}
node {
  name: "batch_normalization_22/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_22/beta"
}
node {
  name: "batch_normalization_22/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_22/beta"
  input: "batch_normalization_22/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_22/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_22/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_22/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_22/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_22/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_22/moving_mean"
}
node {
  name: "batch_normalization_22/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_22/moving_mean"
  input: "batch_normalization_22/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_22/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_22/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_22/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_22/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_22/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_22/moving_variance"
}
node {
  name: "batch_normalization_22/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_22/moving_variance"
  input: "batch_normalization_22/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_22/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_22/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_22/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_22/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_22/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_22/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_22/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_22/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_22/gamma"
  input: "batch_normalization_22/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_22/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_22/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_22/beta"
  input: "batch_normalization_22/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_22/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_22/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/cond/Const"
  op: "Const"
  input: "^batch_normalization_22/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_22/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_22/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_22/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "re_lu_1_5/Relu"
  input: "batch_normalization_22/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1_5/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_22/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_22/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_22/cond/ReadVariableOp"
  input: "batch_normalization_22/cond/ReadVariableOp_1"
  input: "batch_normalization_22/cond/Const"
  input: "batch_normalization_22/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_22/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_22/gamma"
  input: "batch_normalization_22/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_22/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_22/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_22/beta"
  input: "batch_normalization_22/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_22/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_22/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_22/moving_mean"
  input: "batch_normalization_22/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_22/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_22/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_22/moving_variance"
  input: "batch_normalization_22/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_22/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_22/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "re_lu_1_5/Relu"
  input: "batch_normalization_22/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1_5/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_22/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_22/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_22/cond/ReadVariableOp_2"
  input: "batch_normalization_22/cond/ReadVariableOp_3"
  input: "batch_normalization_22/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_22/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_22/cond/Merge"
  op: "Merge"
  input: "batch_normalization_22/cond/FusedBatchNorm_1"
  input: "batch_normalization_22/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_22/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_22/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_22/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_22/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_22/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_22/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_22/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_22/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_22/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_22/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_22/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_22/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_22/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_22/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_22/cond_1/Const_1"
  input: "batch_normalization_22/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_22/AssignMovingAvg/sub/x"
  input: "batch_normalization_22/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_22/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_22/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_22/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_22/AssignMovingAvg/sub_1"
  input: "batch_normalization_22/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_22/moving_mean"
  input: "batch_normalization_22/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_22/moving_mean"
  input: "^batch_normalization_22/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_22/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_22/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_22/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_22/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_22/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_22/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_22/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_22/moving_variance"
  input: "batch_normalization_22/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_22/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_22/moving_variance"
  input: "^batch_normalization_22/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_22/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concatenate_9/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concatenate_9/concat"
  op: "ConcatV2"
  input: "conv2d_7/BiasAdd"
  input: "batch_normalization_22/cond/Merge"
  input: "concatenate_9/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_11/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4898979365825653
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4898979365825653
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_11/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_transpose_11/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_11/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_11/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_11/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_11/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_11/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_11/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_11/kernel"
    }
  }
}
node {
  name: "conv2d_transpose_11/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_11/kernel"
}
node {
  name: "conv2d_transpose_11/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_11/kernel"
  input: "conv2d_transpose_11/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_11/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_11/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_11/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_transpose_11/bias"
    }
  }
}
node {
  name: "conv2d_transpose_11/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_transpose_11/bias"
}
node {
  name: "conv2d_transpose_11/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_transpose_11/bias"
  input: "conv2d_transpose_11/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_transpose_11/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_11/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_11/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_11/Shape"
  op: "Shape"
  input: "concatenate_9/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_11/Shape"
  input: "conv2d_transpose_11/strided_slice/stack"
  input: "conv2d_transpose_11/strided_slice/stack_1"
  input: "conv2d_transpose_11/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_11/Shape"
  input: "conv2d_transpose_11/strided_slice_1/stack"
  input: "conv2d_transpose_11/strided_slice_1/stack_1"
  input: "conv2d_transpose_11/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_11/Shape"
  input: "conv2d_transpose_11/strided_slice_2/stack"
  input: "conv2d_transpose_11/strided_slice_2/stack_1"
  input: "conv2d_transpose_11/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_11/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/mul"
  op: "Mul"
  input: "conv2d_transpose_11/strided_slice_1"
  input: "conv2d_transpose_11/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_11/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/mul_1"
  op: "Mul"
  input: "conv2d_transpose_11/strided_slice_2"
  input: "conv2d_transpose_11/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_11/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/stack"
  op: "Pack"
  input: "conv2d_transpose_11/strided_slice"
  input: "conv2d_transpose_11/mul"
  input: "conv2d_transpose_11/mul_1"
  input: "conv2d_transpose_11/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_11/strided_slice_3"
  op: "StridedSlice"
  input: "conv2d_transpose_11/stack"
  input: "conv2d_transpose_11/strided_slice_3/stack"
  input: "conv2d_transpose_11/strided_slice_3/stack_1"
  input: "conv2d_transpose_11/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_11/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_11/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_11/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_11/stack"
  input: "conv2d_transpose_11/conv2d_transpose/ReadVariableOp"
  input: "concatenate_9/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_11/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_transpose_11/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_11/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_11/conv2d_transpose"
  input: "conv2d_transpose_11/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_1_6/Relu"
  op: "Relu"
  input: "conv2d_transpose_11/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_23/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_23/gamma"
    }
  }
}
node {
  name: "batch_normalization_23/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_23/gamma"
}
node {
  name: "batch_normalization_23/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_23/gamma"
  input: "batch_normalization_23/gamma/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_23/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_23/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_23/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_23/beta"
    }
  }
}
node {
  name: "batch_normalization_23/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_23/beta"
}
node {
  name: "batch_normalization_23/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_23/beta"
  input: "batch_normalization_23/beta/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_23/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_23/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_23/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_23/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_23/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_23/moving_mean"
}
node {
  name: "batch_normalization_23/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_23/moving_mean"
  input: "batch_normalization_23/moving_mean/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_23/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_23/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_23/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_23/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_23/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_23/moving_variance"
}
node {
  name: "batch_normalization_23/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_23/moving_variance"
  input: "batch_normalization_23/moving_variance/Initializer/ones"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_23/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_23/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_23/cond/switch_t"
  op: "Identity"
  input: "batch_normalization_23/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_23/cond/switch_f"
  op: "Identity"
  input: "batch_normalization_23/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_23/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_23/cond/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_23/gamma"
  input: "batch_normalization_23/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_23/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_23/cond/ReadVariableOp/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/cond/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_23/beta"
  input: "batch_normalization_23/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_23/cond/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_23/cond/ReadVariableOp_1/Switch:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/cond/Const"
  op: "Const"
  input: "^batch_normalization_23/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_23/cond/Const_1"
  op: "Const"
  input: "^batch_normalization_23/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_23/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "re_lu_1_6/Relu"
  input: "batch_normalization_23/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1_6/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_23/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "batch_normalization_23/cond/FusedBatchNorm/Switch:1"
  input: "batch_normalization_23/cond/ReadVariableOp"
  input: "batch_normalization_23/cond/ReadVariableOp_1"
  input: "batch_normalization_23/cond/Const"
  input: "batch_normalization_23/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_23/cond/ReadVariableOp_2/Switch"
  op: "Switch"
  input: "batch_normalization_23/gamma"
  input: "batch_normalization_23/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_23/cond/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_23/cond/ReadVariableOp_2/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/cond/ReadVariableOp_3/Switch"
  op: "Switch"
  input: "batch_normalization_23/beta"
  input: "batch_normalization_23/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_23/cond/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_23/cond/ReadVariableOp_3/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  op: "Switch"
  input: "batch_normalization_23/moving_mean"
  input: "batch_normalization_23/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_23/cond/FusedBatchNorm_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_23/cond/FusedBatchNorm_1/ReadVariableOp/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  op: "Switch"
  input: "batch_normalization_23/moving_variance"
  input: "batch_normalization_23/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_23/cond/FusedBatchNorm_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_23/cond/FusedBatchNorm_1/ReadVariableOp_1/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "re_lu_1_6/Relu"
  input: "batch_normalization_23/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@re_lu_1_6/Relu"
      }
    }
  }
}
node {
  name: "batch_normalization_23/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "batch_normalization_23/cond/FusedBatchNorm_1/Switch"
  input: "batch_normalization_23/cond/ReadVariableOp_2"
  input: "batch_normalization_23/cond/ReadVariableOp_3"
  input: "batch_normalization_23/cond/FusedBatchNorm_1/ReadVariableOp"
  input: "batch_normalization_23/cond/FusedBatchNorm_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_23/cond/Merge"
  op: "Merge"
  input: "batch_normalization_23/cond/FusedBatchNorm_1"
  input: "batch_normalization_23/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/cond/Merge_1"
  op: "Merge"
  input: "batch_normalization_23/cond/FusedBatchNorm_1:1"
  input: "batch_normalization_23/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/cond/Merge_2"
  op: "Merge"
  input: "batch_normalization_23/cond/FusedBatchNorm_1:2"
  input: "batch_normalization_23/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/cond_1/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_23/cond_1/switch_t"
  op: "Identity"
  input: "batch_normalization_23/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_23/cond_1/switch_f"
  op: "Identity"
  input: "batch_normalization_23/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_23/cond_1/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "batch_normalization_23/cond_1/Const"
  op: "Const"
  input: "^batch_normalization_23/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "batch_normalization_23/cond_1/Const_1"
  op: "Const"
  input: "^batch_normalization_23/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_23/cond_1/Merge"
  op: "Merge"
  input: "batch_normalization_23/cond_1/Const_1"
  input: "batch_normalization_23/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_23/AssignMovingAvg/sub/x"
  input: "batch_normalization_23/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_23/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_23/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_23/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_23/AssignMovingAvg/sub_1"
  input: "batch_normalization_23/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_23/moving_mean"
  input: "batch_normalization_23/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_23/moving_mean"
  input: "^batch_normalization_23/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_23/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_23/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_23/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_23/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_23/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_23/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_23/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_23/moving_variance"
  input: "batch_normalization_23/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_23/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_23/moving_variance"
  input: "^batch_normalization_23/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_23/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.6123724579811096
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6123724579811096
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_13/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 50
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_13/kernel/Initializer/random_uniform/max"
  input: "conv2d_13/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_13/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_13/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_13/kernel/Initializer/random_uniform/mul"
  input: "conv2d_13/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
}
node {
  name: "conv2d_13/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_13/kernel"
    }
  }
}
node {
  name: "conv2d_13/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_13/kernel"
}
node {
  name: "conv2d_13/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_13/kernel"
  input: "conv2d_13/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_13/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_13/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_13/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_13/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_13/bias"
    }
  }
}
node {
  name: "conv2d_13/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_13/bias"
}
node {
  name: "conv2d_13/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_13/bias"
  input: "conv2d_13/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_13/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_13/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_13/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/filter_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "batch_normalization_23/cond/Merge"
  input: "conv2d_13/SpaceToBatchND/block_shape"
  input: "conv2d_13/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_13/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_13/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_13/Conv2D"
  op: "Conv2D"
  input: "conv2d_13/SpaceToBatchND"
  input: "conv2d_13/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_13/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "conv2d_13/Conv2D"
  input: "conv2d_13/BatchToSpaceND/block_shape"
  input: "conv2d_13/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_13/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_13/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_13/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_13/BatchToSpaceND"
  input: "conv2d_13/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_13/Sigmoid"
  op: "Sigmoid"
  input: "conv2d_13/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accompaniment_spectrogram/mul"
  op: "Mul"
  input: "conv2d_13/Sigmoid"
  input: "strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "pow"
  op: "Pow"
  input: "vocals_spectrogram/mul"
  input: "pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "pow_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "pow_1"
  op: "Pow"
  input: "accompaniment_spectrogram/mul"
  input: "pow_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Sum/input"
  op: "Pack"
  input: "pow"
  input: "pow_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "Sum/input"
  input: "Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.000000013351432e-10
      }
    }
  }
}
node {
  name: "add_1"
  op: "Add"
  input: "Sum"
  input: "add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "pow_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "pow_2"
  op: "Pow"
  input: "vocals_spectrogram/mul"
  input: "pow_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.00000006675716e-11
      }
    }
  }
}
node {
  name: "add_2"
  op: "Add"
  input: "pow_2"
  input: "add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "add_2"
  input: "add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Shape_3"
  op: "Shape"
  input: "truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4"
  op: "StridedSlice"
  input: "Shape_3"
  input: "strided_slice_4/stack"
  input: "strided_slice_4/stack_1"
  input: "strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5"
  op: "StridedSlice"
  input: "Shape_3"
  input: "strided_slice_5/stack"
  input: "strided_slice_5/stack_1"
  input: "strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_6"
  op: "StridedSlice"
  input: "Shape_3"
  input: "strided_slice_6/stack"
  input: "strided_slice_6/stack_1"
  input: "strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "zeros/mul"
  op: "Mul"
  input: "strided_slice_4"
  input: "strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "zeros/mul_1"
  op: "Mul"
  input: "zeros/mul"
  input: "zeros/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros/mul_2"
  op: "Mul"
  input: "zeros/mul_1"
  input: "strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros/Less"
  op: "Less"
  input: "zeros/mul_2"
  input: "zeros/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros/packed/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "zeros/packed"
  op: "Pack"
  input: "strided_slice_4"
  input: "strided_slice_5"
  input: "zeros/packed/2"
  input: "strided_slice_6"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros"
  op: "Fill"
  input: "zeros/packed"
  input: "zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\004\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Tile"
  op: "Tile"
  input: "zeros"
  input: "Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "truediv"
  input: "Tile"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_4"
  op: "Shape"
  input: "concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_7"
  op: "StridedSlice"
  input: "Shape_4"
  input: "strided_slice_7/stack"
  input: "strided_slice_7/stack_1"
  input: "strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_8"
  op: "StridedSlice"
  input: "Shape_4"
  input: "strided_slice_8/stack"
  input: "strided_slice_8/stack_1"
  input: "strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "strided_slice_7"
  input: "strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_9"
  op: "StridedSlice"
  input: "Shape_4"
  input: "strided_slice_9/stack"
  input: "strided_slice_9/stack_1"
  input: "strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "concat_2/values_0"
  op: "Pack"
  input: "mul"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_2"
  op: "ConcatV2"
  input: "concat_2/values_0"
  input: "strided_slice_9"
  input: "concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "concat_1"
  input: "concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_5"
  op: "Shape"
  input: "transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_10"
  op: "StridedSlice"
  input: "Shape_5"
  input: "strided_slice_10/stack"
  input: "strided_slice_10/stack_1"
  input: "strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_11/stack_1/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_11/stack_1"
  op: "Pack"
  input: "strided_slice_10"
  input: "strided_slice_11/stack_1/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_11"
  op: "StridedSlice"
  input: "Reshape_1"
  input: "strided_slice_11/stack"
  input: "strided_slice_11/stack_1"
  input: "strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "strided_slice_11"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "Cast"
  input: "transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_2"
  op: "Transpose"
  input: "mul_1"
  input: "transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/frame_length"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "inverse_stft/frame_step"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "inverse_stft/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "inverse_stft/irfft/packed"
  op: "Pack"
  input: "inverse_stft/Const"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/irfft"
  op: "IRFFT"
  input: "transpose_2"
  input: "inverse_stft/irfft/packed"
  attr {
    key: "Tcomplex"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Treal"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft/hann_window/periodic"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "inverse_stft/hann_window/Cast"
  op: "Cast"
  input: "inverse_stft/hann_window/periodic"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "inverse_stft/hann_window/FloorMod/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "inverse_stft/hann_window/FloorMod"
  op: "FloorMod"
  input: "inverse_stft/frame_length"
  input: "inverse_stft/hann_window/FloorMod/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/hann_window/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft/hann_window/sub"
  op: "Sub"
  input: "inverse_stft/hann_window/sub/x"
  input: "inverse_stft/hann_window/FloorMod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/hann_window/mul"
  op: "Mul"
  input: "inverse_stft/hann_window/Cast"
  input: "inverse_stft/hann_window/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/hann_window/add"
  op: "Add"
  input: "inverse_stft/frame_length"
  input: "inverse_stft/hann_window/mul"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/hann_window/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft/hann_window/sub_1"
  op: "Sub"
  input: "inverse_stft/hann_window/add"
  input: "inverse_stft/hann_window/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/hann_window/Cast_1"
  op: "Cast"
  input: "inverse_stft/hann_window/sub_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "inverse_stft/hann_window/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/hann_window/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft/hann_window/range"
  op: "Range"
  input: "inverse_stft/hann_window/range/start"
  input: "inverse_stft/frame_length"
  input: "inverse_stft/hann_window/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/hann_window/Cast_2"
  op: "Cast"
  input: "inverse_stft/hann_window/range"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "inverse_stft/hann_window/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.2831854820251465
      }
    }
  }
}
node {
  name: "inverse_stft/hann_window/mul_1"
  op: "Mul"
  input: "inverse_stft/hann_window/Const"
  input: "inverse_stft/hann_window/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft/hann_window/truediv"
  op: "RealDiv"
  input: "inverse_stft/hann_window/mul_1"
  input: "inverse_stft/hann_window/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft/hann_window/Cos"
  op: "Cos"
  input: "inverse_stft/hann_window/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft/hann_window/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "inverse_stft/hann_window/mul_2"
  op: "Mul"
  input: "inverse_stft/hann_window/mul_2/x"
  input: "inverse_stft/hann_window/Cos"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft/hann_window/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "inverse_stft/hann_window/sub_2"
  op: "Sub"
  input: "inverse_stft/hann_window/sub_2/x"
  input: "inverse_stft/hann_window/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft/mul"
  op: "Mul"
  input: "inverse_stft/irfft"
  input: "inverse_stft/hann_window/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/Shape"
  op: "Shape"
  input: "inverse_stft/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice"
  op: "StridedSlice"
  input: "inverse_stft/overlap_and_add/Shape"
  input: "inverse_stft/overlap_and_add/strided_slice/stack"
  input: "inverse_stft/overlap_and_add/strided_slice/stack_1"
  input: "inverse_stft/overlap_and_add/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_1"
  op: "StridedSlice"
  input: "inverse_stft/overlap_and_add/Shape"
  input: "inverse_stft/overlap_and_add/strided_slice_1/stack"
  input: "inverse_stft/overlap_and_add/strided_slice_1/stack_1"
  input: "inverse_stft/overlap_and_add/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_2"
  op: "StridedSlice"
  input: "inverse_stft/overlap_and_add/Shape"
  input: "inverse_stft/overlap_and_add/strided_slice_2/stack"
  input: "inverse_stft/overlap_and_add/strided_slice_2/stack_1"
  input: "inverse_stft/overlap_and_add/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/sub"
  op: "Sub"
  input: "inverse_stft/overlap_and_add/strided_slice_2"
  input: "inverse_stft/overlap_and_add/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/mul"
  op: "Mul"
  input: "inverse_stft/frame_step"
  input: "inverse_stft/overlap_and_add/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/add"
  op: "Add"
  input: "inverse_stft/overlap_and_add/strided_slice_1"
  input: "inverse_stft/overlap_and_add/mul"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/Neg"
  op: "Neg"
  input: "inverse_stft/overlap_and_add/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/floordiv"
  op: "FloorDiv"
  input: "inverse_stft/overlap_and_add/Neg"
  input: "inverse_stft/frame_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/Neg_1"
  op: "Neg"
  input: "inverse_stft/overlap_and_add/floordiv"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/mul_1"
  op: "Mul"
  input: "inverse_stft/overlap_and_add/Neg_1"
  input: "inverse_stft/frame_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/sub_1"
  op: "Sub"
  input: "inverse_stft/overlap_and_add/mul_1"
  input: "inverse_stft/overlap_and_add/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/zeros/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/zeros/mul"
  op: "Mul"
  input: "inverse_stft/overlap_and_add/Size"
  input: "inverse_stft/overlap_and_add/zeros/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/zeros/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/zeros/Less"
  op: "Less"
  input: "inverse_stft/overlap_and_add/zeros/mul"
  input: "inverse_stft/overlap_and_add/zeros/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/zeros/packed/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/zeros/packed"
  op: "Pack"
  input: "inverse_stft/overlap_and_add/Size"
  input: "inverse_stft/overlap_and_add/zeros/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/zeros"
  op: "Fill"
  input: "inverse_stft/overlap_and_add/zeros/packed"
  input: "inverse_stft/overlap_and_add/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat/values_1/0/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat/values_1/0"
  op: "Pack"
  input: "inverse_stft/overlap_and_add/concat/values_1/0/0"
  input: "inverse_stft/overlap_and_add/Neg_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat/values_1/1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat/values_1/1"
  op: "Pack"
  input: "inverse_stft/overlap_and_add/concat/values_1/1/0"
  input: "inverse_stft/overlap_and_add/sub_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat/values_1"
  op: "Pack"
  input: "inverse_stft/overlap_and_add/concat/values_1/0"
  input: "inverse_stft/overlap_and_add/concat/values_1/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat"
  op: "ConcatV2"
  input: "inverse_stft/overlap_and_add/zeros"
  input: "inverse_stft/overlap_and_add/concat/values_1"
  input: "inverse_stft/overlap_and_add/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/Pad"
  op: "Pad"
  input: "inverse_stft/mul"
  input: "inverse_stft/overlap_and_add/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/add_1"
  op: "Add"
  input: "inverse_stft/overlap_and_add/strided_slice_2"
  input: "inverse_stft/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_1/values_1"
  op: "Pack"
  input: "inverse_stft/overlap_and_add/add_1"
  input: "inverse_stft/overlap_and_add/Neg_1"
  input: "inverse_stft/frame_step"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_1"
  op: "ConcatV2"
  input: "inverse_stft/overlap_and_add/strided_slice"
  input: "inverse_stft/overlap_and_add/concat_1/values_1"
  input: "inverse_stft/overlap_and_add/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/Reshape"
  op: "Reshape"
  input: "inverse_stft/overlap_and_add/Pad"
  input: "inverse_stft/overlap_and_add/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/range"
  op: "Range"
  input: "inverse_stft/overlap_and_add/range/start"
  input: "inverse_stft/overlap_and_add/Size"
  input: "inverse_stft/overlap_and_add/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/add_2"
  op: "Add"
  input: "inverse_stft/overlap_and_add/Size"
  input: "inverse_stft/overlap_and_add/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_2"
  op: "ConcatV2"
  input: "inverse_stft/overlap_and_add/range"
  input: "inverse_stft/overlap_and_add/add_2"
  input: "inverse_stft/overlap_and_add/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/transpose"
  op: "Transpose"
  input: "inverse_stft/overlap_and_add/Reshape"
  input: "inverse_stft/overlap_and_add/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/add_3"
  op: "Add"
  input: "inverse_stft/overlap_and_add/strided_slice_2"
  input: "inverse_stft/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/mul_2"
  op: "Mul"
  input: "inverse_stft/overlap_and_add/add_3"
  input: "inverse_stft/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_3/values_1"
  op: "Pack"
  input: "inverse_stft/overlap_and_add/mul_2"
  input: "inverse_stft/frame_step"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_3"
  op: "ConcatV2"
  input: "inverse_stft/overlap_and_add/strided_slice"
  input: "inverse_stft/overlap_and_add/concat_3/values_1"
  input: "inverse_stft/overlap_and_add/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/Reshape_1"
  op: "Reshape"
  input: "inverse_stft/overlap_and_add/transpose"
  input: "inverse_stft/overlap_and_add/concat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/add_4"
  op: "Add"
  input: "inverse_stft/overlap_and_add/strided_slice_2"
  input: "inverse_stft/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/sub_2"
  op: "Sub"
  input: "inverse_stft/overlap_and_add/add_4"
  input: "inverse_stft/overlap_and_add/sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/mul_3"
  op: "Mul"
  input: "inverse_stft/overlap_and_add/sub_2"
  input: "inverse_stft/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_3/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_3/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_3/stack_1"
  op: "Pack"
  input: "inverse_stft/overlap_and_add/strided_slice_3/stack_1/0"
  input: "inverse_stft/overlap_and_add/mul_3"
  input: "inverse_stft/overlap_and_add/strided_slice_3/stack_1/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_3"
  op: "StridedSlice"
  input: "inverse_stft/overlap_and_add/Reshape_1"
  input: "inverse_stft/overlap_and_add/strided_slice_3/stack"
  input: "inverse_stft/overlap_and_add/strided_slice_3/stack_1"
  input: "inverse_stft/overlap_and_add/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 6
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 4
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/add_5"
  op: "Add"
  input: "inverse_stft/overlap_and_add/strided_slice_2"
  input: "inverse_stft/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/sub_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/sub_3"
  op: "Sub"
  input: "inverse_stft/overlap_and_add/add_5"
  input: "inverse_stft/overlap_and_add/sub_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_4/values_1"
  op: "Pack"
  input: "inverse_stft/overlap_and_add/Neg_1"
  input: "inverse_stft/overlap_and_add/sub_3"
  input: "inverse_stft/frame_step"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_4/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_4"
  op: "ConcatV2"
  input: "inverse_stft/overlap_and_add/strided_slice"
  input: "inverse_stft/overlap_and_add/concat_4/values_1"
  input: "inverse_stft/overlap_and_add/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/Reshape_2"
  op: "Reshape"
  input: "inverse_stft/overlap_and_add/strided_slice_3"
  input: "inverse_stft/overlap_and_add/concat_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/Sum"
  op: "Sum"
  input: "inverse_stft/overlap_and_add/Reshape_2"
  input: "inverse_stft/overlap_and_add/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/add_6"
  op: "Add"
  input: "inverse_stft/overlap_and_add/strided_slice_2"
  input: "inverse_stft/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/sub_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/sub_4"
  op: "Sub"
  input: "inverse_stft/overlap_and_add/add_6"
  input: "inverse_stft/overlap_and_add/sub_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/mul_4"
  op: "Mul"
  input: "inverse_stft/overlap_and_add/sub_4"
  input: "inverse_stft/frame_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_5/values_1"
  op: "Pack"
  input: "inverse_stft/overlap_and_add/mul_4"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_5/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/concat_5"
  op: "ConcatV2"
  input: "inverse_stft/overlap_and_add/strided_slice"
  input: "inverse_stft/overlap_and_add/concat_5/values_1"
  input: "inverse_stft/overlap_and_add/concat_5/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/Reshape_3"
  op: "Reshape"
  input: "inverse_stft/overlap_and_add/Sum"
  input: "inverse_stft/overlap_and_add/concat_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_4/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_4/stack_1"
  op: "Pack"
  input: "inverse_stft/overlap_and_add/strided_slice_4/stack_1/0"
  input: "inverse_stft/overlap_and_add/add"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "inverse_stft/overlap_and_add/strided_slice_4"
  op: "StridedSlice"
  input: "inverse_stft/overlap_and_add/Reshape_3"
  input: "inverse_stft/overlap_and_add/strided_slice_4/stack"
  input: "inverse_stft/overlap_and_add/strided_slice_4/stack_1"
  input: "inverse_stft/overlap_and_add/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "mul_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6666666865348816
      }
    }
  }
}
node {
  name: "mul_2"
  op: "Mul"
  input: "inverse_stft/overlap_and_add/strided_slice_4"
  input: "mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_3"
  op: "Transpose"
  input: "mul_2"
  input: "transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_6"
  op: "Shape"
  input: "waveform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_12"
  op: "StridedSlice"
  input: "Shape_6"
  input: "strided_slice_12/stack"
  input: "strided_slice_12/stack_1"
  input: "strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_13/stack_1/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_13/stack_1"
  op: "Pack"
  input: "strided_slice_12"
  input: "strided_slice_13/stack_1/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_13"
  op: "StridedSlice"
  input: "transpose_3"
  input: "strided_slice_13/stack"
  input: "strided_slice_13/stack_1"
  input: "strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "pow_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "pow_3"
  op: "Pow"
  input: "accompaniment_spectrogram/mul"
  input: "pow_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.00000006675716e-11
      }
    }
  }
}
node {
  name: "add_3"
  op: "Add"
  input: "pow_3"
  input: "add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv_1"
  op: "RealDiv"
  input: "add_3"
  input: "add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Shape_7"
  op: "Shape"
  input: "truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_14/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_14/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_14/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_14"
  op: "StridedSlice"
  input: "Shape_7"
  input: "strided_slice_14/stack"
  input: "strided_slice_14/stack_1"
  input: "strided_slice_14/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_15/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_15/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_15/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_15"
  op: "StridedSlice"
  input: "Shape_7"
  input: "strided_slice_15/stack"
  input: "strided_slice_15/stack_1"
  input: "strided_slice_15/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_16/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "strided_slice_16/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_16/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_16"
  op: "StridedSlice"
  input: "Shape_7"
  input: "strided_slice_16/stack"
  input: "strided_slice_16/stack_1"
  input: "strided_slice_16/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "zeros_1/mul"
  op: "Mul"
  input: "strided_slice_14"
  input: "strided_slice_15"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "zeros_1/mul_1"
  op: "Mul"
  input: "zeros_1/mul"
  input: "zeros_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_1/mul_2"
  op: "Mul"
  input: "zeros_1/mul_1"
  input: "strided_slice_16"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_1/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros_1/Less"
  op: "Less"
  input: "zeros_1/mul_2"
  input: "zeros_1/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_1/packed/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "zeros_1/packed"
  op: "Pack"
  input: "strided_slice_14"
  input: "strided_slice_15"
  input: "zeros_1/packed/2"
  input: "strided_slice_16"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Fill"
  input: "zeros_1/packed"
  input: "zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\004\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Tile_1"
  op: "Tile"
  input: "zeros_1"
  input: "Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "concat_3"
  op: "ConcatV2"
  input: "truediv_1"
  input: "Tile_1"
  input: "concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_8"
  op: "Shape"
  input: "concat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_17/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_17/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_17/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_17"
  op: "StridedSlice"
  input: "Shape_8"
  input: "strided_slice_17/stack"
  input: "strided_slice_17/stack_1"
  input: "strided_slice_17/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_18/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_18/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_18/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_18"
  op: "StridedSlice"
  input: "Shape_8"
  input: "strided_slice_18/stack"
  input: "strided_slice_18/stack_1"
  input: "strided_slice_18/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_3"
  op: "Mul"
  input: "strided_slice_17"
  input: "strided_slice_18"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_19/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_19/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_19/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_19"
  op: "StridedSlice"
  input: "Shape_8"
  input: "strided_slice_19/stack"
  input: "strided_slice_19/stack_1"
  input: "strided_slice_19/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "concat_4/values_0"
  op: "Pack"
  input: "mul_3"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "concat_4/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_4"
  op: "ConcatV2"
  input: "concat_4/values_0"
  input: "strided_slice_19"
  input: "concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_2"
  op: "Reshape"
  input: "concat_3"
  input: "concat_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_9"
  op: "Shape"
  input: "transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_20/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_20/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_20/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_20"
  op: "StridedSlice"
  input: "Shape_9"
  input: "strided_slice_20/stack"
  input: "strided_slice_20/stack_1"
  input: "strided_slice_20/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_21/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_21/stack_1/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_21/stack_1"
  op: "Pack"
  input: "strided_slice_20"
  input: "strided_slice_21/stack_1/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_21/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_21"
  op: "StridedSlice"
  input: "Reshape_2"
  input: "strided_slice_21/stack"
  input: "strided_slice_21/stack_1"
  input: "strided_slice_21/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "strided_slice_21"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "mul_4"
  op: "Mul"
  input: "Cast_1"
  input: "transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "transpose_4/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_4"
  op: "Transpose"
  input: "mul_4"
  input: "transpose_4/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/frame_length"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "inverse_stft_1/frame_step"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "inverse_stft_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "inverse_stft_1/irfft/packed"
  op: "Pack"
  input: "inverse_stft_1/Const"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/irfft"
  op: "IRFFT"
  input: "transpose_4"
  input: "inverse_stft_1/irfft/packed"
  attr {
    key: "Tcomplex"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Treal"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/periodic"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/Cast"
  op: "Cast"
  input: "inverse_stft_1/hann_window/periodic"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/FloorMod/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/FloorMod"
  op: "FloorMod"
  input: "inverse_stft_1/frame_length"
  input: "inverse_stft_1/hann_window/FloorMod/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/sub"
  op: "Sub"
  input: "inverse_stft_1/hann_window/sub/x"
  input: "inverse_stft_1/hann_window/FloorMod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/mul"
  op: "Mul"
  input: "inverse_stft_1/hann_window/Cast"
  input: "inverse_stft_1/hann_window/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/add"
  op: "Add"
  input: "inverse_stft_1/frame_length"
  input: "inverse_stft_1/hann_window/mul"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/sub_1"
  op: "Sub"
  input: "inverse_stft_1/hann_window/add"
  input: "inverse_stft_1/hann_window/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/Cast_1"
  op: "Cast"
  input: "inverse_stft_1/hann_window/sub_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/range"
  op: "Range"
  input: "inverse_stft_1/hann_window/range/start"
  input: "inverse_stft_1/frame_length"
  input: "inverse_stft_1/hann_window/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/Cast_2"
  op: "Cast"
  input: "inverse_stft_1/hann_window/range"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.2831854820251465
      }
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/mul_1"
  op: "Mul"
  input: "inverse_stft_1/hann_window/Const"
  input: "inverse_stft_1/hann_window/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/truediv"
  op: "RealDiv"
  input: "inverse_stft_1/hann_window/mul_1"
  input: "inverse_stft_1/hann_window/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/Cos"
  op: "Cos"
  input: "inverse_stft_1/hann_window/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/mul_2"
  op: "Mul"
  input: "inverse_stft_1/hann_window/mul_2/x"
  input: "inverse_stft_1/hann_window/Cos"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "inverse_stft_1/hann_window/sub_2"
  op: "Sub"
  input: "inverse_stft_1/hann_window/sub_2/x"
  input: "inverse_stft_1/hann_window/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft_1/mul"
  op: "Mul"
  input: "inverse_stft_1/irfft"
  input: "inverse_stft_1/hann_window/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/Shape"
  op: "Shape"
  input: "inverse_stft_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice"
  op: "StridedSlice"
  input: "inverse_stft_1/overlap_and_add/Shape"
  input: "inverse_stft_1/overlap_and_add/strided_slice/stack"
  input: "inverse_stft_1/overlap_and_add/strided_slice/stack_1"
  input: "inverse_stft_1/overlap_and_add/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_1"
  op: "StridedSlice"
  input: "inverse_stft_1/overlap_and_add/Shape"
  input: "inverse_stft_1/overlap_and_add/strided_slice_1/stack"
  input: "inverse_stft_1/overlap_and_add/strided_slice_1/stack_1"
  input: "inverse_stft_1/overlap_and_add/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_2"
  op: "StridedSlice"
  input: "inverse_stft_1/overlap_and_add/Shape"
  input: "inverse_stft_1/overlap_and_add/strided_slice_2/stack"
  input: "inverse_stft_1/overlap_and_add/strided_slice_2/stack_1"
  input: "inverse_stft_1/overlap_and_add/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/sub"
  op: "Sub"
  input: "inverse_stft_1/overlap_and_add/strided_slice_2"
  input: "inverse_stft_1/overlap_and_add/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/mul"
  op: "Mul"
  input: "inverse_stft_1/frame_step"
  input: "inverse_stft_1/overlap_and_add/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/add"
  op: "Add"
  input: "inverse_stft_1/overlap_and_add/strided_slice_1"
  input: "inverse_stft_1/overlap_and_add/mul"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/Neg"
  op: "Neg"
  input: "inverse_stft_1/overlap_and_add/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/floordiv"
  op: "FloorDiv"
  input: "inverse_stft_1/overlap_and_add/Neg"
  input: "inverse_stft_1/frame_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/Neg_1"
  op: "Neg"
  input: "inverse_stft_1/overlap_and_add/floordiv"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/mul_1"
  op: "Mul"
  input: "inverse_stft_1/overlap_and_add/Neg_1"
  input: "inverse_stft_1/frame_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/sub_1"
  op: "Sub"
  input: "inverse_stft_1/overlap_and_add/mul_1"
  input: "inverse_stft_1/overlap_and_add/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/zeros/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/zeros/mul"
  op: "Mul"
  input: "inverse_stft_1/overlap_and_add/Size"
  input: "inverse_stft_1/overlap_and_add/zeros/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/zeros/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/zeros/Less"
  op: "Less"
  input: "inverse_stft_1/overlap_and_add/zeros/mul"
  input: "inverse_stft_1/overlap_and_add/zeros/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/zeros/packed/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/zeros/packed"
  op: "Pack"
  input: "inverse_stft_1/overlap_and_add/Size"
  input: "inverse_stft_1/overlap_and_add/zeros/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/zeros"
  op: "Fill"
  input: "inverse_stft_1/overlap_and_add/zeros/packed"
  input: "inverse_stft_1/overlap_and_add/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat/values_1/0/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat/values_1/0"
  op: "Pack"
  input: "inverse_stft_1/overlap_and_add/concat/values_1/0/0"
  input: "inverse_stft_1/overlap_and_add/Neg_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat/values_1/1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat/values_1/1"
  op: "Pack"
  input: "inverse_stft_1/overlap_and_add/concat/values_1/1/0"
  input: "inverse_stft_1/overlap_and_add/sub_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat/values_1"
  op: "Pack"
  input: "inverse_stft_1/overlap_and_add/concat/values_1/0"
  input: "inverse_stft_1/overlap_and_add/concat/values_1/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat"
  op: "ConcatV2"
  input: "inverse_stft_1/overlap_and_add/zeros"
  input: "inverse_stft_1/overlap_and_add/concat/values_1"
  input: "inverse_stft_1/overlap_and_add/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/Pad"
  op: "Pad"
  input: "inverse_stft_1/mul"
  input: "inverse_stft_1/overlap_and_add/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/add_1"
  op: "Add"
  input: "inverse_stft_1/overlap_and_add/strided_slice_2"
  input: "inverse_stft_1/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_1/values_1"
  op: "Pack"
  input: "inverse_stft_1/overlap_and_add/add_1"
  input: "inverse_stft_1/overlap_and_add/Neg_1"
  input: "inverse_stft_1/frame_step"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_1"
  op: "ConcatV2"
  input: "inverse_stft_1/overlap_and_add/strided_slice"
  input: "inverse_stft_1/overlap_and_add/concat_1/values_1"
  input: "inverse_stft_1/overlap_and_add/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/Reshape"
  op: "Reshape"
  input: "inverse_stft_1/overlap_and_add/Pad"
  input: "inverse_stft_1/overlap_and_add/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/range"
  op: "Range"
  input: "inverse_stft_1/overlap_and_add/range/start"
  input: "inverse_stft_1/overlap_and_add/Size"
  input: "inverse_stft_1/overlap_and_add/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/add_2"
  op: "Add"
  input: "inverse_stft_1/overlap_and_add/Size"
  input: "inverse_stft_1/overlap_and_add/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_2"
  op: "ConcatV2"
  input: "inverse_stft_1/overlap_and_add/range"
  input: "inverse_stft_1/overlap_and_add/add_2"
  input: "inverse_stft_1/overlap_and_add/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/transpose"
  op: "Transpose"
  input: "inverse_stft_1/overlap_and_add/Reshape"
  input: "inverse_stft_1/overlap_and_add/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/add_3"
  op: "Add"
  input: "inverse_stft_1/overlap_and_add/strided_slice_2"
  input: "inverse_stft_1/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/mul_2"
  op: "Mul"
  input: "inverse_stft_1/overlap_and_add/add_3"
  input: "inverse_stft_1/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_3/values_1"
  op: "Pack"
  input: "inverse_stft_1/overlap_and_add/mul_2"
  input: "inverse_stft_1/frame_step"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_3"
  op: "ConcatV2"
  input: "inverse_stft_1/overlap_and_add/strided_slice"
  input: "inverse_stft_1/overlap_and_add/concat_3/values_1"
  input: "inverse_stft_1/overlap_and_add/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/Reshape_1"
  op: "Reshape"
  input: "inverse_stft_1/overlap_and_add/transpose"
  input: "inverse_stft_1/overlap_and_add/concat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/add_4"
  op: "Add"
  input: "inverse_stft_1/overlap_and_add/strided_slice_2"
  input: "inverse_stft_1/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/sub_2"
  op: "Sub"
  input: "inverse_stft_1/overlap_and_add/add_4"
  input: "inverse_stft_1/overlap_and_add/sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/mul_3"
  op: "Mul"
  input: "inverse_stft_1/overlap_and_add/sub_2"
  input: "inverse_stft_1/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_3/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_3/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_3/stack_1"
  op: "Pack"
  input: "inverse_stft_1/overlap_and_add/strided_slice_3/stack_1/0"
  input: "inverse_stft_1/overlap_and_add/mul_3"
  input: "inverse_stft_1/overlap_and_add/strided_slice_3/stack_1/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_3"
  op: "StridedSlice"
  input: "inverse_stft_1/overlap_and_add/Reshape_1"
  input: "inverse_stft_1/overlap_and_add/strided_slice_3/stack"
  input: "inverse_stft_1/overlap_and_add/strided_slice_3/stack_1"
  input: "inverse_stft_1/overlap_and_add/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 6
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 4
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/add_5"
  op: "Add"
  input: "inverse_stft_1/overlap_and_add/strided_slice_2"
  input: "inverse_stft_1/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/sub_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/sub_3"
  op: "Sub"
  input: "inverse_stft_1/overlap_and_add/add_5"
  input: "inverse_stft_1/overlap_and_add/sub_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_4/values_1"
  op: "Pack"
  input: "inverse_stft_1/overlap_and_add/Neg_1"
  input: "inverse_stft_1/overlap_and_add/sub_3"
  input: "inverse_stft_1/frame_step"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_4/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_4"
  op: "ConcatV2"
  input: "inverse_stft_1/overlap_and_add/strided_slice"
  input: "inverse_stft_1/overlap_and_add/concat_4/values_1"
  input: "inverse_stft_1/overlap_and_add/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/Reshape_2"
  op: "Reshape"
  input: "inverse_stft_1/overlap_and_add/strided_slice_3"
  input: "inverse_stft_1/overlap_and_add/concat_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/Sum"
  op: "Sum"
  input: "inverse_stft_1/overlap_and_add/Reshape_2"
  input: "inverse_stft_1/overlap_and_add/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/add_6"
  op: "Add"
  input: "inverse_stft_1/overlap_and_add/strided_slice_2"
  input: "inverse_stft_1/overlap_and_add/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/sub_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/sub_4"
  op: "Sub"
  input: "inverse_stft_1/overlap_and_add/add_6"
  input: "inverse_stft_1/overlap_and_add/sub_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/mul_4"
  op: "Mul"
  input: "inverse_stft_1/overlap_and_add/sub_4"
  input: "inverse_stft_1/frame_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_5/values_1"
  op: "Pack"
  input: "inverse_stft_1/overlap_and_add/mul_4"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_5/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/concat_5"
  op: "ConcatV2"
  input: "inverse_stft_1/overlap_and_add/strided_slice"
  input: "inverse_stft_1/overlap_and_add/concat_5/values_1"
  input: "inverse_stft_1/overlap_and_add/concat_5/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/Reshape_3"
  op: "Reshape"
  input: "inverse_stft_1/overlap_and_add/Sum"
  input: "inverse_stft_1/overlap_and_add/concat_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_4/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_4/stack_1"
  op: "Pack"
  input: "inverse_stft_1/overlap_and_add/strided_slice_4/stack_1/0"
  input: "inverse_stft_1/overlap_and_add/add"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "inverse_stft_1/overlap_and_add/strided_slice_4"
  op: "StridedSlice"
  input: "inverse_stft_1/overlap_and_add/Reshape_3"
  input: "inverse_stft_1/overlap_and_add/strided_slice_4/stack"
  input: "inverse_stft_1/overlap_and_add/strided_slice_4/stack_1"
  input: "inverse_stft_1/overlap_and_add/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "mul_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6666666865348816
      }
    }
  }
}
node {
  name: "mul_5"
  op: "Mul"
  input: "inverse_stft_1/overlap_and_add/strided_slice_4"
  input: "mul_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transpose_5/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_5"
  op: "Transpose"
  input: "mul_5"
  input: "transpose_5/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_10"
  op: "Shape"
  input: "waveform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_22/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_22/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_22/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_22"
  op: "StridedSlice"
  input: "Shape_10"
  input: "strided_slice_22/stack"
  input: "strided_slice_22/stack_1"
  input: "strided_slice_22/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_23/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_23/stack_1/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_23/stack_1"
  op: "Pack"
  input: "strided_slice_22"
  input: "strided_slice_23/stack_1/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_23/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_23"
  op: "StridedSlice"
  input: "transpose_5"
  input: "strided_slice_23/stack"
  input: "strided_slice_23/stack_1"
  input: "strided_slice_23/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "batch_normalization_10/beta"
        string_val: "batch_normalization_10/gamma"
        string_val: "batch_normalization_10/moving_mean"
        string_val: "batch_normalization_10/moving_variance"
        string_val: "batch_normalization_11/beta"
        string_val: "batch_normalization_11/gamma"
        string_val: "batch_normalization_11/moving_mean"
        string_val: "batch_normalization_11/moving_variance"
        string_val: "batch_normalization_12/beta"
        string_val: "batch_normalization_12/gamma"
        string_val: "batch_normalization_12/moving_mean"
        string_val: "batch_normalization_12/moving_variance"
        string_val: "batch_normalization_13/beta"
        string_val: "batch_normalization_13/gamma"
        string_val: "batch_normalization_13/moving_mean"
        string_val: "batch_normalization_13/moving_variance"
        string_val: "batch_normalization_14/beta"
        string_val: "batch_normalization_14/gamma"
        string_val: "batch_normalization_14/moving_mean"
        string_val: "batch_normalization_14/moving_variance"
        string_val: "batch_normalization_15/beta"
        string_val: "batch_normalization_15/gamma"
        string_val: "batch_normalization_15/moving_mean"
        string_val: "batch_normalization_15/moving_variance"
        string_val: "batch_normalization_16/beta"
        string_val: "batch_normalization_16/gamma"
        string_val: "batch_normalization_16/moving_mean"
        string_val: "batch_normalization_16/moving_variance"
        string_val: "batch_normalization_17/beta"
        string_val: "batch_normalization_17/gamma"
        string_val: "batch_normalization_17/moving_mean"
        string_val: "batch_normalization_17/moving_variance"
        string_val: "batch_normalization_18/beta"
        string_val: "batch_normalization_18/gamma"
        string_val: "batch_normalization_18/moving_mean"
        string_val: "batch_normalization_18/moving_variance"
        string_val: "batch_normalization_19/beta"
        string_val: "batch_normalization_19/gamma"
        string_val: "batch_normalization_19/moving_mean"
        string_val: "batch_normalization_19/moving_variance"
        string_val: "batch_normalization_2/beta"
        string_val: "batch_normalization_2/gamma"
        string_val: "batch_normalization_2/moving_mean"
        string_val: "batch_normalization_2/moving_variance"
        string_val: "batch_normalization_20/beta"
        string_val: "batch_normalization_20/gamma"
        string_val: "batch_normalization_20/moving_mean"
        string_val: "batch_normalization_20/moving_variance"
        string_val: "batch_normalization_21/beta"
        string_val: "batch_normalization_21/gamma"
        string_val: "batch_normalization_21/moving_mean"
        string_val: "batch_normalization_21/moving_variance"
        string_val: "batch_normalization_22/beta"
        string_val: "batch_normalization_22/gamma"
        string_val: "batch_normalization_22/moving_mean"
        string_val: "batch_normalization_22/moving_variance"
        string_val: "batch_normalization_23/beta"
        string_val: "batch_normalization_23/gamma"
        string_val: "batch_normalization_23/moving_mean"
        string_val: "batch_normalization_23/moving_variance"
        string_val: "batch_normalization_3/beta"
        string_val: "batch_normalization_3/gamma"
        string_val: "batch_normalization_3/moving_mean"
        string_val: "batch_normalization_3/moving_variance"
        string_val: "batch_normalization_4/beta"
        string_val: "batch_normalization_4/gamma"
        string_val: "batch_normalization_4/moving_mean"
        string_val: "batch_normalization_4/moving_variance"
        string_val: "batch_normalization_5/beta"
        string_val: "batch_normalization_5/gamma"
        string_val: "batch_normalization_5/moving_mean"
        string_val: "batch_normalization_5/moving_variance"
        string_val: "batch_normalization_6/beta"
        string_val: "batch_normalization_6/gamma"
        string_val: "batch_normalization_6/moving_mean"
        string_val: "batch_normalization_6/moving_variance"
        string_val: "batch_normalization_7/beta"
        string_val: "batch_normalization_7/gamma"
        string_val: "batch_normalization_7/moving_mean"
        string_val: "batch_normalization_7/moving_variance"
        string_val: "batch_normalization_8/beta"
        string_val: "batch_normalization_8/gamma"
        string_val: "batch_normalization_8/moving_mean"
        string_val: "batch_normalization_8/moving_variance"
        string_val: "batch_normalization_9/beta"
        string_val: "batch_normalization_9/gamma"
        string_val: "batch_normalization_9/moving_mean"
        string_val: "batch_normalization_9/moving_variance"
        string_val: "conv2d/bias"
        string_val: "conv2d/kernel"
        string_val: "conv2d_1/bias"
        string_val: "conv2d_1/kernel"
        string_val: "conv2d_10/bias"
        string_val: "conv2d_10/kernel"
        string_val: "conv2d_11/bias"
        string_val: "conv2d_11/kernel"
        string_val: "conv2d_12/bias"
        string_val: "conv2d_12/kernel"
        string_val: "conv2d_13/bias"
        string_val: "conv2d_13/kernel"
        string_val: "conv2d_2/bias"
        string_val: "conv2d_2/kernel"
        string_val: "conv2d_3/bias"
        string_val: "conv2d_3/kernel"
        string_val: "conv2d_4/bias"
        string_val: "conv2d_4/kernel"
        string_val: "conv2d_5/bias"
        string_val: "conv2d_5/kernel"
        string_val: "conv2d_6/bias"
        string_val: "conv2d_6/kernel"
        string_val: "conv2d_7/bias"
        string_val: "conv2d_7/kernel"
        string_val: "conv2d_8/bias"
        string_val: "conv2d_8/kernel"
        string_val: "conv2d_9/bias"
        string_val: "conv2d_9/kernel"
        string_val: "conv2d_transpose/bias"
        string_val: "conv2d_transpose/kernel"
        string_val: "conv2d_transpose_1/bias"
        string_val: "conv2d_transpose_1/kernel"
        string_val: "conv2d_transpose_10/bias"
        string_val: "conv2d_transpose_10/kernel"
        string_val: "conv2d_transpose_11/bias"
        string_val: "conv2d_transpose_11/kernel"
        string_val: "conv2d_transpose_2/bias"
        string_val: "conv2d_transpose_2/kernel"
        string_val: "conv2d_transpose_3/bias"
        string_val: "conv2d_transpose_3/kernel"
        string_val: "conv2d_transpose_4/bias"
        string_val: "conv2d_transpose_4/kernel"
        string_val: "conv2d_transpose_5/bias"
        string_val: "conv2d_transpose_5/kernel"
        string_val: "conv2d_transpose_6/bias"
        string_val: "conv2d_transpose_6/kernel"
        string_val: "conv2d_transpose_7/bias"
        string_val: "conv2d_transpose_7/kernel"
        string_val: "conv2d_transpose_8/bias"
        string_val: "conv2d_transpose_8/kernel"
        string_val: "conv2d_transpose_9/bias"
        string_val: "conv2d_transpose_9/kernel"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "batch_normalization/beta/Read/ReadVariableOp"
  input: "batch_normalization/gamma/Read/ReadVariableOp"
  input: "batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_1/beta/Read/ReadVariableOp"
  input: "batch_normalization_1/gamma/Read/ReadVariableOp"
  input: "batch_normalization_1/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_1/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_10/beta/Read/ReadVariableOp"
  input: "batch_normalization_10/gamma/Read/ReadVariableOp"
  input: "batch_normalization_10/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_10/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_11/beta/Read/ReadVariableOp"
  input: "batch_normalization_11/gamma/Read/ReadVariableOp"
  input: "batch_normalization_11/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_11/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_12/beta/Read/ReadVariableOp"
  input: "batch_normalization_12/gamma/Read/ReadVariableOp"
  input: "batch_normalization_12/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_12/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_13/beta/Read/ReadVariableOp"
  input: "batch_normalization_13/gamma/Read/ReadVariableOp"
  input: "batch_normalization_13/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_13/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_14/beta/Read/ReadVariableOp"
  input: "batch_normalization_14/gamma/Read/ReadVariableOp"
  input: "batch_normalization_14/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_14/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_15/beta/Read/ReadVariableOp"
  input: "batch_normalization_15/gamma/Read/ReadVariableOp"
  input: "batch_normalization_15/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_15/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_16/beta/Read/ReadVariableOp"
  input: "batch_normalization_16/gamma/Read/ReadVariableOp"
  input: "batch_normalization_16/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_16/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_17/beta/Read/ReadVariableOp"
  input: "batch_normalization_17/gamma/Read/ReadVariableOp"
  input: "batch_normalization_17/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_17/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_18/beta/Read/ReadVariableOp"
  input: "batch_normalization_18/gamma/Read/ReadVariableOp"
  input: "batch_normalization_18/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_18/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_19/beta/Read/ReadVariableOp"
  input: "batch_normalization_19/gamma/Read/ReadVariableOp"
  input: "batch_normalization_19/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_19/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_2/beta/Read/ReadVariableOp"
  input: "batch_normalization_2/gamma/Read/ReadVariableOp"
  input: "batch_normalization_2/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_2/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_20/beta/Read/ReadVariableOp"
  input: "batch_normalization_20/gamma/Read/ReadVariableOp"
  input: "batch_normalization_20/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_20/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_21/beta/Read/ReadVariableOp"
  input: "batch_normalization_21/gamma/Read/ReadVariableOp"
  input: "batch_normalization_21/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_21/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_22/beta/Read/ReadVariableOp"
  input: "batch_normalization_22/gamma/Read/ReadVariableOp"
  input: "batch_normalization_22/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_22/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_23/beta/Read/ReadVariableOp"
  input: "batch_normalization_23/gamma/Read/ReadVariableOp"
  input: "batch_normalization_23/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_23/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_3/beta/Read/ReadVariableOp"
  input: "batch_normalization_3/gamma/Read/ReadVariableOp"
  input: "batch_normalization_3/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_3/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_4/beta/Read/ReadVariableOp"
  input: "batch_normalization_4/gamma/Read/ReadVariableOp"
  input: "batch_normalization_4/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_4/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_5/beta/Read/ReadVariableOp"
  input: "batch_normalization_5/gamma/Read/ReadVariableOp"
  input: "batch_normalization_5/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_5/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_6/beta/Read/ReadVariableOp"
  input: "batch_normalization_6/gamma/Read/ReadVariableOp"
  input: "batch_normalization_6/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_6/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_7/beta/Read/ReadVariableOp"
  input: "batch_normalization_7/gamma/Read/ReadVariableOp"
  input: "batch_normalization_7/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_7/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_8/beta/Read/ReadVariableOp"
  input: "batch_normalization_8/gamma/Read/ReadVariableOp"
  input: "batch_normalization_8/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_8/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_9/beta/Read/ReadVariableOp"
  input: "batch_normalization_9/gamma/Read/ReadVariableOp"
  input: "batch_normalization_9/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_9/moving_variance/Read/ReadVariableOp"
  input: "conv2d/bias/Read/ReadVariableOp"
  input: "conv2d/kernel/Read/ReadVariableOp"
  input: "conv2d_1/bias/Read/ReadVariableOp"
  input: "conv2d_1/kernel/Read/ReadVariableOp"
  input: "conv2d_10/bias/Read/ReadVariableOp"
  input: "conv2d_10/kernel/Read/ReadVariableOp"
  input: "conv2d_11/bias/Read/ReadVariableOp"
  input: "conv2d_11/kernel/Read/ReadVariableOp"
  input: "conv2d_12/bias/Read/ReadVariableOp"
  input: "conv2d_12/kernel/Read/ReadVariableOp"
  input: "conv2d_13/bias/Read/ReadVariableOp"
  input: "conv2d_13/kernel/Read/ReadVariableOp"
  input: "conv2d_2/bias/Read/ReadVariableOp"
  input: "conv2d_2/kernel/Read/ReadVariableOp"
  input: "conv2d_3/bias/Read/ReadVariableOp"
  input: "conv2d_3/kernel/Read/ReadVariableOp"
  input: "conv2d_4/bias/Read/ReadVariableOp"
  input: "conv2d_4/kernel/Read/ReadVariableOp"
  input: "conv2d_5/bias/Read/ReadVariableOp"
  input: "conv2d_5/kernel/Read/ReadVariableOp"
  input: "conv2d_6/bias/Read/ReadVariableOp"
  input: "conv2d_6/kernel/Read/ReadVariableOp"
  input: "conv2d_7/bias/Read/ReadVariableOp"
  input: "conv2d_7/kernel/Read/ReadVariableOp"
  input: "conv2d_8/bias/Read/ReadVariableOp"
  input: "conv2d_8/kernel/Read/ReadVariableOp"
  input: "conv2d_9/bias/Read/ReadVariableOp"
  input: "conv2d_9/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose/bias/Read/ReadVariableOp"
  input: "conv2d_transpose/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_1/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_1/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_10/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_10/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_11/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_11/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_2/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_2/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_3/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_3/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_4/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_4/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_5/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_5/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_6/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_6/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_7/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_7/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_8/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_8/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_9/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_9/kernel/Read/ReadVariableOp"
  input: "global_step"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "batch_normalization_10/beta"
        string_val: "batch_normalization_10/gamma"
        string_val: "batch_normalization_10/moving_mean"
        string_val: "batch_normalization_10/moving_variance"
        string_val: "batch_normalization_11/beta"
        string_val: "batch_normalization_11/gamma"
        string_val: "batch_normalization_11/moving_mean"
        string_val: "batch_normalization_11/moving_variance"
        string_val: "batch_normalization_12/beta"
        string_val: "batch_normalization_12/gamma"
        string_val: "batch_normalization_12/moving_mean"
        string_val: "batch_normalization_12/moving_variance"
        string_val: "batch_normalization_13/beta"
        string_val: "batch_normalization_13/gamma"
        string_val: "batch_normalization_13/moving_mean"
        string_val: "batch_normalization_13/moving_variance"
        string_val: "batch_normalization_14/beta"
        string_val: "batch_normalization_14/gamma"
        string_val: "batch_normalization_14/moving_mean"
        string_val: "batch_normalization_14/moving_variance"
        string_val: "batch_normalization_15/beta"
        string_val: "batch_normalization_15/gamma"
        string_val: "batch_normalization_15/moving_mean"
        string_val: "batch_normalization_15/moving_variance"
        string_val: "batch_normalization_16/beta"
        string_val: "batch_normalization_16/gamma"
        string_val: "batch_normalization_16/moving_mean"
        string_val: "batch_normalization_16/moving_variance"
        string_val: "batch_normalization_17/beta"
        string_val: "batch_normalization_17/gamma"
        string_val: "batch_normalization_17/moving_mean"
        string_val: "batch_normalization_17/moving_variance"
        string_val: "batch_normalization_18/beta"
        string_val: "batch_normalization_18/gamma"
        string_val: "batch_normalization_18/moving_mean"
        string_val: "batch_normalization_18/moving_variance"
        string_val: "batch_normalization_19/beta"
        string_val: "batch_normalization_19/gamma"
        string_val: "batch_normalization_19/moving_mean"
        string_val: "batch_normalization_19/moving_variance"
        string_val: "batch_normalization_2/beta"
        string_val: "batch_normalization_2/gamma"
        string_val: "batch_normalization_2/moving_mean"
        string_val: "batch_normalization_2/moving_variance"
        string_val: "batch_normalization_20/beta"
        string_val: "batch_normalization_20/gamma"
        string_val: "batch_normalization_20/moving_mean"
        string_val: "batch_normalization_20/moving_variance"
        string_val: "batch_normalization_21/beta"
        string_val: "batch_normalization_21/gamma"
        string_val: "batch_normalization_21/moving_mean"
        string_val: "batch_normalization_21/moving_variance"
        string_val: "batch_normalization_22/beta"
        string_val: "batch_normalization_22/gamma"
        string_val: "batch_normalization_22/moving_mean"
        string_val: "batch_normalization_22/moving_variance"
        string_val: "batch_normalization_23/beta"
        string_val: "batch_normalization_23/gamma"
        string_val: "batch_normalization_23/moving_mean"
        string_val: "batch_normalization_23/moving_variance"
        string_val: "batch_normalization_3/beta"
        string_val: "batch_normalization_3/gamma"
        string_val: "batch_normalization_3/moving_mean"
        string_val: "batch_normalization_3/moving_variance"
        string_val: "batch_normalization_4/beta"
        string_val: "batch_normalization_4/gamma"
        string_val: "batch_normalization_4/moving_mean"
        string_val: "batch_normalization_4/moving_variance"
        string_val: "batch_normalization_5/beta"
        string_val: "batch_normalization_5/gamma"
        string_val: "batch_normalization_5/moving_mean"
        string_val: "batch_normalization_5/moving_variance"
        string_val: "batch_normalization_6/beta"
        string_val: "batch_normalization_6/gamma"
        string_val: "batch_normalization_6/moving_mean"
        string_val: "batch_normalization_6/moving_variance"
        string_val: "batch_normalization_7/beta"
        string_val: "batch_normalization_7/gamma"
        string_val: "batch_normalization_7/moving_mean"
        string_val: "batch_normalization_7/moving_variance"
        string_val: "batch_normalization_8/beta"
        string_val: "batch_normalization_8/gamma"
        string_val: "batch_normalization_8/moving_mean"
        string_val: "batch_normalization_8/moving_variance"
        string_val: "batch_normalization_9/beta"
        string_val: "batch_normalization_9/gamma"
        string_val: "batch_normalization_9/moving_mean"
        string_val: "batch_normalization_9/moving_variance"
        string_val: "conv2d/bias"
        string_val: "conv2d/kernel"
        string_val: "conv2d_1/bias"
        string_val: "conv2d_1/kernel"
        string_val: "conv2d_10/bias"
        string_val: "conv2d_10/kernel"
        string_val: "conv2d_11/bias"
        string_val: "conv2d_11/kernel"
        string_val: "conv2d_12/bias"
        string_val: "conv2d_12/kernel"
        string_val: "conv2d_13/bias"
        string_val: "conv2d_13/kernel"
        string_val: "conv2d_2/bias"
        string_val: "conv2d_2/kernel"
        string_val: "conv2d_3/bias"
        string_val: "conv2d_3/kernel"
        string_val: "conv2d_4/bias"
        string_val: "conv2d_4/kernel"
        string_val: "conv2d_5/bias"
        string_val: "conv2d_5/kernel"
        string_val: "conv2d_6/bias"
        string_val: "conv2d_6/kernel"
        string_val: "conv2d_7/bias"
        string_val: "conv2d_7/kernel"
        string_val: "conv2d_8/bias"
        string_val: "conv2d_8/kernel"
        string_val: "conv2d_9/bias"
        string_val: "conv2d_9/kernel"
        string_val: "conv2d_transpose/bias"
        string_val: "conv2d_transpose/kernel"
        string_val: "conv2d_transpose_1/bias"
        string_val: "conv2d_transpose_1/kernel"
        string_val: "conv2d_transpose_10/bias"
        string_val: "conv2d_transpose_10/kernel"
        string_val: "conv2d_transpose_11/bias"
        string_val: "conv2d_transpose_11/kernel"
        string_val: "conv2d_transpose_2/bias"
        string_val: "conv2d_transpose_2/kernel"
        string_val: "conv2d_transpose_3/bias"
        string_val: "conv2d_transpose_3/kernel"
        string_val: "conv2d_transpose_4/bias"
        string_val: "conv2d_transpose_4/kernel"
        string_val: "conv2d_transpose_5/bias"
        string_val: "conv2d_transpose_5/kernel"
        string_val: "conv2d_transpose_6/bias"
        string_val: "conv2d_transpose_6/kernel"
        string_val: "conv2d_transpose_7/bias"
        string_val: "conv2d_transpose_7/kernel"
        string_val: "conv2d_transpose_8/bias"
        string_val: "conv2d_transpose_8/kernel"
        string_val: "conv2d_transpose_9/bias"
        string_val: "conv2d_transpose_9/kernel"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "batch_normalization/beta"
  input: "save/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "batch_normalization/gamma"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "batch_normalization/moving_mean"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "batch_normalization/moving_variance"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "batch_normalization_1/beta"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "batch_normalization_1/gamma"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "batch_normalization_10/beta"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "batch_normalization_10/gamma"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "batch_normalization_10/moving_mean"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "batch_normalization_10/moving_variance"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "batch_normalization_11/beta"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "batch_normalization_11/gamma"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "batch_normalization_11/moving_mean"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "batch_normalization_11/moving_variance"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "batch_normalization_12/beta"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "batch_normalization_12/gamma"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "batch_normalization_12/moving_mean"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "batch_normalization_12/moving_variance"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "batch_normalization_13/beta"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "batch_normalization_13/gamma"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "batch_normalization_13/moving_mean"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "batch_normalization_13/moving_variance"
  input: "save/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "batch_normalization_14/beta"
  input: "save/Identity_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "batch_normalization_14/gamma"
  input: "save/Identity_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "batch_normalization_14/moving_mean"
  input: "save/Identity_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "batch_normalization_14/moving_variance"
  input: "save/Identity_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "batch_normalization_15/beta"
  input: "save/Identity_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_29"
  op: "AssignVariableOp"
  input: "batch_normalization_15/gamma"
  input: "save/Identity_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_30"
  op: "AssignVariableOp"
  input: "batch_normalization_15/moving_mean"
  input: "save/Identity_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_31"
  op: "Identity"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_31"
  op: "AssignVariableOp"
  input: "batch_normalization_15/moving_variance"
  input: "save/Identity_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_32"
  op: "Identity"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_32"
  op: "AssignVariableOp"
  input: "batch_normalization_16/beta"
  input: "save/Identity_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_33"
  op: "Identity"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_33"
  op: "AssignVariableOp"
  input: "batch_normalization_16/gamma"
  input: "save/Identity_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_34"
  op: "Identity"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_34"
  op: "AssignVariableOp"
  input: "batch_normalization_16/moving_mean"
  input: "save/Identity_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_35"
  op: "Identity"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_35"
  op: "AssignVariableOp"
  input: "batch_normalization_16/moving_variance"
  input: "save/Identity_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_36"
  op: "Identity"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_36"
  op: "AssignVariableOp"
  input: "batch_normalization_17/beta"
  input: "save/Identity_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_37"
  op: "Identity"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_37"
  op: "AssignVariableOp"
  input: "batch_normalization_17/gamma"
  input: "save/Identity_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_38"
  op: "Identity"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_38"
  op: "AssignVariableOp"
  input: "batch_normalization_17/moving_mean"
  input: "save/Identity_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_39"
  op: "Identity"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_39"
  op: "AssignVariableOp"
  input: "batch_normalization_17/moving_variance"
  input: "save/Identity_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_40"
  op: "Identity"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_40"
  op: "AssignVariableOp"
  input: "batch_normalization_18/beta"
  input: "save/Identity_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_41"
  op: "Identity"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_41"
  op: "AssignVariableOp"
  input: "batch_normalization_18/gamma"
  input: "save/Identity_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_42"
  op: "Identity"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_42"
  op: "AssignVariableOp"
  input: "batch_normalization_18/moving_mean"
  input: "save/Identity_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_43"
  op: "Identity"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_43"
  op: "AssignVariableOp"
  input: "batch_normalization_18/moving_variance"
  input: "save/Identity_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_44"
  op: "Identity"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_44"
  op: "AssignVariableOp"
  input: "batch_normalization_19/beta"
  input: "save/Identity_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_45"
  op: "Identity"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_45"
  op: "AssignVariableOp"
  input: "batch_normalization_19/gamma"
  input: "save/Identity_45"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_46"
  op: "Identity"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_46"
  op: "AssignVariableOp"
  input: "batch_normalization_19/moving_mean"
  input: "save/Identity_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_47"
  op: "Identity"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_47"
  op: "AssignVariableOp"
  input: "batch_normalization_19/moving_variance"
  input: "save/Identity_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_48"
  op: "Identity"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_48"
  op: "AssignVariableOp"
  input: "batch_normalization_2/beta"
  input: "save/Identity_48"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_49"
  op: "Identity"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_49"
  op: "AssignVariableOp"
  input: "batch_normalization_2/gamma"
  input: "save/Identity_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_50"
  op: "Identity"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_50"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "save/Identity_50"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_51"
  op: "Identity"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_51"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "save/Identity_51"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_52"
  op: "Identity"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_52"
  op: "AssignVariableOp"
  input: "batch_normalization_20/beta"
  input: "save/Identity_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_53"
  op: "Identity"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_53"
  op: "AssignVariableOp"
  input: "batch_normalization_20/gamma"
  input: "save/Identity_53"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_54"
  op: "Identity"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_54"
  op: "AssignVariableOp"
  input: "batch_normalization_20/moving_mean"
  input: "save/Identity_54"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_55"
  op: "Identity"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_55"
  op: "AssignVariableOp"
  input: "batch_normalization_20/moving_variance"
  input: "save/Identity_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_56"
  op: "Identity"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_56"
  op: "AssignVariableOp"
  input: "batch_normalization_21/beta"
  input: "save/Identity_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_57"
  op: "Identity"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_57"
  op: "AssignVariableOp"
  input: "batch_normalization_21/gamma"
  input: "save/Identity_57"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_58"
  op: "Identity"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_58"
  op: "AssignVariableOp"
  input: "batch_normalization_21/moving_mean"
  input: "save/Identity_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_59"
  op: "Identity"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_59"
  op: "AssignVariableOp"
  input: "batch_normalization_21/moving_variance"
  input: "save/Identity_59"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_60"
  op: "Identity"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_60"
  op: "AssignVariableOp"
  input: "batch_normalization_22/beta"
  input: "save/Identity_60"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_61"
  op: "Identity"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_61"
  op: "AssignVariableOp"
  input: "batch_normalization_22/gamma"
  input: "save/Identity_61"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_62"
  op: "Identity"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_62"
  op: "AssignVariableOp"
  input: "batch_normalization_22/moving_mean"
  input: "save/Identity_62"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_63"
  op: "Identity"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_63"
  op: "AssignVariableOp"
  input: "batch_normalization_22/moving_variance"
  input: "save/Identity_63"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_64"
  op: "Identity"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_64"
  op: "AssignVariableOp"
  input: "batch_normalization_23/beta"
  input: "save/Identity_64"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_65"
  op: "Identity"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_65"
  op: "AssignVariableOp"
  input: "batch_normalization_23/gamma"
  input: "save/Identity_65"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_66"
  op: "Identity"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_66"
  op: "AssignVariableOp"
  input: "batch_normalization_23/moving_mean"
  input: "save/Identity_66"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_67"
  op: "Identity"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_67"
  op: "AssignVariableOp"
  input: "batch_normalization_23/moving_variance"
  input: "save/Identity_67"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_68"
  op: "Identity"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_68"
  op: "AssignVariableOp"
  input: "batch_normalization_3/beta"
  input: "save/Identity_68"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_69"
  op: "Identity"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_69"
  op: "AssignVariableOp"
  input: "batch_normalization_3/gamma"
  input: "save/Identity_69"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_70"
  op: "Identity"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_70"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "save/Identity_70"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_71"
  op: "Identity"
  input: "save/RestoreV2:71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_71"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "save/Identity_71"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_72"
  op: "Identity"
  input: "save/RestoreV2:72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_72"
  op: "AssignVariableOp"
  input: "batch_normalization_4/beta"
  input: "save/Identity_72"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_73"
  op: "Identity"
  input: "save/RestoreV2:73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_73"
  op: "AssignVariableOp"
  input: "batch_normalization_4/gamma"
  input: "save/Identity_73"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_74"
  op: "Identity"
  input: "save/RestoreV2:74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_74"
  op: "AssignVariableOp"
  input: "batch_normalization_4/moving_mean"
  input: "save/Identity_74"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_75"
  op: "Identity"
  input: "save/RestoreV2:75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_75"
  op: "AssignVariableOp"
  input: "batch_normalization_4/moving_variance"
  input: "save/Identity_75"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_76"
  op: "Identity"
  input: "save/RestoreV2:76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_76"
  op: "AssignVariableOp"
  input: "batch_normalization_5/beta"
  input: "save/Identity_76"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_77"
  op: "Identity"
  input: "save/RestoreV2:77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_77"
  op: "AssignVariableOp"
  input: "batch_normalization_5/gamma"
  input: "save/Identity_77"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_78"
  op: "Identity"
  input: "save/RestoreV2:78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_78"
  op: "AssignVariableOp"
  input: "batch_normalization_5/moving_mean"
  input: "save/Identity_78"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_79"
  op: "Identity"
  input: "save/RestoreV2:79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_79"
  op: "AssignVariableOp"
  input: "batch_normalization_5/moving_variance"
  input: "save/Identity_79"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_80"
  op: "Identity"
  input: "save/RestoreV2:80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_80"
  op: "AssignVariableOp"
  input: "batch_normalization_6/beta"
  input: "save/Identity_80"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_81"
  op: "Identity"
  input: "save/RestoreV2:81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_81"
  op: "AssignVariableOp"
  input: "batch_normalization_6/gamma"
  input: "save/Identity_81"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_82"
  op: "Identity"
  input: "save/RestoreV2:82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_82"
  op: "AssignVariableOp"
  input: "batch_normalization_6/moving_mean"
  input: "save/Identity_82"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_83"
  op: "Identity"
  input: "save/RestoreV2:83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_83"
  op: "AssignVariableOp"
  input: "batch_normalization_6/moving_variance"
  input: "save/Identity_83"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_84"
  op: "Identity"
  input: "save/RestoreV2:84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_84"
  op: "AssignVariableOp"
  input: "batch_normalization_7/beta"
  input: "save/Identity_84"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_85"
  op: "Identity"
  input: "save/RestoreV2:85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_85"
  op: "AssignVariableOp"
  input: "batch_normalization_7/gamma"
  input: "save/Identity_85"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_86"
  op: "Identity"
  input: "save/RestoreV2:86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_86"
  op: "AssignVariableOp"
  input: "batch_normalization_7/moving_mean"
  input: "save/Identity_86"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_87"
  op: "Identity"
  input: "save/RestoreV2:87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_87"
  op: "AssignVariableOp"
  input: "batch_normalization_7/moving_variance"
  input: "save/Identity_87"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_88"
  op: "Identity"
  input: "save/RestoreV2:88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_88"
  op: "AssignVariableOp"
  input: "batch_normalization_8/beta"
  input: "save/Identity_88"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_89"
  op: "Identity"
  input: "save/RestoreV2:89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_89"
  op: "AssignVariableOp"
  input: "batch_normalization_8/gamma"
  input: "save/Identity_89"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_90"
  op: "Identity"
  input: "save/RestoreV2:90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_90"
  op: "AssignVariableOp"
  input: "batch_normalization_8/moving_mean"
  input: "save/Identity_90"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_91"
  op: "Identity"
  input: "save/RestoreV2:91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_91"
  op: "AssignVariableOp"
  input: "batch_normalization_8/moving_variance"
  input: "save/Identity_91"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_92"
  op: "Identity"
  input: "save/RestoreV2:92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_92"
  op: "AssignVariableOp"
  input: "batch_normalization_9/beta"
  input: "save/Identity_92"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_93"
  op: "Identity"
  input: "save/RestoreV2:93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_93"
  op: "AssignVariableOp"
  input: "batch_normalization_9/gamma"
  input: "save/Identity_93"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_94"
  op: "Identity"
  input: "save/RestoreV2:94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_94"
  op: "AssignVariableOp"
  input: "batch_normalization_9/moving_mean"
  input: "save/Identity_94"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_95"
  op: "Identity"
  input: "save/RestoreV2:95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_95"
  op: "AssignVariableOp"
  input: "batch_normalization_9/moving_variance"
  input: "save/Identity_95"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_96"
  op: "Identity"
  input: "save/RestoreV2:96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_96"
  op: "AssignVariableOp"
  input: "conv2d/bias"
  input: "save/Identity_96"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_97"
  op: "Identity"
  input: "save/RestoreV2:97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_97"
  op: "AssignVariableOp"
  input: "conv2d/kernel"
  input: "save/Identity_97"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_98"
  op: "Identity"
  input: "save/RestoreV2:98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_98"
  op: "AssignVariableOp"
  input: "conv2d_1/bias"
  input: "save/Identity_98"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_99"
  op: "Identity"
  input: "save/RestoreV2:99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_99"
  op: "AssignVariableOp"
  input: "conv2d_1/kernel"
  input: "save/Identity_99"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_100"
  op: "Identity"
  input: "save/RestoreV2:100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_100"
  op: "AssignVariableOp"
  input: "conv2d_10/bias"
  input: "save/Identity_100"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_101"
  op: "Identity"
  input: "save/RestoreV2:101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_101"
  op: "AssignVariableOp"
  input: "conv2d_10/kernel"
  input: "save/Identity_101"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_102"
  op: "Identity"
  input: "save/RestoreV2:102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_102"
  op: "AssignVariableOp"
  input: "conv2d_11/bias"
  input: "save/Identity_102"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_103"
  op: "Identity"
  input: "save/RestoreV2:103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_103"
  op: "AssignVariableOp"
  input: "conv2d_11/kernel"
  input: "save/Identity_103"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_104"
  op: "Identity"
  input: "save/RestoreV2:104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_104"
  op: "AssignVariableOp"
  input: "conv2d_12/bias"
  input: "save/Identity_104"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_105"
  op: "Identity"
  input: "save/RestoreV2:105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_105"
  op: "AssignVariableOp"
  input: "conv2d_12/kernel"
  input: "save/Identity_105"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_106"
  op: "Identity"
  input: "save/RestoreV2:106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_106"
  op: "AssignVariableOp"
  input: "conv2d_13/bias"
  input: "save/Identity_106"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_107"
  op: "Identity"
  input: "save/RestoreV2:107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_107"
  op: "AssignVariableOp"
  input: "conv2d_13/kernel"
  input: "save/Identity_107"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_108"
  op: "Identity"
  input: "save/RestoreV2:108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_108"
  op: "AssignVariableOp"
  input: "conv2d_2/bias"
  input: "save/Identity_108"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_109"
  op: "Identity"
  input: "save/RestoreV2:109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_109"
  op: "AssignVariableOp"
  input: "conv2d_2/kernel"
  input: "save/Identity_109"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_110"
  op: "Identity"
  input: "save/RestoreV2:110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_110"
  op: "AssignVariableOp"
  input: "conv2d_3/bias"
  input: "save/Identity_110"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_111"
  op: "Identity"
  input: "save/RestoreV2:111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_111"
  op: "AssignVariableOp"
  input: "conv2d_3/kernel"
  input: "save/Identity_111"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_112"
  op: "Identity"
  input: "save/RestoreV2:112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_112"
  op: "AssignVariableOp"
  input: "conv2d_4/bias"
  input: "save/Identity_112"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_113"
  op: "Identity"
  input: "save/RestoreV2:113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_113"
  op: "AssignVariableOp"
  input: "conv2d_4/kernel"
  input: "save/Identity_113"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_114"
  op: "Identity"
  input: "save/RestoreV2:114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_114"
  op: "AssignVariableOp"
  input: "conv2d_5/bias"
  input: "save/Identity_114"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_115"
  op: "Identity"
  input: "save/RestoreV2:115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_115"
  op: "AssignVariableOp"
  input: "conv2d_5/kernel"
  input: "save/Identity_115"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_116"
  op: "Identity"
  input: "save/RestoreV2:116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_116"
  op: "AssignVariableOp"
  input: "conv2d_6/bias"
  input: "save/Identity_116"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_117"
  op: "Identity"
  input: "save/RestoreV2:117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_117"
  op: "AssignVariableOp"
  input: "conv2d_6/kernel"
  input: "save/Identity_117"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_118"
  op: "Identity"
  input: "save/RestoreV2:118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_118"
  op: "AssignVariableOp"
  input: "conv2d_7/bias"
  input: "save/Identity_118"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_119"
  op: "Identity"
  input: "save/RestoreV2:119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_119"
  op: "AssignVariableOp"
  input: "conv2d_7/kernel"
  input: "save/Identity_119"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_120"
  op: "Identity"
  input: "save/RestoreV2:120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_120"
  op: "AssignVariableOp"
  input: "conv2d_8/bias"
  input: "save/Identity_120"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_121"
  op: "Identity"
  input: "save/RestoreV2:121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_121"
  op: "AssignVariableOp"
  input: "conv2d_8/kernel"
  input: "save/Identity_121"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_122"
  op: "Identity"
  input: "save/RestoreV2:122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_122"
  op: "AssignVariableOp"
  input: "conv2d_9/bias"
  input: "save/Identity_122"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_123"
  op: "Identity"
  input: "save/RestoreV2:123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_123"
  op: "AssignVariableOp"
  input: "conv2d_9/kernel"
  input: "save/Identity_123"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_124"
  op: "Identity"
  input: "save/RestoreV2:124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_124"
  op: "AssignVariableOp"
  input: "conv2d_transpose/bias"
  input: "save/Identity_124"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_125"
  op: "Identity"
  input: "save/RestoreV2:125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_125"
  op: "AssignVariableOp"
  input: "conv2d_transpose/kernel"
  input: "save/Identity_125"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_126"
  op: "Identity"
  input: "save/RestoreV2:126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_126"
  op: "AssignVariableOp"
  input: "conv2d_transpose_1/bias"
  input: "save/Identity_126"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_127"
  op: "Identity"
  input: "save/RestoreV2:127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_127"
  op: "AssignVariableOp"
  input: "conv2d_transpose_1/kernel"
  input: "save/Identity_127"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_128"
  op: "Identity"
  input: "save/RestoreV2:128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_128"
  op: "AssignVariableOp"
  input: "conv2d_transpose_10/bias"
  input: "save/Identity_128"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_129"
  op: "Identity"
  input: "save/RestoreV2:129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_129"
  op: "AssignVariableOp"
  input: "conv2d_transpose_10/kernel"
  input: "save/Identity_129"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_130"
  op: "Identity"
  input: "save/RestoreV2:130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_130"
  op: "AssignVariableOp"
  input: "conv2d_transpose_11/bias"
  input: "save/Identity_130"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_131"
  op: "Identity"
  input: "save/RestoreV2:131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_131"
  op: "AssignVariableOp"
  input: "conv2d_transpose_11/kernel"
  input: "save/Identity_131"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_132"
  op: "Identity"
  input: "save/RestoreV2:132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_132"
  op: "AssignVariableOp"
  input: "conv2d_transpose_2/bias"
  input: "save/Identity_132"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_133"
  op: "Identity"
  input: "save/RestoreV2:133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_133"
  op: "AssignVariableOp"
  input: "conv2d_transpose_2/kernel"
  input: "save/Identity_133"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_134"
  op: "Identity"
  input: "save/RestoreV2:134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_134"
  op: "AssignVariableOp"
  input: "conv2d_transpose_3/bias"
  input: "save/Identity_134"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_135"
  op: "Identity"
  input: "save/RestoreV2:135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_135"
  op: "AssignVariableOp"
  input: "conv2d_transpose_3/kernel"
  input: "save/Identity_135"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_136"
  op: "Identity"
  input: "save/RestoreV2:136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_136"
  op: "AssignVariableOp"
  input: "conv2d_transpose_4/bias"
  input: "save/Identity_136"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_137"
  op: "Identity"
  input: "save/RestoreV2:137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_137"
  op: "AssignVariableOp"
  input: "conv2d_transpose_4/kernel"
  input: "save/Identity_137"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_138"
  op: "Identity"
  input: "save/RestoreV2:138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_138"
  op: "AssignVariableOp"
  input: "conv2d_transpose_5/bias"
  input: "save/Identity_138"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_139"
  op: "Identity"
  input: "save/RestoreV2:139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_139"
  op: "AssignVariableOp"
  input: "conv2d_transpose_5/kernel"
  input: "save/Identity_139"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_140"
  op: "Identity"
  input: "save/RestoreV2:140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_140"
  op: "AssignVariableOp"
  input: "conv2d_transpose_6/bias"
  input: "save/Identity_140"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_141"
  op: "Identity"
  input: "save/RestoreV2:141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_141"
  op: "AssignVariableOp"
  input: "conv2d_transpose_6/kernel"
  input: "save/Identity_141"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_142"
  op: "Identity"
  input: "save/RestoreV2:142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_142"
  op: "AssignVariableOp"
  input: "conv2d_transpose_7/bias"
  input: "save/Identity_142"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_143"
  op: "Identity"
  input: "save/RestoreV2:143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_143"
  op: "AssignVariableOp"
  input: "conv2d_transpose_7/kernel"
  input: "save/Identity_143"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_144"
  op: "Identity"
  input: "save/RestoreV2:144"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_144"
  op: "AssignVariableOp"
  input: "conv2d_transpose_8/bias"
  input: "save/Identity_144"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_145"
  op: "Identity"
  input: "save/RestoreV2:145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_145"
  op: "AssignVariableOp"
  input: "conv2d_transpose_8/kernel"
  input: "save/Identity_145"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_146"
  op: "Identity"
  input: "save/RestoreV2:146"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_146"
  op: "AssignVariableOp"
  input: "conv2d_transpose_9/bias"
  input: "save/Identity_146"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_147"
  op: "Identity"
  input: "save/RestoreV2:147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_147"
  op: "AssignVariableOp"
  input: "conv2d_transpose_9/kernel"
  input: "save/Identity_147"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:148"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_100"
  input: "^save/AssignVariableOp_101"
  input: "^save/AssignVariableOp_102"
  input: "^save/AssignVariableOp_103"
  input: "^save/AssignVariableOp_104"
  input: "^save/AssignVariableOp_105"
  input: "^save/AssignVariableOp_106"
  input: "^save/AssignVariableOp_107"
  input: "^save/AssignVariableOp_108"
  input: "^save/AssignVariableOp_109"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_110"
  input: "^save/AssignVariableOp_111"
  input: "^save/AssignVariableOp_112"
  input: "^save/AssignVariableOp_113"
  input: "^save/AssignVariableOp_114"
  input: "^save/AssignVariableOp_115"
  input: "^save/AssignVariableOp_116"
  input: "^save/AssignVariableOp_117"
  input: "^save/AssignVariableOp_118"
  input: "^save/AssignVariableOp_119"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_120"
  input: "^save/AssignVariableOp_121"
  input: "^save/AssignVariableOp_122"
  input: "^save/AssignVariableOp_123"
  input: "^save/AssignVariableOp_124"
  input: "^save/AssignVariableOp_125"
  input: "^save/AssignVariableOp_126"
  input: "^save/AssignVariableOp_127"
  input: "^save/AssignVariableOp_128"
  input: "^save/AssignVariableOp_129"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_130"
  input: "^save/AssignVariableOp_131"
  input: "^save/AssignVariableOp_132"
  input: "^save/AssignVariableOp_133"
  input: "^save/AssignVariableOp_134"
  input: "^save/AssignVariableOp_135"
  input: "^save/AssignVariableOp_136"
  input: "^save/AssignVariableOp_137"
  input: "^save/AssignVariableOp_138"
  input: "^save/AssignVariableOp_139"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_140"
  input: "^save/AssignVariableOp_141"
  input: "^save/AssignVariableOp_142"
  input: "^save/AssignVariableOp_143"
  input: "^save/AssignVariableOp_144"
  input: "^save/AssignVariableOp_145"
  input: "^save/AssignVariableOp_146"
  input: "^save/AssignVariableOp_147"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_24"
  input: "^save/AssignVariableOp_25"
  input: "^save/AssignVariableOp_26"
  input: "^save/AssignVariableOp_27"
  input: "^save/AssignVariableOp_28"
  input: "^save/AssignVariableOp_29"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_30"
  input: "^save/AssignVariableOp_31"
  input: "^save/AssignVariableOp_32"
  input: "^save/AssignVariableOp_33"
  input: "^save/AssignVariableOp_34"
  input: "^save/AssignVariableOp_35"
  input: "^save/AssignVariableOp_36"
  input: "^save/AssignVariableOp_37"
  input: "^save/AssignVariableOp_38"
  input: "^save/AssignVariableOp_39"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_40"
  input: "^save/AssignVariableOp_41"
  input: "^save/AssignVariableOp_42"
  input: "^save/AssignVariableOp_43"
  input: "^save/AssignVariableOp_44"
  input: "^save/AssignVariableOp_45"
  input: "^save/AssignVariableOp_46"
  input: "^save/AssignVariableOp_47"
  input: "^save/AssignVariableOp_48"
  input: "^save/AssignVariableOp_49"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_50"
  input: "^save/AssignVariableOp_51"
  input: "^save/AssignVariableOp_52"
  input: "^save/AssignVariableOp_53"
  input: "^save/AssignVariableOp_54"
  input: "^save/AssignVariableOp_55"
  input: "^save/AssignVariableOp_56"
  input: "^save/AssignVariableOp_57"
  input: "^save/AssignVariableOp_58"
  input: "^save/AssignVariableOp_59"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_60"
  input: "^save/AssignVariableOp_61"
  input: "^save/AssignVariableOp_62"
  input: "^save/AssignVariableOp_63"
  input: "^save/AssignVariableOp_64"
  input: "^save/AssignVariableOp_65"
  input: "^save/AssignVariableOp_66"
  input: "^save/AssignVariableOp_67"
  input: "^save/AssignVariableOp_68"
  input: "^save/AssignVariableOp_69"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_70"
  input: "^save/AssignVariableOp_71"
  input: "^save/AssignVariableOp_72"
  input: "^save/AssignVariableOp_73"
  input: "^save/AssignVariableOp_74"
  input: "^save/AssignVariableOp_75"
  input: "^save/AssignVariableOp_76"
  input: "^save/AssignVariableOp_77"
  input: "^save/AssignVariableOp_78"
  input: "^save/AssignVariableOp_79"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_80"
  input: "^save/AssignVariableOp_81"
  input: "^save/AssignVariableOp_82"
  input: "^save/AssignVariableOp_83"
  input: "^save/AssignVariableOp_84"
  input: "^save/AssignVariableOp_85"
  input: "^save/AssignVariableOp_86"
  input: "^save/AssignVariableOp_87"
  input: "^save/AssignVariableOp_88"
  input: "^save/AssignVariableOp_89"
  input: "^save/AssignVariableOp_9"
  input: "^save/AssignVariableOp_90"
  input: "^save/AssignVariableOp_91"
  input: "^save/AssignVariableOp_92"
  input: "^save/AssignVariableOp_93"
  input: "^save/AssignVariableOp_94"
  input: "^save/AssignVariableOp_95"
  input: "^save/AssignVariableOp_96"
  input: "^save/AssignVariableOp_97"
  input: "^save/AssignVariableOp_98"
  input: "^save/AssignVariableOp_99"
}
node {
  name: "save_1/filename/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save_1/filename"
  op: "PlaceholderWithDefault"
  input: "save_1/filename/input"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save_1/Const"
  op: "PlaceholderWithDefault"
  input: "save_1/filename"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save_1/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "batch_normalization_10/beta"
        string_val: "batch_normalization_10/gamma"
        string_val: "batch_normalization_10/moving_mean"
        string_val: "batch_normalization_10/moving_variance"
        string_val: "batch_normalization_11/beta"
        string_val: "batch_normalization_11/gamma"
        string_val: "batch_normalization_11/moving_mean"
        string_val: "batch_normalization_11/moving_variance"
        string_val: "batch_normalization_12/beta"
        string_val: "batch_normalization_12/gamma"
        string_val: "batch_normalization_12/moving_mean"
        string_val: "batch_normalization_12/moving_variance"
        string_val: "batch_normalization_13/beta"
        string_val: "batch_normalization_13/gamma"
        string_val: "batch_normalization_13/moving_mean"
        string_val: "batch_normalization_13/moving_variance"
        string_val: "batch_normalization_14/beta"
        string_val: "batch_normalization_14/gamma"
        string_val: "batch_normalization_14/moving_mean"
        string_val: "batch_normalization_14/moving_variance"
        string_val: "batch_normalization_15/beta"
        string_val: "batch_normalization_15/gamma"
        string_val: "batch_normalization_15/moving_mean"
        string_val: "batch_normalization_15/moving_variance"
        string_val: "batch_normalization_16/beta"
        string_val: "batch_normalization_16/gamma"
        string_val: "batch_normalization_16/moving_mean"
        string_val: "batch_normalization_16/moving_variance"
        string_val: "batch_normalization_17/beta"
        string_val: "batch_normalization_17/gamma"
        string_val: "batch_normalization_17/moving_mean"
        string_val: "batch_normalization_17/moving_variance"
        string_val: "batch_normalization_18/beta"
        string_val: "batch_normalization_18/gamma"
        string_val: "batch_normalization_18/moving_mean"
        string_val: "batch_normalization_18/moving_variance"
        string_val: "batch_normalization_19/beta"
        string_val: "batch_normalization_19/gamma"
        string_val: "batch_normalization_19/moving_mean"
        string_val: "batch_normalization_19/moving_variance"
        string_val: "batch_normalization_2/beta"
        string_val: "batch_normalization_2/gamma"
        string_val: "batch_normalization_2/moving_mean"
        string_val: "batch_normalization_2/moving_variance"
        string_val: "batch_normalization_20/beta"
        string_val: "batch_normalization_20/gamma"
        string_val: "batch_normalization_20/moving_mean"
        string_val: "batch_normalization_20/moving_variance"
        string_val: "batch_normalization_21/beta"
        string_val: "batch_normalization_21/gamma"
        string_val: "batch_normalization_21/moving_mean"
        string_val: "batch_normalization_21/moving_variance"
        string_val: "batch_normalization_22/beta"
        string_val: "batch_normalization_22/gamma"
        string_val: "batch_normalization_22/moving_mean"
        string_val: "batch_normalization_22/moving_variance"
        string_val: "batch_normalization_23/beta"
        string_val: "batch_normalization_23/gamma"
        string_val: "batch_normalization_23/moving_mean"
        string_val: "batch_normalization_23/moving_variance"
        string_val: "batch_normalization_3/beta"
        string_val: "batch_normalization_3/gamma"
        string_val: "batch_normalization_3/moving_mean"
        string_val: "batch_normalization_3/moving_variance"
        string_val: "batch_normalization_4/beta"
        string_val: "batch_normalization_4/gamma"
        string_val: "batch_normalization_4/moving_mean"
        string_val: "batch_normalization_4/moving_variance"
        string_val: "batch_normalization_5/beta"
        string_val: "batch_normalization_5/gamma"
        string_val: "batch_normalization_5/moving_mean"
        string_val: "batch_normalization_5/moving_variance"
        string_val: "batch_normalization_6/beta"
        string_val: "batch_normalization_6/gamma"
        string_val: "batch_normalization_6/moving_mean"
        string_val: "batch_normalization_6/moving_variance"
        string_val: "batch_normalization_7/beta"
        string_val: "batch_normalization_7/gamma"
        string_val: "batch_normalization_7/moving_mean"
        string_val: "batch_normalization_7/moving_variance"
        string_val: "batch_normalization_8/beta"
        string_val: "batch_normalization_8/gamma"
        string_val: "batch_normalization_8/moving_mean"
        string_val: "batch_normalization_8/moving_variance"
        string_val: "batch_normalization_9/beta"
        string_val: "batch_normalization_9/gamma"
        string_val: "batch_normalization_9/moving_mean"
        string_val: "batch_normalization_9/moving_variance"
        string_val: "conv2d/bias"
        string_val: "conv2d/kernel"
        string_val: "conv2d_1/bias"
        string_val: "conv2d_1/kernel"
        string_val: "conv2d_10/bias"
        string_val: "conv2d_10/kernel"
        string_val: "conv2d_11/bias"
        string_val: "conv2d_11/kernel"
        string_val: "conv2d_12/bias"
        string_val: "conv2d_12/kernel"
        string_val: "conv2d_13/bias"
        string_val: "conv2d_13/kernel"
        string_val: "conv2d_2/bias"
        string_val: "conv2d_2/kernel"
        string_val: "conv2d_3/bias"
        string_val: "conv2d_3/kernel"
        string_val: "conv2d_4/bias"
        string_val: "conv2d_4/kernel"
        string_val: "conv2d_5/bias"
        string_val: "conv2d_5/kernel"
        string_val: "conv2d_6/bias"
        string_val: "conv2d_6/kernel"
        string_val: "conv2d_7/bias"
        string_val: "conv2d_7/kernel"
        string_val: "conv2d_8/bias"
        string_val: "conv2d_8/kernel"
        string_val: "conv2d_9/bias"
        string_val: "conv2d_9/kernel"
        string_val: "conv2d_transpose/bias"
        string_val: "conv2d_transpose/kernel"
        string_val: "conv2d_transpose_1/bias"
        string_val: "conv2d_transpose_1/kernel"
        string_val: "conv2d_transpose_10/bias"
        string_val: "conv2d_transpose_10/kernel"
        string_val: "conv2d_transpose_11/bias"
        string_val: "conv2d_transpose_11/kernel"
        string_val: "conv2d_transpose_2/bias"
        string_val: "conv2d_transpose_2/kernel"
        string_val: "conv2d_transpose_3/bias"
        string_val: "conv2d_transpose_3/kernel"
        string_val: "conv2d_transpose_4/bias"
        string_val: "conv2d_transpose_4/kernel"
        string_val: "conv2d_transpose_5/bias"
        string_val: "conv2d_transpose_5/kernel"
        string_val: "conv2d_transpose_6/bias"
        string_val: "conv2d_transpose_6/kernel"
        string_val: "conv2d_transpose_7/bias"
        string_val: "conv2d_transpose_7/kernel"
        string_val: "conv2d_transpose_8/bias"
        string_val: "conv2d_transpose_8/kernel"
        string_val: "conv2d_transpose_9/bias"
        string_val: "conv2d_transpose_9/kernel"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save_1/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/SaveV2"
  op: "SaveV2"
  input: "save_1/Const"
  input: "save_1/SaveV2/tensor_names"
  input: "save_1/SaveV2/shape_and_slices"
  input: "batch_normalization/beta/Read/ReadVariableOp"
  input: "batch_normalization/gamma/Read/ReadVariableOp"
  input: "batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_1/beta/Read/ReadVariableOp"
  input: "batch_normalization_1/gamma/Read/ReadVariableOp"
  input: "batch_normalization_1/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_1/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_10/beta/Read/ReadVariableOp"
  input: "batch_normalization_10/gamma/Read/ReadVariableOp"
  input: "batch_normalization_10/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_10/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_11/beta/Read/ReadVariableOp"
  input: "batch_normalization_11/gamma/Read/ReadVariableOp"
  input: "batch_normalization_11/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_11/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_12/beta/Read/ReadVariableOp"
  input: "batch_normalization_12/gamma/Read/ReadVariableOp"
  input: "batch_normalization_12/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_12/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_13/beta/Read/ReadVariableOp"
  input: "batch_normalization_13/gamma/Read/ReadVariableOp"
  input: "batch_normalization_13/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_13/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_14/beta/Read/ReadVariableOp"
  input: "batch_normalization_14/gamma/Read/ReadVariableOp"
  input: "batch_normalization_14/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_14/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_15/beta/Read/ReadVariableOp"
  input: "batch_normalization_15/gamma/Read/ReadVariableOp"
  input: "batch_normalization_15/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_15/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_16/beta/Read/ReadVariableOp"
  input: "batch_normalization_16/gamma/Read/ReadVariableOp"
  input: "batch_normalization_16/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_16/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_17/beta/Read/ReadVariableOp"
  input: "batch_normalization_17/gamma/Read/ReadVariableOp"
  input: "batch_normalization_17/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_17/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_18/beta/Read/ReadVariableOp"
  input: "batch_normalization_18/gamma/Read/ReadVariableOp"
  input: "batch_normalization_18/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_18/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_19/beta/Read/ReadVariableOp"
  input: "batch_normalization_19/gamma/Read/ReadVariableOp"
  input: "batch_normalization_19/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_19/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_2/beta/Read/ReadVariableOp"
  input: "batch_normalization_2/gamma/Read/ReadVariableOp"
  input: "batch_normalization_2/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_2/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_20/beta/Read/ReadVariableOp"
  input: "batch_normalization_20/gamma/Read/ReadVariableOp"
  input: "batch_normalization_20/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_20/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_21/beta/Read/ReadVariableOp"
  input: "batch_normalization_21/gamma/Read/ReadVariableOp"
  input: "batch_normalization_21/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_21/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_22/beta/Read/ReadVariableOp"
  input: "batch_normalization_22/gamma/Read/ReadVariableOp"
  input: "batch_normalization_22/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_22/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_23/beta/Read/ReadVariableOp"
  input: "batch_normalization_23/gamma/Read/ReadVariableOp"
  input: "batch_normalization_23/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_23/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_3/beta/Read/ReadVariableOp"
  input: "batch_normalization_3/gamma/Read/ReadVariableOp"
  input: "batch_normalization_3/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_3/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_4/beta/Read/ReadVariableOp"
  input: "batch_normalization_4/gamma/Read/ReadVariableOp"
  input: "batch_normalization_4/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_4/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_5/beta/Read/ReadVariableOp"
  input: "batch_normalization_5/gamma/Read/ReadVariableOp"
  input: "batch_normalization_5/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_5/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_6/beta/Read/ReadVariableOp"
  input: "batch_normalization_6/gamma/Read/ReadVariableOp"
  input: "batch_normalization_6/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_6/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_7/beta/Read/ReadVariableOp"
  input: "batch_normalization_7/gamma/Read/ReadVariableOp"
  input: "batch_normalization_7/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_7/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_8/beta/Read/ReadVariableOp"
  input: "batch_normalization_8/gamma/Read/ReadVariableOp"
  input: "batch_normalization_8/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_8/moving_variance/Read/ReadVariableOp"
  input: "batch_normalization_9/beta/Read/ReadVariableOp"
  input: "batch_normalization_9/gamma/Read/ReadVariableOp"
  input: "batch_normalization_9/moving_mean/Read/ReadVariableOp"
  input: "batch_normalization_9/moving_variance/Read/ReadVariableOp"
  input: "conv2d/bias/Read/ReadVariableOp"
  input: "conv2d/kernel/Read/ReadVariableOp"
  input: "conv2d_1/bias/Read/ReadVariableOp"
  input: "conv2d_1/kernel/Read/ReadVariableOp"
  input: "conv2d_10/bias/Read/ReadVariableOp"
  input: "conv2d_10/kernel/Read/ReadVariableOp"
  input: "conv2d_11/bias/Read/ReadVariableOp"
  input: "conv2d_11/kernel/Read/ReadVariableOp"
  input: "conv2d_12/bias/Read/ReadVariableOp"
  input: "conv2d_12/kernel/Read/ReadVariableOp"
  input: "conv2d_13/bias/Read/ReadVariableOp"
  input: "conv2d_13/kernel/Read/ReadVariableOp"
  input: "conv2d_2/bias/Read/ReadVariableOp"
  input: "conv2d_2/kernel/Read/ReadVariableOp"
  input: "conv2d_3/bias/Read/ReadVariableOp"
  input: "conv2d_3/kernel/Read/ReadVariableOp"
  input: "conv2d_4/bias/Read/ReadVariableOp"
  input: "conv2d_4/kernel/Read/ReadVariableOp"
  input: "conv2d_5/bias/Read/ReadVariableOp"
  input: "conv2d_5/kernel/Read/ReadVariableOp"
  input: "conv2d_6/bias/Read/ReadVariableOp"
  input: "conv2d_6/kernel/Read/ReadVariableOp"
  input: "conv2d_7/bias/Read/ReadVariableOp"
  input: "conv2d_7/kernel/Read/ReadVariableOp"
  input: "conv2d_8/bias/Read/ReadVariableOp"
  input: "conv2d_8/kernel/Read/ReadVariableOp"
  input: "conv2d_9/bias/Read/ReadVariableOp"
  input: "conv2d_9/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose/bias/Read/ReadVariableOp"
  input: "conv2d_transpose/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_1/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_1/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_10/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_10/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_11/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_11/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_2/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_2/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_3/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_3/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_4/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_4/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_5/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_5/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_6/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_6/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_7/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_7/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_8/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_8/kernel/Read/ReadVariableOp"
  input: "conv2d_transpose_9/bias/Read/ReadVariableOp"
  input: "conv2d_transpose_9/kernel/Read/ReadVariableOp"
  input: "global_step"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save_1/control_dependency"
  op: "Identity"
  input: "save_1/Const"
  input: "^save_1/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save_1/Const"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "batch_normalization_10/beta"
        string_val: "batch_normalization_10/gamma"
        string_val: "batch_normalization_10/moving_mean"
        string_val: "batch_normalization_10/moving_variance"
        string_val: "batch_normalization_11/beta"
        string_val: "batch_normalization_11/gamma"
        string_val: "batch_normalization_11/moving_mean"
        string_val: "batch_normalization_11/moving_variance"
        string_val: "batch_normalization_12/beta"
        string_val: "batch_normalization_12/gamma"
        string_val: "batch_normalization_12/moving_mean"
        string_val: "batch_normalization_12/moving_variance"
        string_val: "batch_normalization_13/beta"
        string_val: "batch_normalization_13/gamma"
        string_val: "batch_normalization_13/moving_mean"
        string_val: "batch_normalization_13/moving_variance"
        string_val: "batch_normalization_14/beta"
        string_val: "batch_normalization_14/gamma"
        string_val: "batch_normalization_14/moving_mean"
        string_val: "batch_normalization_14/moving_variance"
        string_val: "batch_normalization_15/beta"
        string_val: "batch_normalization_15/gamma"
        string_val: "batch_normalization_15/moving_mean"
        string_val: "batch_normalization_15/moving_variance"
        string_val: "batch_normalization_16/beta"
        string_val: "batch_normalization_16/gamma"
        string_val: "batch_normalization_16/moving_mean"
        string_val: "batch_normalization_16/moving_variance"
        string_val: "batch_normalization_17/beta"
        string_val: "batch_normalization_17/gamma"
        string_val: "batch_normalization_17/moving_mean"
        string_val: "batch_normalization_17/moving_variance"
        string_val: "batch_normalization_18/beta"
        string_val: "batch_normalization_18/gamma"
        string_val: "batch_normalization_18/moving_mean"
        string_val: "batch_normalization_18/moving_variance"
        string_val: "batch_normalization_19/beta"
        string_val: "batch_normalization_19/gamma"
        string_val: "batch_normalization_19/moving_mean"
        string_val: "batch_normalization_19/moving_variance"
        string_val: "batch_normalization_2/beta"
        string_val: "batch_normalization_2/gamma"
        string_val: "batch_normalization_2/moving_mean"
        string_val: "batch_normalization_2/moving_variance"
        string_val: "batch_normalization_20/beta"
        string_val: "batch_normalization_20/gamma"
        string_val: "batch_normalization_20/moving_mean"
        string_val: "batch_normalization_20/moving_variance"
        string_val: "batch_normalization_21/beta"
        string_val: "batch_normalization_21/gamma"
        string_val: "batch_normalization_21/moving_mean"
        string_val: "batch_normalization_21/moving_variance"
        string_val: "batch_normalization_22/beta"
        string_val: "batch_normalization_22/gamma"
        string_val: "batch_normalization_22/moving_mean"
        string_val: "batch_normalization_22/moving_variance"
        string_val: "batch_normalization_23/beta"
        string_val: "batch_normalization_23/gamma"
        string_val: "batch_normalization_23/moving_mean"
        string_val: "batch_normalization_23/moving_variance"
        string_val: "batch_normalization_3/beta"
        string_val: "batch_normalization_3/gamma"
        string_val: "batch_normalization_3/moving_mean"
        string_val: "batch_normalization_3/moving_variance"
        string_val: "batch_normalization_4/beta"
        string_val: "batch_normalization_4/gamma"
        string_val: "batch_normalization_4/moving_mean"
        string_val: "batch_normalization_4/moving_variance"
        string_val: "batch_normalization_5/beta"
        string_val: "batch_normalization_5/gamma"
        string_val: "batch_normalization_5/moving_mean"
        string_val: "batch_normalization_5/moving_variance"
        string_val: "batch_normalization_6/beta"
        string_val: "batch_normalization_6/gamma"
        string_val: "batch_normalization_6/moving_mean"
        string_val: "batch_normalization_6/moving_variance"
        string_val: "batch_normalization_7/beta"
        string_val: "batch_normalization_7/gamma"
        string_val: "batch_normalization_7/moving_mean"
        string_val: "batch_normalization_7/moving_variance"
        string_val: "batch_normalization_8/beta"
        string_val: "batch_normalization_8/gamma"
        string_val: "batch_normalization_8/moving_mean"
        string_val: "batch_normalization_8/moving_variance"
        string_val: "batch_normalization_9/beta"
        string_val: "batch_normalization_9/gamma"
        string_val: "batch_normalization_9/moving_mean"
        string_val: "batch_normalization_9/moving_variance"
        string_val: "conv2d/bias"
        string_val: "conv2d/kernel"
        string_val: "conv2d_1/bias"
        string_val: "conv2d_1/kernel"
        string_val: "conv2d_10/bias"
        string_val: "conv2d_10/kernel"
        string_val: "conv2d_11/bias"
        string_val: "conv2d_11/kernel"
        string_val: "conv2d_12/bias"
        string_val: "conv2d_12/kernel"
        string_val: "conv2d_13/bias"
        string_val: "conv2d_13/kernel"
        string_val: "conv2d_2/bias"
        string_val: "conv2d_2/kernel"
        string_val: "conv2d_3/bias"
        string_val: "conv2d_3/kernel"
        string_val: "conv2d_4/bias"
        string_val: "conv2d_4/kernel"
        string_val: "conv2d_5/bias"
        string_val: "conv2d_5/kernel"
        string_val: "conv2d_6/bias"
        string_val: "conv2d_6/kernel"
        string_val: "conv2d_7/bias"
        string_val: "conv2d_7/kernel"
        string_val: "conv2d_8/bias"
        string_val: "conv2d_8/kernel"
        string_val: "conv2d_9/bias"
        string_val: "conv2d_9/kernel"
        string_val: "conv2d_transpose/bias"
        string_val: "conv2d_transpose/kernel"
        string_val: "conv2d_transpose_1/bias"
        string_val: "conv2d_transpose_1/kernel"
        string_val: "conv2d_transpose_10/bias"
        string_val: "conv2d_transpose_10/kernel"
        string_val: "conv2d_transpose_11/bias"
        string_val: "conv2d_transpose_11/kernel"
        string_val: "conv2d_transpose_2/bias"
        string_val: "conv2d_transpose_2/kernel"
        string_val: "conv2d_transpose_3/bias"
        string_val: "conv2d_transpose_3/kernel"
        string_val: "conv2d_transpose_4/bias"
        string_val: "conv2d_transpose_4/kernel"
        string_val: "conv2d_transpose_5/bias"
        string_val: "conv2d_transpose_5/kernel"
        string_val: "conv2d_transpose_6/bias"
        string_val: "conv2d_transpose_6/kernel"
        string_val: "conv2d_transpose_7/bias"
        string_val: "conv2d_transpose_7/kernel"
        string_val: "conv2d_transpose_8/bias"
        string_val: "conv2d_transpose_8/kernel"
        string_val: "conv2d_transpose_9/bias"
        string_val: "conv2d_transpose_9/kernel"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2/tensor_names"
  input: "save_1/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save_1/Identity"
  op: "Identity"
  input: "save_1/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp"
  op: "AssignVariableOp"
  input: "batch_normalization/beta"
  input: "save_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_1"
  op: "Identity"
  input: "save_1/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "batch_normalization/gamma"
  input: "save_1/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_2"
  op: "Identity"
  input: "save_1/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "batch_normalization/moving_mean"
  input: "save_1/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_3"
  op: "Identity"
  input: "save_1/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "batch_normalization/moving_variance"
  input: "save_1/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_4"
  op: "Identity"
  input: "save_1/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "batch_normalization_1/beta"
  input: "save_1/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_5"
  op: "Identity"
  input: "save_1/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "batch_normalization_1/gamma"
  input: "save_1/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_6"
  op: "Identity"
  input: "save_1/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "save_1/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_7"
  op: "Identity"
  input: "save_1/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "save_1/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_8"
  op: "Identity"
  input: "save_1/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "batch_normalization_10/beta"
  input: "save_1/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_9"
  op: "Identity"
  input: "save_1/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "batch_normalization_10/gamma"
  input: "save_1/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_10"
  op: "Identity"
  input: "save_1/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "batch_normalization_10/moving_mean"
  input: "save_1/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_11"
  op: "Identity"
  input: "save_1/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "batch_normalization_10/moving_variance"
  input: "save_1/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_12"
  op: "Identity"
  input: "save_1/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "batch_normalization_11/beta"
  input: "save_1/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_13"
  op: "Identity"
  input: "save_1/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "batch_normalization_11/gamma"
  input: "save_1/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_14"
  op: "Identity"
  input: "save_1/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "batch_normalization_11/moving_mean"
  input: "save_1/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_15"
  op: "Identity"
  input: "save_1/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "batch_normalization_11/moving_variance"
  input: "save_1/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_16"
  op: "Identity"
  input: "save_1/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "batch_normalization_12/beta"
  input: "save_1/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_17"
  op: "Identity"
  input: "save_1/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "batch_normalization_12/gamma"
  input: "save_1/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_18"
  op: "Identity"
  input: "save_1/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "batch_normalization_12/moving_mean"
  input: "save_1/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_19"
  op: "Identity"
  input: "save_1/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "batch_normalization_12/moving_variance"
  input: "save_1/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_20"
  op: "Identity"
  input: "save_1/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "batch_normalization_13/beta"
  input: "save_1/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_21"
  op: "Identity"
  input: "save_1/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "batch_normalization_13/gamma"
  input: "save_1/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_22"
  op: "Identity"
  input: "save_1/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "batch_normalization_13/moving_mean"
  input: "save_1/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_23"
  op: "Identity"
  input: "save_1/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "batch_normalization_13/moving_variance"
  input: "save_1/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_24"
  op: "Identity"
  input: "save_1/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "batch_normalization_14/beta"
  input: "save_1/Identity_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_25"
  op: "Identity"
  input: "save_1/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "batch_normalization_14/gamma"
  input: "save_1/Identity_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_26"
  op: "Identity"
  input: "save_1/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "batch_normalization_14/moving_mean"
  input: "save_1/Identity_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_27"
  op: "Identity"
  input: "save_1/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "batch_normalization_14/moving_variance"
  input: "save_1/Identity_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_28"
  op: "Identity"
  input: "save_1/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "batch_normalization_15/beta"
  input: "save_1/Identity_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_29"
  op: "Identity"
  input: "save_1/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_29"
  op: "AssignVariableOp"
  input: "batch_normalization_15/gamma"
  input: "save_1/Identity_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_30"
  op: "Identity"
  input: "save_1/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_30"
  op: "AssignVariableOp"
  input: "batch_normalization_15/moving_mean"
  input: "save_1/Identity_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_31"
  op: "Identity"
  input: "save_1/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_31"
  op: "AssignVariableOp"
  input: "batch_normalization_15/moving_variance"
  input: "save_1/Identity_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_32"
  op: "Identity"
  input: "save_1/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_32"
  op: "AssignVariableOp"
  input: "batch_normalization_16/beta"
  input: "save_1/Identity_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_33"
  op: "Identity"
  input: "save_1/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_33"
  op: "AssignVariableOp"
  input: "batch_normalization_16/gamma"
  input: "save_1/Identity_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_34"
  op: "Identity"
  input: "save_1/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_34"
  op: "AssignVariableOp"
  input: "batch_normalization_16/moving_mean"
  input: "save_1/Identity_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_35"
  op: "Identity"
  input: "save_1/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_35"
  op: "AssignVariableOp"
  input: "batch_normalization_16/moving_variance"
  input: "save_1/Identity_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_36"
  op: "Identity"
  input: "save_1/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_36"
  op: "AssignVariableOp"
  input: "batch_normalization_17/beta"
  input: "save_1/Identity_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_37"
  op: "Identity"
  input: "save_1/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_37"
  op: "AssignVariableOp"
  input: "batch_normalization_17/gamma"
  input: "save_1/Identity_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_38"
  op: "Identity"
  input: "save_1/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_38"
  op: "AssignVariableOp"
  input: "batch_normalization_17/moving_mean"
  input: "save_1/Identity_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_39"
  op: "Identity"
  input: "save_1/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_39"
  op: "AssignVariableOp"
  input: "batch_normalization_17/moving_variance"
  input: "save_1/Identity_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_40"
  op: "Identity"
  input: "save_1/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_40"
  op: "AssignVariableOp"
  input: "batch_normalization_18/beta"
  input: "save_1/Identity_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_41"
  op: "Identity"
  input: "save_1/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_41"
  op: "AssignVariableOp"
  input: "batch_normalization_18/gamma"
  input: "save_1/Identity_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_42"
  op: "Identity"
  input: "save_1/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_42"
  op: "AssignVariableOp"
  input: "batch_normalization_18/moving_mean"
  input: "save_1/Identity_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_43"
  op: "Identity"
  input: "save_1/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_43"
  op: "AssignVariableOp"
  input: "batch_normalization_18/moving_variance"
  input: "save_1/Identity_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_44"
  op: "Identity"
  input: "save_1/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_44"
  op: "AssignVariableOp"
  input: "batch_normalization_19/beta"
  input: "save_1/Identity_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_45"
  op: "Identity"
  input: "save_1/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_45"
  op: "AssignVariableOp"
  input: "batch_normalization_19/gamma"
  input: "save_1/Identity_45"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_46"
  op: "Identity"
  input: "save_1/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_46"
  op: "AssignVariableOp"
  input: "batch_normalization_19/moving_mean"
  input: "save_1/Identity_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_47"
  op: "Identity"
  input: "save_1/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_47"
  op: "AssignVariableOp"
  input: "batch_normalization_19/moving_variance"
  input: "save_1/Identity_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_48"
  op: "Identity"
  input: "save_1/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_48"
  op: "AssignVariableOp"
  input: "batch_normalization_2/beta"
  input: "save_1/Identity_48"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_49"
  op: "Identity"
  input: "save_1/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_49"
  op: "AssignVariableOp"
  input: "batch_normalization_2/gamma"
  input: "save_1/Identity_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_50"
  op: "Identity"
  input: "save_1/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_50"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "save_1/Identity_50"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_51"
  op: "Identity"
  input: "save_1/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_51"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "save_1/Identity_51"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_52"
  op: "Identity"
  input: "save_1/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_52"
  op: "AssignVariableOp"
  input: "batch_normalization_20/beta"
  input: "save_1/Identity_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_53"
  op: "Identity"
  input: "save_1/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_53"
  op: "AssignVariableOp"
  input: "batch_normalization_20/gamma"
  input: "save_1/Identity_53"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_54"
  op: "Identity"
  input: "save_1/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_54"
  op: "AssignVariableOp"
  input: "batch_normalization_20/moving_mean"
  input: "save_1/Identity_54"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_55"
  op: "Identity"
  input: "save_1/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_55"
  op: "AssignVariableOp"
  input: "batch_normalization_20/moving_variance"
  input: "save_1/Identity_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_56"
  op: "Identity"
  input: "save_1/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_56"
  op: "AssignVariableOp"
  input: "batch_normalization_21/beta"
  input: "save_1/Identity_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_57"
  op: "Identity"
  input: "save_1/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_57"
  op: "AssignVariableOp"
  input: "batch_normalization_21/gamma"
  input: "save_1/Identity_57"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_58"
  op: "Identity"
  input: "save_1/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_58"
  op: "AssignVariableOp"
  input: "batch_normalization_21/moving_mean"
  input: "save_1/Identity_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_59"
  op: "Identity"
  input: "save_1/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_59"
  op: "AssignVariableOp"
  input: "batch_normalization_21/moving_variance"
  input: "save_1/Identity_59"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_60"
  op: "Identity"
  input: "save_1/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_60"
  op: "AssignVariableOp"
  input: "batch_normalization_22/beta"
  input: "save_1/Identity_60"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_61"
  op: "Identity"
  input: "save_1/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_61"
  op: "AssignVariableOp"
  input: "batch_normalization_22/gamma"
  input: "save_1/Identity_61"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_62"
  op: "Identity"
  input: "save_1/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_62"
  op: "AssignVariableOp"
  input: "batch_normalization_22/moving_mean"
  input: "save_1/Identity_62"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_63"
  op: "Identity"
  input: "save_1/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_63"
  op: "AssignVariableOp"
  input: "batch_normalization_22/moving_variance"
  input: "save_1/Identity_63"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_64"
  op: "Identity"
  input: "save_1/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_64"
  op: "AssignVariableOp"
  input: "batch_normalization_23/beta"
  input: "save_1/Identity_64"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_65"
  op: "Identity"
  input: "save_1/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_65"
  op: "AssignVariableOp"
  input: "batch_normalization_23/gamma"
  input: "save_1/Identity_65"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_66"
  op: "Identity"
  input: "save_1/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_66"
  op: "AssignVariableOp"
  input: "batch_normalization_23/moving_mean"
  input: "save_1/Identity_66"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_67"
  op: "Identity"
  input: "save_1/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_67"
  op: "AssignVariableOp"
  input: "batch_normalization_23/moving_variance"
  input: "save_1/Identity_67"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_68"
  op: "Identity"
  input: "save_1/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_68"
  op: "AssignVariableOp"
  input: "batch_normalization_3/beta"
  input: "save_1/Identity_68"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_69"
  op: "Identity"
  input: "save_1/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_69"
  op: "AssignVariableOp"
  input: "batch_normalization_3/gamma"
  input: "save_1/Identity_69"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_70"
  op: "Identity"
  input: "save_1/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_70"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "save_1/Identity_70"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_71"
  op: "Identity"
  input: "save_1/RestoreV2:71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_71"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "save_1/Identity_71"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_72"
  op: "Identity"
  input: "save_1/RestoreV2:72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_72"
  op: "AssignVariableOp"
  input: "batch_normalization_4/beta"
  input: "save_1/Identity_72"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_73"
  op: "Identity"
  input: "save_1/RestoreV2:73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_73"
  op: "AssignVariableOp"
  input: "batch_normalization_4/gamma"
  input: "save_1/Identity_73"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_74"
  op: "Identity"
  input: "save_1/RestoreV2:74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_74"
  op: "AssignVariableOp"
  input: "batch_normalization_4/moving_mean"
  input: "save_1/Identity_74"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_75"
  op: "Identity"
  input: "save_1/RestoreV2:75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_75"
  op: "AssignVariableOp"
  input: "batch_normalization_4/moving_variance"
  input: "save_1/Identity_75"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_76"
  op: "Identity"
  input: "save_1/RestoreV2:76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_76"
  op: "AssignVariableOp"
  input: "batch_normalization_5/beta"
  input: "save_1/Identity_76"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_77"
  op: "Identity"
  input: "save_1/RestoreV2:77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_77"
  op: "AssignVariableOp"
  input: "batch_normalization_5/gamma"
  input: "save_1/Identity_77"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_78"
  op: "Identity"
  input: "save_1/RestoreV2:78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_78"
  op: "AssignVariableOp"
  input: "batch_normalization_5/moving_mean"
  input: "save_1/Identity_78"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_79"
  op: "Identity"
  input: "save_1/RestoreV2:79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_79"
  op: "AssignVariableOp"
  input: "batch_normalization_5/moving_variance"
  input: "save_1/Identity_79"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_80"
  op: "Identity"
  input: "save_1/RestoreV2:80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_80"
  op: "AssignVariableOp"
  input: "batch_normalization_6/beta"
  input: "save_1/Identity_80"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_81"
  op: "Identity"
  input: "save_1/RestoreV2:81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_81"
  op: "AssignVariableOp"
  input: "batch_normalization_6/gamma"
  input: "save_1/Identity_81"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_82"
  op: "Identity"
  input: "save_1/RestoreV2:82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_82"
  op: "AssignVariableOp"
  input: "batch_normalization_6/moving_mean"
  input: "save_1/Identity_82"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_83"
  op: "Identity"
  input: "save_1/RestoreV2:83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_83"
  op: "AssignVariableOp"
  input: "batch_normalization_6/moving_variance"
  input: "save_1/Identity_83"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_84"
  op: "Identity"
  input: "save_1/RestoreV2:84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_84"
  op: "AssignVariableOp"
  input: "batch_normalization_7/beta"
  input: "save_1/Identity_84"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_85"
  op: "Identity"
  input: "save_1/RestoreV2:85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_85"
  op: "AssignVariableOp"
  input: "batch_normalization_7/gamma"
  input: "save_1/Identity_85"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_86"
  op: "Identity"
  input: "save_1/RestoreV2:86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_86"
  op: "AssignVariableOp"
  input: "batch_normalization_7/moving_mean"
  input: "save_1/Identity_86"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_87"
  op: "Identity"
  input: "save_1/RestoreV2:87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_87"
  op: "AssignVariableOp"
  input: "batch_normalization_7/moving_variance"
  input: "save_1/Identity_87"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_88"
  op: "Identity"
  input: "save_1/RestoreV2:88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_88"
  op: "AssignVariableOp"
  input: "batch_normalization_8/beta"
  input: "save_1/Identity_88"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_89"
  op: "Identity"
  input: "save_1/RestoreV2:89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_89"
  op: "AssignVariableOp"
  input: "batch_normalization_8/gamma"
  input: "save_1/Identity_89"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_90"
  op: "Identity"
  input: "save_1/RestoreV2:90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_90"
  op: "AssignVariableOp"
  input: "batch_normalization_8/moving_mean"
  input: "save_1/Identity_90"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_91"
  op: "Identity"
  input: "save_1/RestoreV2:91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_91"
  op: "AssignVariableOp"
  input: "batch_normalization_8/moving_variance"
  input: "save_1/Identity_91"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_92"
  op: "Identity"
  input: "save_1/RestoreV2:92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_92"
  op: "AssignVariableOp"
  input: "batch_normalization_9/beta"
  input: "save_1/Identity_92"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_93"
  op: "Identity"
  input: "save_1/RestoreV2:93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_93"
  op: "AssignVariableOp"
  input: "batch_normalization_9/gamma"
  input: "save_1/Identity_93"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_94"
  op: "Identity"
  input: "save_1/RestoreV2:94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_94"
  op: "AssignVariableOp"
  input: "batch_normalization_9/moving_mean"
  input: "save_1/Identity_94"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_95"
  op: "Identity"
  input: "save_1/RestoreV2:95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_95"
  op: "AssignVariableOp"
  input: "batch_normalization_9/moving_variance"
  input: "save_1/Identity_95"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_96"
  op: "Identity"
  input: "save_1/RestoreV2:96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_96"
  op: "AssignVariableOp"
  input: "conv2d/bias"
  input: "save_1/Identity_96"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_97"
  op: "Identity"
  input: "save_1/RestoreV2:97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_97"
  op: "AssignVariableOp"
  input: "conv2d/kernel"
  input: "save_1/Identity_97"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_98"
  op: "Identity"
  input: "save_1/RestoreV2:98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_98"
  op: "AssignVariableOp"
  input: "conv2d_1/bias"
  input: "save_1/Identity_98"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_99"
  op: "Identity"
  input: "save_1/RestoreV2:99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_99"
  op: "AssignVariableOp"
  input: "conv2d_1/kernel"
  input: "save_1/Identity_99"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_100"
  op: "Identity"
  input: "save_1/RestoreV2:100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_100"
  op: "AssignVariableOp"
  input: "conv2d_10/bias"
  input: "save_1/Identity_100"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_101"
  op: "Identity"
  input: "save_1/RestoreV2:101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_101"
  op: "AssignVariableOp"
  input: "conv2d_10/kernel"
  input: "save_1/Identity_101"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_102"
  op: "Identity"
  input: "save_1/RestoreV2:102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_102"
  op: "AssignVariableOp"
  input: "conv2d_11/bias"
  input: "save_1/Identity_102"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_103"
  op: "Identity"
  input: "save_1/RestoreV2:103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_103"
  op: "AssignVariableOp"
  input: "conv2d_11/kernel"
  input: "save_1/Identity_103"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_104"
  op: "Identity"
  input: "save_1/RestoreV2:104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_104"
  op: "AssignVariableOp"
  input: "conv2d_12/bias"
  input: "save_1/Identity_104"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_105"
  op: "Identity"
  input: "save_1/RestoreV2:105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_105"
  op: "AssignVariableOp"
  input: "conv2d_12/kernel"
  input: "save_1/Identity_105"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_106"
  op: "Identity"
  input: "save_1/RestoreV2:106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_106"
  op: "AssignVariableOp"
  input: "conv2d_13/bias"
  input: "save_1/Identity_106"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_107"
  op: "Identity"
  input: "save_1/RestoreV2:107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_107"
  op: "AssignVariableOp"
  input: "conv2d_13/kernel"
  input: "save_1/Identity_107"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_108"
  op: "Identity"
  input: "save_1/RestoreV2:108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_108"
  op: "AssignVariableOp"
  input: "conv2d_2/bias"
  input: "save_1/Identity_108"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_109"
  op: "Identity"
  input: "save_1/RestoreV2:109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_109"
  op: "AssignVariableOp"
  input: "conv2d_2/kernel"
  input: "save_1/Identity_109"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_110"
  op: "Identity"
  input: "save_1/RestoreV2:110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_110"
  op: "AssignVariableOp"
  input: "conv2d_3/bias"
  input: "save_1/Identity_110"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_111"
  op: "Identity"
  input: "save_1/RestoreV2:111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_111"
  op: "AssignVariableOp"
  input: "conv2d_3/kernel"
  input: "save_1/Identity_111"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_112"
  op: "Identity"
  input: "save_1/RestoreV2:112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_112"
  op: "AssignVariableOp"
  input: "conv2d_4/bias"
  input: "save_1/Identity_112"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_113"
  op: "Identity"
  input: "save_1/RestoreV2:113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_113"
  op: "AssignVariableOp"
  input: "conv2d_4/kernel"
  input: "save_1/Identity_113"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_114"
  op: "Identity"
  input: "save_1/RestoreV2:114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_114"
  op: "AssignVariableOp"
  input: "conv2d_5/bias"
  input: "save_1/Identity_114"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_115"
  op: "Identity"
  input: "save_1/RestoreV2:115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_115"
  op: "AssignVariableOp"
  input: "conv2d_5/kernel"
  input: "save_1/Identity_115"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_116"
  op: "Identity"
  input: "save_1/RestoreV2:116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_116"
  op: "AssignVariableOp"
  input: "conv2d_6/bias"
  input: "save_1/Identity_116"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_117"
  op: "Identity"
  input: "save_1/RestoreV2:117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_117"
  op: "AssignVariableOp"
  input: "conv2d_6/kernel"
  input: "save_1/Identity_117"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_118"
  op: "Identity"
  input: "save_1/RestoreV2:118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_118"
  op: "AssignVariableOp"
  input: "conv2d_7/bias"
  input: "save_1/Identity_118"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_119"
  op: "Identity"
  input: "save_1/RestoreV2:119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_119"
  op: "AssignVariableOp"
  input: "conv2d_7/kernel"
  input: "save_1/Identity_119"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_120"
  op: "Identity"
  input: "save_1/RestoreV2:120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_120"
  op: "AssignVariableOp"
  input: "conv2d_8/bias"
  input: "save_1/Identity_120"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_121"
  op: "Identity"
  input: "save_1/RestoreV2:121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_121"
  op: "AssignVariableOp"
  input: "conv2d_8/kernel"
  input: "save_1/Identity_121"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_122"
  op: "Identity"
  input: "save_1/RestoreV2:122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_122"
  op: "AssignVariableOp"
  input: "conv2d_9/bias"
  input: "save_1/Identity_122"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_123"
  op: "Identity"
  input: "save_1/RestoreV2:123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_123"
  op: "AssignVariableOp"
  input: "conv2d_9/kernel"
  input: "save_1/Identity_123"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_124"
  op: "Identity"
  input: "save_1/RestoreV2:124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_124"
  op: "AssignVariableOp"
  input: "conv2d_transpose/bias"
  input: "save_1/Identity_124"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_125"
  op: "Identity"
  input: "save_1/RestoreV2:125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_125"
  op: "AssignVariableOp"
  input: "conv2d_transpose/kernel"
  input: "save_1/Identity_125"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_126"
  op: "Identity"
  input: "save_1/RestoreV2:126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_126"
  op: "AssignVariableOp"
  input: "conv2d_transpose_1/bias"
  input: "save_1/Identity_126"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_127"
  op: "Identity"
  input: "save_1/RestoreV2:127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_127"
  op: "AssignVariableOp"
  input: "conv2d_transpose_1/kernel"
  input: "save_1/Identity_127"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_128"
  op: "Identity"
  input: "save_1/RestoreV2:128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_128"
  op: "AssignVariableOp"
  input: "conv2d_transpose_10/bias"
  input: "save_1/Identity_128"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_129"
  op: "Identity"
  input: "save_1/RestoreV2:129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_129"
  op: "AssignVariableOp"
  input: "conv2d_transpose_10/kernel"
  input: "save_1/Identity_129"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_130"
  op: "Identity"
  input: "save_1/RestoreV2:130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_130"
  op: "AssignVariableOp"
  input: "conv2d_transpose_11/bias"
  input: "save_1/Identity_130"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_131"
  op: "Identity"
  input: "save_1/RestoreV2:131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_131"
  op: "AssignVariableOp"
  input: "conv2d_transpose_11/kernel"
  input: "save_1/Identity_131"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_132"
  op: "Identity"
  input: "save_1/RestoreV2:132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_132"
  op: "AssignVariableOp"
  input: "conv2d_transpose_2/bias"
  input: "save_1/Identity_132"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_133"
  op: "Identity"
  input: "save_1/RestoreV2:133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_133"
  op: "AssignVariableOp"
  input: "conv2d_transpose_2/kernel"
  input: "save_1/Identity_133"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_134"
  op: "Identity"
  input: "save_1/RestoreV2:134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_134"
  op: "AssignVariableOp"
  input: "conv2d_transpose_3/bias"
  input: "save_1/Identity_134"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_135"
  op: "Identity"
  input: "save_1/RestoreV2:135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_135"
  op: "AssignVariableOp"
  input: "conv2d_transpose_3/kernel"
  input: "save_1/Identity_135"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_136"
  op: "Identity"
  input: "save_1/RestoreV2:136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_136"
  op: "AssignVariableOp"
  input: "conv2d_transpose_4/bias"
  input: "save_1/Identity_136"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_137"
  op: "Identity"
  input: "save_1/RestoreV2:137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_137"
  op: "AssignVariableOp"
  input: "conv2d_transpose_4/kernel"
  input: "save_1/Identity_137"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_138"
  op: "Identity"
  input: "save_1/RestoreV2:138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_138"
  op: "AssignVariableOp"
  input: "conv2d_transpose_5/bias"
  input: "save_1/Identity_138"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_139"
  op: "Identity"
  input: "save_1/RestoreV2:139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_139"
  op: "AssignVariableOp"
  input: "conv2d_transpose_5/kernel"
  input: "save_1/Identity_139"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_140"
  op: "Identity"
  input: "save_1/RestoreV2:140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_140"
  op: "AssignVariableOp"
  input: "conv2d_transpose_6/bias"
  input: "save_1/Identity_140"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_141"
  op: "Identity"
  input: "save_1/RestoreV2:141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_141"
  op: "AssignVariableOp"
  input: "conv2d_transpose_6/kernel"
  input: "save_1/Identity_141"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_142"
  op: "Identity"
  input: "save_1/RestoreV2:142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_142"
  op: "AssignVariableOp"
  input: "conv2d_transpose_7/bias"
  input: "save_1/Identity_142"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_143"
  op: "Identity"
  input: "save_1/RestoreV2:143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_143"
  op: "AssignVariableOp"
  input: "conv2d_transpose_7/kernel"
  input: "save_1/Identity_143"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_144"
  op: "Identity"
  input: "save_1/RestoreV2:144"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_144"
  op: "AssignVariableOp"
  input: "conv2d_transpose_8/bias"
  input: "save_1/Identity_144"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_145"
  op: "Identity"
  input: "save_1/RestoreV2:145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_145"
  op: "AssignVariableOp"
  input: "conv2d_transpose_8/kernel"
  input: "save_1/Identity_145"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_146"
  op: "Identity"
  input: "save_1/RestoreV2:146"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_146"
  op: "AssignVariableOp"
  input: "conv2d_transpose_9/bias"
  input: "save_1/Identity_146"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Identity_147"
  op: "Identity"
  input: "save_1/RestoreV2:147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/AssignVariableOp_147"
  op: "AssignVariableOp"
  input: "conv2d_transpose_9/kernel"
  input: "save_1/Identity_147"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save_1/Assign"
  op: "Assign"
  input: "global_step"
  input: "save_1/RestoreV2:148"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/restore_all"
  op: "NoOp"
  input: "^save_1/Assign"
  input: "^save_1/AssignVariableOp"
  input: "^save_1/AssignVariableOp_1"
  input: "^save_1/AssignVariableOp_10"
  input: "^save_1/AssignVariableOp_100"
  input: "^save_1/AssignVariableOp_101"
  input: "^save_1/AssignVariableOp_102"
  input: "^save_1/AssignVariableOp_103"
  input: "^save_1/AssignVariableOp_104"
  input: "^save_1/AssignVariableOp_105"
  input: "^save_1/AssignVariableOp_106"
  input: "^save_1/AssignVariableOp_107"
  input: "^save_1/AssignVariableOp_108"
  input: "^save_1/AssignVariableOp_109"
  input: "^save_1/AssignVariableOp_11"
  input: "^save_1/AssignVariableOp_110"
  input: "^save_1/AssignVariableOp_111"
  input: "^save_1/AssignVariableOp_112"
  input: "^save_1/AssignVariableOp_113"
  input: "^save_1/AssignVariableOp_114"
  input: "^save_1/AssignVariableOp_115"
  input: "^save_1/AssignVariableOp_116"
  input: "^save_1/AssignVariableOp_117"
  input: "^save_1/AssignVariableOp_118"
  input: "^save_1/AssignVariableOp_119"
  input: "^save_1/AssignVariableOp_12"
  input: "^save_1/AssignVariableOp_120"
  input: "^save_1/AssignVariableOp_121"
  input: "^save_1/AssignVariableOp_122"
  input: "^save_1/AssignVariableOp_123"
  input: "^save_1/AssignVariableOp_124"
  input: "^save_1/AssignVariableOp_125"
  input: "^save_1/AssignVariableOp_126"
  input: "^save_1/AssignVariableOp_127"
  input: "^save_1/AssignVariableOp_128"
  input: "^save_1/AssignVariableOp_129"
  input: "^save_1/AssignVariableOp_13"
  input: "^save_1/AssignVariableOp_130"
  input: "^save_1/AssignVariableOp_131"
  input: "^save_1/AssignVariableOp_132"
  input: "^save_1/AssignVariableOp_133"
  input: "^save_1/AssignVariableOp_134"
  input: "^save_1/AssignVariableOp_135"
  input: "^save_1/AssignVariableOp_136"
  input: "^save_1/AssignVariableOp_137"
  input: "^save_1/AssignVariableOp_138"
  input: "^save_1/AssignVariableOp_139"
  input: "^save_1/AssignVariableOp_14"
  input: "^save_1/AssignVariableOp_140"
  input: "^save_1/AssignVariableOp_141"
  input: "^save_1/AssignVariableOp_142"
  input: "^save_1/AssignVariableOp_143"
  input: "^save_1/AssignVariableOp_144"
  input: "^save_1/AssignVariableOp_145"
  input: "^save_1/AssignVariableOp_146"
  input: "^save_1/AssignVariableOp_147"
  input: "^save_1/AssignVariableOp_15"
  input: "^save_1/AssignVariableOp_16"
  input: "^save_1/AssignVariableOp_17"
  input: "^save_1/AssignVariableOp_18"
  input: "^save_1/AssignVariableOp_19"
  input: "^save_1/AssignVariableOp_2"
  input: "^save_1/AssignVariableOp_20"
  input: "^save_1/AssignVariableOp_21"
  input: "^save_1/AssignVariableOp_22"
  input: "^save_1/AssignVariableOp_23"
  input: "^save_1/AssignVariableOp_24"
  input: "^save_1/AssignVariableOp_25"
  input: "^save_1/AssignVariableOp_26"
  input: "^save_1/AssignVariableOp_27"
  input: "^save_1/AssignVariableOp_28"
  input: "^save_1/AssignVariableOp_29"
  input: "^save_1/AssignVariableOp_3"
  input: "^save_1/AssignVariableOp_30"
  input: "^save_1/AssignVariableOp_31"
  input: "^save_1/AssignVariableOp_32"
  input: "^save_1/AssignVariableOp_33"
  input: "^save_1/AssignVariableOp_34"
  input: "^save_1/AssignVariableOp_35"
  input: "^save_1/AssignVariableOp_36"
  input: "^save_1/AssignVariableOp_37"
  input: "^save_1/AssignVariableOp_38"
  input: "^save_1/AssignVariableOp_39"
  input: "^save_1/AssignVariableOp_4"
  input: "^save_1/AssignVariableOp_40"
  input: "^save_1/AssignVariableOp_41"
  input: "^save_1/AssignVariableOp_42"
  input: "^save_1/AssignVariableOp_43"
  input: "^save_1/AssignVariableOp_44"
  input: "^save_1/AssignVariableOp_45"
  input: "^save_1/AssignVariableOp_46"
  input: "^save_1/AssignVariableOp_47"
  input: "^save_1/AssignVariableOp_48"
  input: "^save_1/AssignVariableOp_49"
  input: "^save_1/AssignVariableOp_5"
  input: "^save_1/AssignVariableOp_50"
  input: "^save_1/AssignVariableOp_51"
  input: "^save_1/AssignVariableOp_52"
  input: "^save_1/AssignVariableOp_53"
  input: "^save_1/AssignVariableOp_54"
  input: "^save_1/AssignVariableOp_55"
  input: "^save_1/AssignVariableOp_56"
  input: "^save_1/AssignVariableOp_57"
  input: "^save_1/AssignVariableOp_58"
  input: "^save_1/AssignVariableOp_59"
  input: "^save_1/AssignVariableOp_6"
  input: "^save_1/AssignVariableOp_60"
  input: "^save_1/AssignVariableOp_61"
  input: "^save_1/AssignVariableOp_62"
  input: "^save_1/AssignVariableOp_63"
  input: "^save_1/AssignVariableOp_64"
  input: "^save_1/AssignVariableOp_65"
  input: "^save_1/AssignVariableOp_66"
  input: "^save_1/AssignVariableOp_67"
  input: "^save_1/AssignVariableOp_68"
  input: "^save_1/AssignVariableOp_69"
  input: "^save_1/AssignVariableOp_7"
  input: "^save_1/AssignVariableOp_70"
  input: "^save_1/AssignVariableOp_71"
  input: "^save_1/AssignVariableOp_72"
  input: "^save_1/AssignVariableOp_73"
  input: "^save_1/AssignVariableOp_74"
  input: "^save_1/AssignVariableOp_75"
  input: "^save_1/AssignVariableOp_76"
  input: "^save_1/AssignVariableOp_77"
  input: "^save_1/AssignVariableOp_78"
  input: "^save_1/AssignVariableOp_79"
  input: "^save_1/AssignVariableOp_8"
  input: "^save_1/AssignVariableOp_80"
  input: "^save_1/AssignVariableOp_81"
  input: "^save_1/AssignVariableOp_82"
  input: "^save_1/AssignVariableOp_83"
  input: "^save_1/AssignVariableOp_84"
  input: "^save_1/AssignVariableOp_85"
  input: "^save_1/AssignVariableOp_86"
  input: "^save_1/AssignVariableOp_87"
  input: "^save_1/AssignVariableOp_88"
  input: "^save_1/AssignVariableOp_89"
  input: "^save_1/AssignVariableOp_9"
  input: "^save_1/AssignVariableOp_90"
  input: "^save_1/AssignVariableOp_91"
  input: "^save_1/AssignVariableOp_92"
  input: "^save_1/AssignVariableOp_93"
  input: "^save_1/AssignVariableOp_94"
  input: "^save_1/AssignVariableOp_95"
  input: "^save_1/AssignVariableOp_96"
  input: "^save_1/AssignVariableOp_97"
  input: "^save_1/AssignVariableOp_98"
  input: "^save_1/AssignVariableOp_99"
}
versions {
  producer: 38
}
